<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-02-01T21:21:36+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Habla computing Blog</title><entry><title type="html">KX Insights: data analytics made simple</title><link href="http://localhost:4000/2023/12/19/Power-Up-Your-Data-Analytics-Insights.html" rel="alternate" type="text/html" title="KX Insights: data analytics made simple" /><published>2023-12-19T00:00:00+01:00</published><updated>2023-12-19T00:00:00+01:00</updated><id>http://localhost:4000/2023/12/19/Power-Up-Your-Data-Analytics-Insights</id><content type="html" xml:base="http://localhost:4000/2023/12/19/Power-Up-Your-Data-Analytics-Insights.html">&lt;h1 id=&quot;kx-insights-simplifying-data-analytics&quot;&gt;KX Insights: Simplifying Data Analytics&lt;/h1&gt;

&lt;p&gt;This post serves as a concise exploration of the versatile capabilities within &lt;a href=&quot;https://kx.com/products/kdb-insights/&quot;&gt;&lt;strong&gt;KX Insights&lt;/strong&gt;&lt;/a&gt;, highlighting its role as the premier cloud-based platform for efficient time series analysis. Leveraging the robust capabilities of kdb+ vector databases, this tool stands out not only for its exceptional speed but also for empowering users— particularly those without advanced technical expertise— to seamlessly develop data ingestion processes, query engines, and visualizations. The post will be structured as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;#use-case&quot;&gt;Use Case&lt;/a&gt;: Delving into a specific use case, we will employ an illustrative example using telecommunication network data. This section aims to explain the kind of data we start with and the functionality we want to derive from it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;#was-it-always-this-easy&quot;&gt;&lt;em&gt;Was it always this easy?&lt;/em&gt;&lt;/a&gt;: In this first technical section, we will guide you through establishing a straightforward data pipeline. It explores the steps involved in gathering key stream data and demonstrates how to leverage KX Insights’ capabilities for insightful analysis. The overall aim is to highlight the simplicity of working with the tool.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;#the-hardest-the-easiest&quot;&gt;&lt;em&gt;The Hardest; The Easier&lt;/em&gt;&lt;/a&gt;: This section takes a deeper dive by introducing a more intricate pipeline, showcasing the tool’s adaptability and advanced capabilities. It aims to reveal the tool’s capacity to handle complex scenarios and provide solutions even when faced with challenges.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As we progress through these sections, you will gain a comprehensive understanding of how KX Insights transforms intricate time series analysis tasks into manageable and insightful processes, making it an invaluable asset for both seasoned professionals and those new to the field.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ℹ️ &lt;em&gt;To facilitate your engagement with the post, please refer to the following &lt;a href=&quot;https://github.com/hablapps/insights-demohttps://github.com/hablapps/insights-demo&quot;&gt;Github repository&lt;/a&gt;. There you will find sample data, code snippets, schemas, and other utilities that will allow you to reproduce the results from this report.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;use-case&quot;&gt;Use Case&lt;/h1&gt;

&lt;p&gt;Let’s consider a scenario where we are a telecommunications (telco) company deeply involved in the dynamic world of high-density real-time telco data. In this situation, our goal is to empower our Data Team with a robust system for in-depth data analysis and insightful conclusions. The provided data have several fields that will be explained deeply in a &lt;a href=&quot;#deploying-the-database&quot;&gt;later&lt;/a&gt; section, but to ilustrate the use case we can preview some available records:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;ts&lt;/th&gt;
      &lt;th&gt;cellID&lt;/th&gt;
      &lt;th&gt;phase&lt;/th&gt;
      &lt;th&gt;imsi&lt;/th&gt;
      &lt;th&gt;imei&lt;/th&gt;
      &lt;th&gt;dspeed&lt;/th&gt;
      &lt;th&gt;uspeed&lt;/th&gt;
      &lt;th&gt;lat&lt;/th&gt;
      &lt;th&gt;lng&lt;/th&gt;
      &lt;th&gt;cellDistance&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;2023-12-29D09:04:41.721100000&lt;/td&gt;
      &lt;td&gt;8c314ca8-7d12-44d0-933d-015d0e3d951a&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;100000000000001&lt;/td&gt;
      &lt;td&gt;507552665363501&lt;/td&gt;
      &lt;td&gt;280.2945&lt;/td&gt;
      &lt;td&gt;57.12098&lt;/td&gt;
      &lt;td&gt;38.51778&lt;/td&gt;
      &lt;td&gt;-89.06238&lt;/td&gt;
      &lt;td&gt;2.124557&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2023-12-29D09:25:41.721200000&lt;/td&gt;
      &lt;td&gt;51587a43-60ef-42ea-88c9-b3128413870a&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;100000000000002&lt;/td&gt;
      &lt;td&gt;868646385084695&lt;/td&gt;
      &lt;td&gt;317.5947&lt;/td&gt;
      &lt;td&gt;62.77128&lt;/td&gt;
      &lt;td&gt;38.84545&lt;/td&gt;
      &lt;td&gt;-89.6521&lt;/td&gt;
      &lt;td&gt;2.570359&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Basically, these records show information about calls from users located at a certain longitude and latitude, through a specific cell of the telecommunication network. To analyse this data, we will create comprehensive dashboards that visually represent key metrics. We have identified specific elements that will be pivotal in enhancing our operational understanding:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;User Distribution Heatmap&lt;/strong&gt;: Our objective is to gain insights into the geographical distribution of our users in real-time. The User Distribution Heatmap within KX Insights will vividly illustrate the concentration of our current users, allowing us to promptly identify high-demand areas.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Network Performance Analysis (Line Graph)&lt;/strong&gt;: Understanding the impact of network density on speed is critical for ensuring a seamless user experience. Through KX Insights, we plan to deploy a Line Graph that dynamically illustrates network upload and download speed variability, enabling proactive optimization of our network performance.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;User Location Tracker&lt;/strong&gt;: The ability to locate users within a specific geography is essential for targeted interventions and optimizations. KX Insights will provide real-time information on the geographical whereabouts of our users, facilitating strategic decision-making.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Failure Analysis TreeMap&lt;/strong&gt;: Identifying and resolving issues promptly is key to maintaining a high-quality service. A TreeMap, powered by KX Insights, will pinpoint users experiencing difficulties with their connection, enabling us to swiftly address issues and ensure a seamless communication experience for our users.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For our development journey, we’ve chosen to leverage the use case outlined earlier for two compelling reasons: the data’s temporal nature, allowing for the utilization of time series analysis tools, and its high density. By doing so, we aim not only to demonstrate the prowess of KX Insights but also to shed light on the underlying machinery powering it—the kdb+ database.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ℹ️ &lt;em&gt;Please note that the data presented is specifically crafted for this illustrative example and does not originate from real telecommunication sources.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;was-it-always-this-easy&quot;&gt;Was it Always This Easy?&lt;/h1&gt;

&lt;p&gt;Our decision to use KX Insights for implementing the use case described in the last section is driven not only by the nature of our data, characterized by a vast volume of real-time information, but also by the platform’s exceptional capabilities in constructing functional pipelines, executing complex queries, and delivering compelling visualizations. To appreciate these capabilities, let’s suppose we would need to construct a similar architecture using only kdb+/q and other KX tools. Then, the question arises: How challenging would this endeavor be? Here, we succinctly outline some of the crucial steps that should be undertaken:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Build a Kafka Consumer:&lt;/strong&gt; Constructing a Kafka consumer entails delving into the &lt;a href=&quot;https://github.com/KxSystems/kafka&quot;&gt;API&lt;/a&gt;, understanding its intricacies, and developing the necessary infrastructure to facilitate seamless data consumption.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Orchestrate the Pipeline:&lt;/strong&gt; Docking the pipeline involves implementing all the transformations essential for processing real-time data. This step requires careful consideration and meticulous execution.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Develop Graphic Tools:&lt;/strong&gt; While the &lt;a href=&quot;https://code.kx.com/analyst/libraries/grammar-of-graphics/&quot;&gt;&lt;em&gt;Grammar of Graphics&lt;/em&gt;&lt;/a&gt; package is a powerful tool, we would still need to create a system for visualizing the aggregated data. We could use &lt;a href=&quot;https://code.kx.com/dashboards/&quot;&gt;KX Dashboards&lt;/a&gt; to power this process, but we would still have two different applications, potentially leading to IPC technical specification challenges.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Beyond these tasks, there’s the challenge of working with an event handler for streaming data, which is not always straightforward. Additionally, packaging all these components into a black-box-like application is necessary to empower the entire data team to work with it, regardless of their technical expertise. Moreover, generalizing this solution for any conceivable use case poses an even more significant undertaking.&lt;/p&gt;

&lt;p&gt;The solution presented in this post using &lt;a href=&quot;https://kx.com/products/kdb-insights-enterprise/&quot;&gt;KX Insights Enterprise&lt;/a&gt; wraps all this complexity in a user-friendly web interface, eliminating the need for the data team to possess intricate technical knowledge. To walk the reader through this tool as easily as possible, we will follow the recommended steps of KX Insights, which can be seen in the following image:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/12/19/overview.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;deploying-the-database&quot;&gt;Deploying the database&lt;/h3&gt;

&lt;p&gt;Once we have accessed the &lt;strong&gt;Build a Database&lt;/strong&gt; tab, we can configure it to suit our specific needs. For simplicity, we will leave the technical specifications (memory, storage, etc.) at their default settings, thus avoiding delving into unnecessary technical details.&lt;/p&gt;

&lt;p&gt;Our database (which we will name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;db-telco&lt;/code&gt;) will include the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; table. This table is where real-time telephony data will be stored (and from where the heatmap, tracker, and volume views will capture the data). It will have 10 columns, as seen in the records example, which are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ts&lt;/code&gt;: The timestamp of the network trace for the record (timestamp type).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cellID&lt;/code&gt;: The ID of the cell on which the trace is being transmitted (symbol type).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;phase&lt;/code&gt;: Indicates the data source’s release stage (int type).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;imsi&lt;/code&gt;: The ID of the SIM card participating in the trace (string type).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;imei&lt;/code&gt;: The ID of the device participating in the trace (string type).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dspeed&lt;/code&gt;: The download speed of the network for this particular event (float type).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uspeed&lt;/code&gt;: The upload speed of the network for this particular event (float type).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lat&lt;/code&gt;: The latitude of the device from which the event is taking place (float type).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lng&lt;/code&gt;: The longitude of the device from which the event is taking place (float type).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cellDistance&lt;/code&gt;: The distance to the cell of the device (float type).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/12/19/schema_main.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After creating the schemas for the table, we save and click on &lt;strong&gt;Deploy&lt;/strong&gt;, and with that, we have the database up and running!&lt;/p&gt;

&lt;h3 id=&quot;data-slide-the-pipeline&quot;&gt;Data slide: the pipeline&lt;/h3&gt;

&lt;p&gt;When it comes to data ingestion, pipelines are employed. The tools provided by KX Insights Enterprise for the creation, analysis, and testing of pipelines are extensive and straightforward to use, as we will see below. Constructing the pipelines using the web interface (i.e., going to &lt;em&gt;Import Data&lt;/em&gt; in the Overview window) is pretty straightforward and gives us a basic pipeline that will have four fundamental parts, which can then be further complicated or supplemented with others, namely:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Reader:&lt;/strong&gt; The reader for Insights pipelines is highly versatile, allowing data ingestion from multiple sources, as depicted in the image below.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Decoder:&lt;/strong&gt; The decoder, responsible for transforming data received through the reader from different formats (JSON, CSV, etc.) into a q datatype.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Apply Schema:&lt;/strong&gt; Shapes the incoming data through ingestion. It can be any type of data, tabular, or an array.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Writer:&lt;/strong&gt; This last component, as its name suggests, is responsible for writing the received data into a table in a previously created database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s create a pipeline for the ingestion of telephone data, provided by a Kafka service. To achieve this, having chosen Kafka as the data source (selecting the corresponding broker and topic), JSON as the decoder, the schema of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; table seen earlier, and writing to that table, we end up with the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/12/19/basic_ppline.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We will be writing in a database stored in the KX Insights architecture, but this is not the only place we can store the captured data. Some of the other options are a Kafka Topic, Amazon S3, and more. If you want to delve deeper into the pipeline operators, you can refer to the &lt;a href=&quot;https://code.kx.com/insights/1.8/enterprise/ingest/pipeline/operators/index.html&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before having a functional pipeline, a couple of things need to be done.&lt;/p&gt;

&lt;p&gt;Firstly, as we are getting JSON-format data, we will have to decode it. The data arriving through the Decoder is in dictionary format (as is the main approach for JSON data), but the Apply Schema expects tables. We need to transform the data, which can be easily done through an additional intermediate step. Particularly, let’s use the dropdown on the left, looking for the Map cell. Map applies the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map()&lt;/code&gt; function to the incoming data, transforming all data in the stream. In this case, as the output of the Decoder is a dictionary, and a table is expected, the only function to apply to the data is the q &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enlist&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ℹ️ &lt;em&gt;This step must be included because the captured data is in JSON format. If we would have CSV-like streaming data, we wouldn’t need to transform it to tables, as the usual interpretation of CSV is table-like.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/12/19/basic_ppline_map.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Additionally, considering the potentially high data density, it is advisable to incorporate an intermediate step before writing to the database – an Apply function. This function facilitates a gradual transfer of data to the writing process at a more measured pace, storing it in batches. By minimizing the frequency of database writer calls, we mitigate the risk of efficiency reduction. This practice is recommended to prevent component overload, which could otherwise result in processes being terminated due to out-of-memory (OOM) issues. It’s worth noting that this technique is commonly employed in other platforms for real-time data ingestion, underscoring its effectiveness and reliability.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/12/19/basic_ppline_apply.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The magic of Insights lies precisely in the fact that, with a minimal amount of code, we have managed to deploy a real-time massive data ingestion pipeline. You don’t always need to be technical to work with data!&lt;/p&gt;

&lt;h3 id=&quot;querying-the-data&quot;&gt;Querying the data&lt;/h3&gt;

&lt;p&gt;We will need to understand how the data is stored to query it effectively. KX Insights supports three types of storage tiers: &lt;strong&gt;RDB, IDB, and HDB&lt;/strong&gt;, each with specific characteristics:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;RDB stores only real-time data, with just a small amount of timelapse.&lt;/li&gt;
  &lt;li&gt;IDB stores data as intervals from real time, and from time to time, the pipeline will send a signal indicating either the start or the end of a new interval, and then all the data will be stored in IDB as batches.&lt;/li&gt;
  &lt;li&gt;HDB stores historical data. Once enough time has passed since the data was stored in IDB, it moves directly to be stored in HDB.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore, the streaming data will go through &lt;strong&gt;RDB → IDB → HDB&lt;/strong&gt;. As we are doing a real-time process, we will primarily work with RDB, as we will see briefly.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ℹ️ &lt;em&gt;If you want to know more about the different storage tiers, please check the &lt;a href=&quot;https://code.kx.com/insights/1.8/microservices/database/storage/tiers.html&quot;&gt;documentation&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To examine the data, let’s navigate to the “Query” section, where we will encounter something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/12/19/query_basic.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once here, we have three options for querying the data: using the API, employing SQL, or utilizing q. By using q, we can perform various transformations with simple commands, so let’s proceed with it. As we observed in the pipeline, we are storing the data in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; table and querying from its stream tier &lt;em&gt;rdb&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/12/19/query1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can even do a little analysis of the speed of the network data using the “Visual” window below, as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/12/19/query2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And also, using PyKX, we can check the different statistics of the table as easily as working with Pandas!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/12/19/query3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;enjoying-the-views&quot;&gt;Enjoying the views&lt;/h3&gt;

&lt;p&gt;Now that we have stored the data, what about analyzing it? This section allows us to create dashboards with the data we are ingesting through the pipeline and analyze it in several ways! The interface is pretty similar to the one our colleague Óscar explained in &lt;a href=&quot;https://www.habla.dev/blog/2023/10/03/Exploring-KX-Dashboards.html&quot;&gt;this post&lt;/a&gt;, so we are skipping most of the setup part. Nevertheless, there are two things that may have to be explained:&lt;/p&gt;

&lt;h5 id=&quot;stream-connectors&quot;&gt;Stream Connectors&lt;/h5&gt;

&lt;p&gt;As in the dashboards post, when you declare a view in KX Insights, you have to create a data source that will ingest data from a database. As mentioned before, Insights has three different default databases: RDB, IDB, and HDB. As we are analyzing real-time data, most of the time we will ingest from RDB, as seen below (image from heatmap datasource).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/12/19/views_sources.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Also, as in the query engine, you can just use the Insights API to query the data from any of those databases, as you can see in the following image:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/12/19/views_api.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;heatmap&quot;&gt;Heatmap&lt;/h5&gt;

&lt;p&gt;First, we have created a heatmap that updates in real-time. This innovative heatmap dynamically illustrates user density across, in this case, Chicago. This live update feature ensures that the data displayed is always current, providing an accurate and up-to-the-minute view of network performance. This information enables us to optimize network coverage and capacity where it’s most needed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/12/19/heatmap_gr.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;speed&quot;&gt;Speed&lt;/h5&gt;

&lt;p&gt;We have also created a dashboard where we plot both the upload and download speeds of different connections in real-time. This gives us information about how our network is working in general terms. In essence, this speed tracking dashboard is a key component in our toolkit, enabling us to continuously monitor and improve the overall health and performance of our network.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/12/19/volumes.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;tracker&quot;&gt;Tracker&lt;/h5&gt;

&lt;p&gt;We have created a dashboard that acts as a tracker, allowing us to follow the locations of the different connections that the user makes. It maps out the geographical journey of users by pinpointing where and when they establish network connections. This level of detailed tracking is invaluable for understanding user mobility and network usage patterns.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/12/19/tracker_zoomed.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Up until now, our data ingestion has revolved around high-density, real-time data utilizing the fundamental modules offered by KX Insights Enterprise. Moreover, we’ve successfully illuminated the insights derived from this data through the integration of Dashboards. Consequently, the inquiry arises: how can we further enhance this process?&lt;/p&gt;

&lt;h2 id=&quot;the-hardest-the-easiest&quot;&gt;The hardest; the easiest&lt;/h2&gt;

&lt;p&gt;We have ingested and queried our data, and everything is working quite well. Why don’t we make it a little trickier? In this section, we will briefly comment on a little upgrade to the pipeline built in the previous one, following the same structure (i.e., database → pipeline → query → dashboard). Shall we begin?&lt;/p&gt;

&lt;p&gt;Let’s create the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;errs&lt;/code&gt; table. This new table will be used for a subsequent grouping to study errors in the network (and assist users with the highest error rates). It will have three fields (we have already seen &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ts&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;imsi&lt;/code&gt;):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;count0&lt;/code&gt;: This counts the errors that have occurred in the network in the grouping (int type).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/12/19/schema_errs.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Presently, our focus shifts towards storing data in this context. The collection of information concerning users with the highest error rates holds significant utility for promptly addressing their concerns, resolving issues, and maintaining client satisfaction. This entails bifurcating our data stream into two distinct segments: the previously highlighted stream that populates the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; table, and the one under consideration here. To facilitate error storage, we intend to aggregate the data, aiming for the utmost precision in error-related information.&lt;/p&gt;

&lt;p&gt;To aggregate the data, we will use a new module:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Timer Window&lt;/em&gt;: This one will store the streaming data by a specified time (in this case, 1 minute).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once our &lt;em&gt;Timer Window&lt;/em&gt; has stored the last minute of data, we will aggregate it using a &lt;em&gt;Map&lt;/em&gt;. The map function will aggregate by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;imsi&lt;/code&gt;, counting the times that the speed of some user is lower than a given threshold.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0!select count0: count i by imsi, ts from data where uspeed &amp;lt; avg[uspeed] | dspeed &amp;lt; avg[dspeed] &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once done so, we will store our data in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;errs&lt;/code&gt; table. Using &lt;em&gt;Apply Schema&lt;/em&gt; again will work out.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/12/19/pipelineComplex.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see, repeated modules have the same name, with a numeric identification. To change it for clarity, we can &lt;strong&gt;Right Click&lt;/strong&gt; → &lt;strong&gt;Rename Node&lt;/strong&gt; and write down the desired name for each node. Then, we would have our pipeline finished, as something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/12/19/pipelineComplexFinal.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Having established our pipeline for loading the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;errs&lt;/code&gt; table with data, the subsequent step involves verification to ensure its functionality. To accomplish this, it is necessary to return to the query engine and modify our code statement accordingly, querying from the newly created table to assess its operational status.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/12/19/query_errs.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And &lt;em&gt;voilà&lt;/em&gt;, we have our high error rate users stored!&lt;/p&gt;

&lt;p&gt;To visualize the errors, we have created a treemap where we represent the users who have experienced the most errors in the last few minutes. By categorizing and visualizing the errors encountered by our users, this treemap enables us to quickly identify and address the most common and pressing issues. This dashboard does not use the RDB but the IDB in order to aggregate through more time, so we are always aware of the last-minute state of user experience, allowing for swift and proactive interventions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/12/19/errors.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;Throughout our exploration, it has become abundantly clear that KX Insights Enterprise stands out as an exceedingly convenient and proficient tool for crafting bespoke data analysis services. Its capabilities extend far beyond mere simplification – it substantially streamlines the complexities inherent in pipeline construction, data querying, and visualization. Remarkably, this tool empowers us to undertake such endeavors without the extensive technical expertise traditionally associated with similar projects. Consequently, we now find ourselves in possession of a thoroughly comprehensive and fully operational real-time data service.&lt;/p&gt;

&lt;p&gt;Should you wish to gain a more profound understanding of this tool, we strongly recommend following the latest KX Academy demonstrations pertaining to KX Insights. While certain aspects covered in this post may coincide with these demonstrations, leveraging all accessible resources will enhance your ability to construct more extensive data-oriented systems.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Build and backtest scalable trading strategies using real-time and historical tick data&lt;/em&gt;: &lt;a href=&quot;https://code.kx.com/insights/1.8/enterprise/recipes/finance.html&quot;&gt;KX Academy - Finance&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Manufacturing Tutorial: Apply deep neural networks to streaming IoT data using MQTT and Tensorflow&lt;/em&gt;: &lt;a href=&quot;https://code.kx.com/insights/1.8/enterprise/recipes/manufacturing.html&quot;&gt;KX Academy - Manufacturing&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Integrate Kafka and kdb+ for real-time telemetry&lt;/em&gt;: &lt;a href=&quot;https://code.kx.com/insights/1.8/enterprise/recipes/kafkaread.html&quot;&gt;KX Academy - Kafka Integration&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Drag and Drop Application Design with kdb Insights Enterprise, Eoin Killeen&lt;/em&gt;: &lt;a href=&quot;https://kx.com/videos/drag-and-drop-application-design-with-kdb-insights-enterprise-at-community-meetup-belfast/&quot;&gt;KX Community Meetup - Belfast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Should you desire to delve further into the technical aspects, you have the option to construct your own data ingestion process utilizing KX Insights, bypassing reliance on the web interface. The guidance provided in this post will assist you in navigating this undertaking:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Getting Started with kdb Insights&lt;/em&gt;: &lt;a href=&quot;https://www.treliant.com/knowledge-center/getting-started-with-kdb-insights/&quot;&gt;Treliant - Getting Started&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, for a comprehensive collection of schemas, code snippets, and additional resources referenced in this post, please visit our GitHub repository.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GitHub Repository: &lt;a href=&quot;https://github.com/hablapps/insights-demo&quot;&gt;Habla Computing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Explore the full set of materials to delve deeper into the technical details and implementations discussed in this content. Please let us know if you encounter any difficulties, and have fun with KX Insights!&lt;/p&gt;

&lt;h2 id=&quot;acknowledgements&quot;&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;We extend our most heartfelt thanks to Alfonso Campo for creating the simulated data, and to Stephen Meany for his unwavering technical support.&lt;/p&gt;</content><author><name>Cristian Pérez Corral, Christian Aberturas López</name></author><summary type="html">KX Insights: Simplifying Data Analytics</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/butterfly-ship.jpg" /><media:content medium="image" url="http://localhost:4000/img/butterfly-ship.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Exploring KX Dashboards</title><link href="http://localhost:4000/2023/10/03/Exploring-KX-Dashboards.html" rel="alternate" type="text/html" title="Exploring KX Dashboards" /><published>2023-10-03T00:00:00+02:00</published><updated>2023-10-03T00:00:00+02:00</updated><id>http://localhost:4000/2023/10/03/Exploring-KX-Dashboards</id><content type="html" xml:base="http://localhost:4000/2023/10/03/Exploring-KX-Dashboards.html">&lt;h1 id=&quot;exploring-kx-dashboards&quot;&gt;Exploring KX Dashboards&lt;/h1&gt;

&lt;h2 id=&quot;steps-to-reproduce&quot;&gt;Steps to reproduce&lt;/h2&gt;

&lt;p&gt;In order to replicate the dashboard described on this post follow the &lt;a href=&quot;https://github.com/hablapps/kx-dashboards-post/blob/master/README.md&quot;&gt;README file&lt;/a&gt;’s indications. We provide the dashboard itself as a JSON and the dataset, but a Google Maps API key and KX Dashboards itself are also needed.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;chapter-1-getting-the-gist-of-it&quot;&gt;Chapter 1: Getting the gist of it&lt;/h2&gt;

&lt;p&gt;Thanks to the successful deployment of the kdb infrastructure discussed in &lt;a href=&quot;https://www.habla.dev/blog/2023/07/31/all-roads-lead-to-pykx.html&quot;&gt;our first post on PyKX&lt;/a&gt;, Emma Monad, the CTO of Mad Flow, has decided to spend some time exploring the KX technology ecosystem more thoroughly. One of the tools that caught her attention the most was KX Dashboards. “This seems to be exactly what we need to replace those couple of processes written in Python that create some static graphics and automatically send them via email to our customers,” she thought. Indeed, KX Dashboards would allow Emma to build dynamic reports based on the analytic data obtained from her processes and present them to her customers in a clean and interactive way, enabling them to gain more detailed insights into their data and information.&lt;/p&gt;

&lt;p&gt;Emma has tasked our current protagonist, Félix Atomic, to build a dashboard to visualise Madrid’s historic traffic using this new platform.  He has some background using other dashboard platforms, but he has mainly focused on developing software up until now, so this will mostly be a new experience to him.&lt;/p&gt;

&lt;p&gt;“Let’s dive in, then.” he thought, “This may be interesting!”&lt;/p&gt;

&lt;p&gt;He started from the beginning: opening the URL his boss sent him. He was greeted by some examples prebuilt into the platform and decided to check them out, just to see what was possible. They were well built and varied in nature, but Félix focused on the ones that had maps, naturally. Since it was his first experience, he clicked around and eventually found the “Design” mode, where he could add new components and edit their properties. “Okay, I think I know where to begin…” he thought.&lt;/p&gt;

&lt;p&gt;Messing around, he had also found the “New” and “Save” buttons on the top left, so he figured that in order to create a new dashboard that was the way to go, and he was right! After giving his dashboard a name, an empty grid appeared on screen with some icons on the left:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/10/03/01-empty-dashboard.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Instinctively, he dragged the first icon on the left to the grid and a box appeared that said “Click to &lt;strong&gt;populate Data Source&lt;/strong&gt;“… “Yeah, that’s what I want!” he thought, then clicked. A new window popped in front of him with lots of empty space and a few buttons highlighted:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/10/03/02-empty-data-sources.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;“All right, not that many options available…” he decided to click on “New”, trusting his intuition. This window updated itself, now with a few more options available. He knew from his boss that there was a connector already created to let him get the data from their historic database. Félix looked around and found the connector list “Ah, there it is, ‘hdb’” he thought.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/10/03/03-connectors.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After selecting the connector he stopped on his tracks for a few minutes since he didn’t really know what to do next. He knew the name of the table he was looking for. After all, he helped with the migration, but he didn’t know how to access it from this screen.&lt;/p&gt;

&lt;p&gt;He decided to check on the documentation in hopes of figuring out the next step and sure enough, not long after, he found &lt;a href=&quot;https://code.kx.com/dashboards/datasources/&quot;&gt;the data sources documentation&lt;/a&gt;, where he found out exactly what were those connections he saw before (merely a connection handle like the ones you use after executing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hopen&lt;/code&gt;) and then he learned that after selecting the connection he could just input some q code into the text box and get the results expected. “I got this” he thought, and simply wrote the name of the table he was after. After giving his data source a name and applying the changes he was happy to find out that his efforts paid off: he could see the data on screen!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/10/03/04-filled-data-grid.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;chapter-2-mental-mapping&quot;&gt;Chapter 2: Mental mapping&lt;/h2&gt;

&lt;p&gt;“This documentation is excellent!” Félix thought. It contained the answer to pretty much every question he had regarding this new platform he was using. He decided to check the documentation for the Map component, as it was the most likely candidate for this project he was assigned. After some thinking, he decided to build a heatmap of Madrid’s traffic, since it aligned the data pretty nicely. He had the coordinates to the different measure points around the city and several values to show on the map, so it was a perfect fit!&lt;/p&gt;

&lt;p&gt;And so he removed the data grid component he had previously worked so hard to make work and, with this new knowledge he had acquired, he dragged the Map component on the dashboard grid and started his journey.&lt;/p&gt;

&lt;p&gt;After setting the Google Maps JavaScript API Key, he could actually see a map on screen! Sure, it wasn’t Madrid, but he could move around and manually place himself where he needed to be and play around with the Map Type property to change how the map was displayed. “That was easy!” he thought.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/10/03/05-hello-map.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well, that felt easy for Félix. He had a feeling this was not going to last forever since he now had to populate the map with actual data.&lt;/p&gt;

&lt;p&gt;He decided that, in order to test the waters, he should begin by using the data source he built for the table he previously had, so that became his starting point. He simply set that same data source as the one for the heatmap, set the longitude and latitude columns as the ones on the table and, lastly the “carga” column as the weight, since it contained the traffic density data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/10/03/06-first-heatmap.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;“Nice!” he thought, “Easier than expected”. However, as easy as it might have felt, the heatmap data was not the result he ultimately wanted. First off, he saw that the data source had a limit of 2000 rows retrieved by default and secondly, as cool as this may appear, he wanted to be able to see how the traffic evolved over time.&lt;/p&gt;

&lt;p&gt;So Félix rushed to the documentation to see how he could fix those two issues. The first one was easy enough: he could change it right from the data source configuration screen, but the second one was a bit trickier to implement. After searching the documentation for a long while, he found this “Playback” component that would theoretically solve his issue by allowing him to set the value of a View State (whatever that was) and automatically update the Map component, linking both of them together.&lt;/p&gt;

&lt;p&gt;That View State concept was the one key piece he was missing. After reading the documentation about it and learning that they were basically some sort of “global variable” that store information, he automatically started thinking of ways to introduce this feature into his dashboard. The main one was of course storing a datetime value to later (somehow) filter his data source but, as he later discovered, View States would become quite useful to him on many ways.&lt;/p&gt;

&lt;p&gt;And so he placed his Playback component on the dashboard grid and started tinkering. He would need a couple of things: naturally a data source and a View State to store the specific value which he would use to filter later on. The first one was easy enough: he knew he could just use his qSQL knowledge to query the data and shape it however he wanted to. After removing the row limit and writing his query he was good to go.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/10/03/07-dt-datasource.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now he had to create a View State to store the selected datetime, and to do that he clicked on the “Selected Value” property of the Playback component and a new window popped up. Just as when he first started his journey, he trusted his instincts and clicked the “New” button on the top left. Félix was able to give his View State a name, a type and a value. After giving it the datetime type and naming it, he clicked “Select” and that was it! He had just created his first View State!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/10/03/08-dt-viewstate.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now he just had to figure out how to filter his data source based on this parameter. This proved to be a hard task since the documentation only mentioned that you can write q code in the text box, but eventually after looking around online he found out that you can write a function on that text box and the arguments could be mapped to View States. Félix rushed to try it out and fair enough, he wasn’t lied to!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/10/03/09-filtered-data-source.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After that, he saw the data update on screen. He hit the “play” button on the Playback component and…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/10/03/10-demo-map.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Great! Exactly what he wanted. Now it was time to present this dashboard to Emma and see what she had to say about it.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;chapter-3-pedal-to-the-metal&quot;&gt;Chapter 3: Pedal to the metal&lt;/h2&gt;

&lt;p&gt;After meeting with Emma, Félix had some remaining tasks to complete. Emma praised the dashboard, mentioning that it looked fantastic, but she also had a few suggestions. Primarily, she wanted the user to have the ability to switch the information displayed on the heatmap. Additionally, she requested that the current datetime be shown as text on the heatmap. Lastly, she wanted a line graph to be plotted, comparing the average traffic data of the displayed day to the average weather measurement shown on the heatmap.&lt;/p&gt;

&lt;p&gt;Félix started from what looked to be the easiest one of the tasks: showing the currently displayed datetime on screen. He dug into the documentation and found out there is a Text component that allows for custom text to be shown, so he dragged it on the grid to test it out and sure enough, the text he entered on the pop up that appeared after clicking “Formatted Text” was shown on the component, but he needed to show a value he had stored on a View State. After a short while, he found the “Template Text” pop up window, which conveniently showed the View States and after clicking on one of them, it placed itself on the text box, but it wasn’t actually showing on the component. It was empty! It took Félix a while to find this out, but for any template text to be shown, there &lt;strong&gt;must&lt;/strong&gt; be a data source linked, even if it’s not used at all. In the end, the text he inputted to the template editor was &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DateTime: &lt;/code&gt; and he saw exactly what he expected:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/10/03/11-dt-template-text.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Onto the second task: giving the user the ability to choose the information displayed on the heatmap.&lt;/p&gt;

&lt;p&gt;Excited by the prospect of a quick win, he created a new data source with all the values the user should be able to choose from:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/10/03/12-dropdown-measure-datasource.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then a view state to store the value:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/10/03/13-measure-viewstate.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And finally set those two things properly on the component’s configuration. And there was that, now he had a dropdown menu that allowed him to choose what he wanted to see on the map!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/10/03/14-dropdown-measure.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now he needed to apply this choice to the data shown on the heatmap. Since he already retrieved the entire table for a specific datetime, all he really needed to do was to change the “Weight” parameter of the heatmap to point to the “Measure” View State he just created&lt;/p&gt;

&lt;p&gt;. With that out of the way, he was able to finish off this task, and the result looked great!&lt;/p&gt;

&lt;p&gt;The last task looked a bit daunting at first. But since his experience had been pretty nice overall he trusted the platform and got straight into it. As has been usual lately, Félix went straight to the documentation to look for some component that may help him.&lt;/p&gt;

&lt;p&gt;After looking around for a bit, he found the Canvas Chart component, which allowed him to plot all sorts of layered graphics. “Perfect!” he thought, “I just need to build a query that gets me the data the way I need it”. Since he would need to get the average of both the “carga” column and  the chosen “Measure”  by time for a chosen day , he decided to dust off his functional qSQL skills and build a query that would do just that. He spent a short while remembering how it worked, but eventually he got it done.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/10/03/16-avg-weather-datasource.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;His X axis would be the time column and there would be two layers: one for each of the other columns. Félix was able to quickly plot the “carga” column, since the default values provided on the component proved to be enough for now.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/10/03/17-carga-plot.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For the second layer, it was just as easy: select the same data source, the selected measure, this time as a View State and sure enough, he got it working first try!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/10/03/18-both-plots.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Since he had some spare time because of how simple those three tasks turned out to be, Félix decided to mess around with the options available to him in order to make the dashboard that little bit more appealing. In the end, the dashboard looked like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2023/10/03/19-final-result.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It was exactly what he wanted: visually intuitive, yet feature-complete.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;KX Dashboards is an exceptionally well-designed platform that offers users, regardless of their technical expertise, a powerful tool to leverage their data effectively. Its primary strengths lie in its intuitive interface, although it might appear slightly overwhelming at first glance, and its comprehensive online documentation, which is consistently reliable.&lt;/p&gt;

&lt;p&gt;Everything was where we expected it to be, and it seemed to follow the KISS principle quite nicely: you have a grid, components to fit in, a wide variety of configuration options for each one of them, and ways of connecting them together.&lt;/p&gt;

&lt;p&gt;To make the most of KX Dashboards, it was crucial to understand the fundamental concepts of data sources and View States:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Data sources are incredibly flexible because you can use q and qSQL queries to shape the source data however you want, essentially allowing you to preprocess it before plotting or displaying it on the screen.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;View States are a must if you want to connect components together, and once you grasp the concept, you’ll find yourself using them everywhere. However, it’s essential to be mindful as things can quickly get out of hand. Keeping them tidy and organized is crucial before it becomes too late.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once those two key concepts were fully understood, the experience of using the platform became much more intuitive.&lt;/p&gt;

&lt;p&gt;We also found &lt;a href=&quot;https://kx.com/search/?search_value=dashboards&quot;&gt;KX’s blog posts on Dashboards&lt;/a&gt; to be incredibly useful, especially the ones describing the whole process of building a dashboard from scratch. In particular, &lt;a href=&quot;https://kx.com/blog/visualizing-cycles-using-kx-dashboards/&quot;&gt;Visualizing Cycles Using KX Dashboards&lt;/a&gt; allowed us to understand the playback component in depth and enabled us to take our dashboard to the next level.&lt;/p&gt;

&lt;p&gt;For future projects, we see a couple of routes that seem particularly interesting: custom components and real-time data. Specifically, we wish for the ability to “link” multiple components together, assigning them all a single shared View State and being able to add more layers to our traffic heatmap. These could most likely be achieved by creating custom components. Regarding real-time data and streaming data sources, we see a perfect match to visualize and gain insights into them using KX Dashboards facilities. Stay tuned for more updates and exciting developments ahead!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Post Picture: Ceil et Levres, Salvador Dalí&lt;/em&gt;&lt;/p&gt;</content><author><name>Oscar Nydza Nicpoñ</name></author><summary type="html">Exploring KX Dashboards Steps to reproduce In order to replicate the dashboard described on this post follow the README file’s indications. We provide the dashboard itself as a JSON and the dataset, but a Google Maps API key and KX Dashboards itself are also needed. Chapter 1: Getting the gist of it Thanks to the successful deployment of the kdb infrastructure discussed in our first post on PyKX, Emma Monad, the CTO of Mad Flow, has decided to spend some time exploring the KX technology ecosystem more thoroughly. One of the tools that caught her attention the most was KX Dashboards. “This seems to be exactly what we need to replace those couple of processes written in Python that create some static graphics and automatically send them via email to our customers,” she thought. Indeed, KX Dashboards would allow Emma to build dynamic reports based on the analytic data obtained from her processes and present them to her customers in a clean and interactive way, enabling them to gain more detailed insights into their data and information. Emma has tasked our current protagonist, Félix Atomic, to build a dashboard to visualise Madrid’s historic traffic using this new platform. He has some background using other dashboard platforms, but he has mainly focused on developing software up until now, so this will mostly be a new experience to him. “Let’s dive in, then.” he thought, “This may be interesting!” He started from the beginning: opening the URL his boss sent him. He was greeted by some examples prebuilt into the platform and decided to check them out, just to see what was possible. They were well built and varied in nature, but Félix focused on the ones that had maps, naturally. Since it was his first experience, he clicked around and eventually found the “Design” mode, where he could add new components and edit their properties. “Okay, I think I know where to begin…” he thought. Messing around, he had also found the “New” and “Save” buttons on the top left, so he figured that in order to create a new dashboard that was the way to go, and he was right! After giving his dashboard a name, an empty grid appeared on screen with some icons on the left: Instinctively, he dragged the first icon on the left to the grid and a box appeared that said “Click to populate Data Source“… “Yeah, that’s what I want!” he thought, then clicked. A new window popped in front of him with lots of empty space and a few buttons highlighted: “All right, not that many options available…” he decided to click on “New”, trusting his intuition. This window updated itself, now with a few more options available. He knew from his boss that there was a connector already created to let him get the data from their historic database. Félix looked around and found the connector list “Ah, there it is, ‘hdb’” he thought. After selecting the connector he stopped on his tracks for a few minutes since he didn’t really know what to do next. He knew the name of the table he was looking for. After all, he helped with the migration, but he didn’t know how to access it from this screen. He decided to check on the documentation in hopes of figuring out the next step and sure enough, not long after, he found the data sources documentation, where he found out exactly what were those connections he saw before (merely a connection handle like the ones you use after executing hopen) and then he learned that after selecting the connection he could just input some q code into the text box and get the results expected. “I got this” he thought, and simply wrote the name of the table he was after. After giving his data source a name and applying the changes he was happy to find out that his efforts paid off: he could see the data on screen! Chapter 2: Mental mapping “This documentation is excellent!” Félix thought. It contained the answer to pretty much every question he had regarding this new platform he was using. He decided to check the documentation for the Map component, as it was the most likely candidate for this project he was assigned. After some thinking, he decided to build a heatmap of Madrid’s traffic, since it aligned the data pretty nicely. He had the coordinates to the different measure points around the city and several values to show on the map, so it was a perfect fit! And so he removed the data grid component he had previously worked so hard to make work and, with this new knowledge he had acquired, he dragged the Map component on the dashboard grid and started his journey. After setting the Google Maps JavaScript API Key, he could actually see a map on screen! Sure, it wasn’t Madrid, but he could move around and manually place himself where he needed to be and play around with the Map Type property to change how the map was displayed. “That was easy!” he thought. Well, that felt easy for Félix. He had a feeling this was not going to last forever since he now had to populate the map with actual data. He decided that, in order to test the waters, he should begin by using the data source he built for the table he previously had, so that became his starting point. He simply set that same data source as the one for the heatmap, set the longitude and latitude columns as the ones on the table and, lastly the “carga” column as the weight, since it contained the traffic density data. “Nice!” he thought, “Easier than expected”. However, as easy as it might have felt, the heatmap data was not the result he ultimately wanted. First off, he saw that the data source had a limit of 2000 rows retrieved by default and secondly, as cool as this may appear, he wanted to be able to see how the traffic evolved over time. So Félix rushed to the documentation to see how he could fix those two issues. The first one was easy enough: he could change it right from the data source configuration screen, but the second one was a bit trickier to implement. After searching the documentation for a long while, he found this “Playback” component that would theoretically solve his issue by allowing him to set the value of a View State (whatever that was) and automatically update the Map component, linking both of them together. That View State concept was the one key piece he was missing. After reading the documentation about it and learning that they were basically some sort of “global variable” that store information, he automatically started thinking of ways to introduce this feature into his dashboard. The main one was of course storing a datetime value to later (somehow) filter his data source but, as he later discovered, View States would become quite useful to him on many ways. And so he placed his Playback component on the dashboard grid and started tinkering. He would need a couple of things: naturally a data source and a View State to store the specific value which he would use to filter later on. The first one was easy enough: he knew he could just use his qSQL knowledge to query the data and shape it however he wanted to. After removing the row limit and writing his query he was good to go. Now he had to create a View State to store the selected datetime, and to do that he clicked on the “Selected Value” property of the Playback component and a new window popped up. Just as when he first started his journey, he trusted his instincts and clicked the “New” button on the top left. Félix was able to give his View State a name, a type and a value. After giving it the datetime type and naming it, he clicked “Select” and that was it! He had just created his first View State! Now he just had to figure out how to filter his data source based on this parameter. This proved to be a hard task since the documentation only mentioned that you can write q code in the text box, but eventually after looking around online he found out that you can write a function on that text box and the arguments could be mapped to View States. Félix rushed to try it out and fair enough, he wasn’t lied to! After that, he saw the data update on screen. He hit the “play” button on the Playback component and… Great! Exactly what he wanted. Now it was time to present this dashboard to Emma and see what she had to say about it. Chapter 3: Pedal to the metal After meeting with Emma, Félix had some remaining tasks to complete. Emma praised the dashboard, mentioning that it looked fantastic, but she also had a few suggestions. Primarily, she wanted the user to have the ability to switch the information displayed on the heatmap. Additionally, she requested that the current datetime be shown as text on the heatmap. Lastly, she wanted a line graph to be plotted, comparing the average traffic data of the displayed day to the average weather measurement shown on the heatmap. Félix started from what looked to be the easiest one of the tasks: showing the currently displayed datetime on screen. He dug into the documentation and found out there is a Text component that allows for custom text to be shown, so he dragged it on the grid to test it out and sure enough, the text he entered on the pop up that appeared after clicking “Formatted Text” was shown on the component, but he needed to show a value he had stored on a View State. After a short while, he found the “Template Text” pop up window, which conveniently showed the View States and after clicking on one of them, it placed itself on the text box, but it wasn’t actually showing on the component. It was empty! It took Félix a while to find this out, but for any template text to be shown, there must be a data source linked, even if it’s not used at all. In the end, the text he inputted to the template editor was DateTime: and he saw exactly what he expected: Onto the second task: giving the user the ability to choose the information displayed on the heatmap. Excited by the prospect of a quick win, he created a new data source with all the values the user should be able to choose from: Then a view state to store the value: And finally set those two things properly on the component’s configuration. And there was that, now he had a dropdown menu that allowed him to choose what he wanted to see on the map! Now he needed to apply this choice to the data shown on the heatmap. Since he already retrieved the entire table for a specific datetime, all he really needed to do was to change the “Weight” parameter of the heatmap to point to the “Measure” View State he just created . With that out of the way, he was able to finish off this task, and the result looked great! The last task looked a bit daunting at first. But since his experience had been pretty nice overall he trusted the platform and got straight into it. As has been usual lately, Félix went straight to the documentation to look for some component that may help him. After looking around for a bit, he found the Canvas Chart component, which allowed him to plot all sorts of layered graphics. “Perfect!” he thought, “I just need to build a query that gets me the data the way I need it”. Since he would need to get the average of both the “carga” column and the chosen “Measure” by time for a chosen day , he decided to dust off his functional qSQL skills and build a query that would do just that. He spent a short while remembering how it worked, but eventually he got it done. His X axis would be the time column and there would be two layers: one for each of the other columns. Félix was able to quickly plot the “carga” column, since the default values provided on the component proved to be enough for now. For the second layer, it was just as easy: select the same data source, the selected measure, this time as a View State and sure enough, he got it working first try! Since he had some spare time because of how simple those three tasks turned out to be, Félix decided to mess around with the options available to him in order to make the dashboard that little bit more appealing. In the end, the dashboard looked like this: It was exactly what he wanted: visually intuitive, yet feature-complete. Conclusion KX Dashboards is an exceptionally well-designed platform that offers users, regardless of their technical expertise, a powerful tool to leverage their data effectively. Its primary strengths lie in its intuitive interface, although it might appear slightly overwhelming at first glance, and its comprehensive online documentation, which is consistently reliable. Everything was where we expected it to be, and it seemed to follow the KISS principle quite nicely: you have a grid, components to fit in, a wide variety of configuration options for each one of them, and ways of connecting them together. To make the most of KX Dashboards, it was crucial to understand the fundamental concepts of data sources and View States: Data sources are incredibly flexible because you can use q and qSQL queries to shape the source data however you want, essentially allowing you to preprocess it before plotting or displaying it on the screen. View States are a must if you want to connect components together, and once you grasp the concept, you’ll find yourself using them everywhere. However, it’s essential to be mindful as things can quickly get out of hand. Keeping them tidy and organized is crucial before it becomes too late. Once those two key concepts were fully understood, the experience of using the platform became much more intuitive. We also found KX’s blog posts on Dashboards to be incredibly useful, especially the ones describing the whole process of building a dashboard from scratch. In particular, Visualizing Cycles Using KX Dashboards allowed us to understand the playback component in depth and enabled us to take our dashboard to the next level. For future projects, we see a couple of routes that seem particularly interesting: custom components and real-time data. Specifically, we wish for the ability to “link” multiple components together, assigning them all a single shared View State and being able to add more layers to our traffic heatmap. These could most likely be achieved by creating custom components. Regarding real-time data and streaming data sources, we see a perfect match to visualize and gain insights into them using KX Dashboards facilities. Stay tuned for more updates and exciting developments ahead! Post Picture: Ceil et Levres, Salvador Dalí</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/ceil-et-levres.jpg" /><media:content medium="image" url="http://localhost:4000/img/ceil-et-levres.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">All Roads Lead To Kdb: Technical Counterpart</title><link href="http://localhost:4000/2023/09/15/all-roads-lead-to-kdb-the-technical-counterpart" rel="alternate" type="text/html" title="All Roads Lead To Kdb: Technical Counterpart" /><published>2023-09-15T10:00:00+02:00</published><updated>2023-09-15T10:00:00+02:00</updated><id>http://localhost:4000/2023/09/15/All-Roads-Lead-To-Kdb:-Technical-Counterpart</id><content type="html" xml:base="http://localhost:4000/2023/09/15/all-roads-lead-to-kdb-the-technical-counterpart">&lt;!DOCTYPE html&gt;
&lt;html&gt;

&lt;head&gt;
  &lt;style&gt;
    code {
      font-family: monospace, monospace;
      font-size: 1em;
    }

    code {
      font-family: Menlo, Monaco, Consolas, &quot;Courier New&quot;, monospace;
    }

    table {
      display: block;
      overflow-x: auto;
      overflow-y: hidden;
      white-space: nowrap;
      -ms-overflow-style: none;
      /* IE and Edge */
      scrollbar-width: none;
      /* Firefox */
    }

    table::-webkit-scrollbar {
      display: none;
    }


    code {
      padding: 2px 4px;
      font-size: 90%;
      color: #c7254e;
      background-color: #f9f2f4;
      border-radius: 4px;
      white-space: pre-wrap;
      margin-bottom: 20px;
    }

    pre code {
      padding: 0;
      margin-bottom: 20px;
      font-size: inherit;
      color: inherit;
      background-color: transparent;
      white-space: pre-wrap;
      border-radius: 0;
    }

    code span.al {
      color: #ff0000;
      font-weight: bold;
    }

    /* Alert */
    code span.an {
      color: #60a0b0;
      font-weight: bold;
      font-style: italic;
    }

    /* Annotation */
    code span.at {
      color: #7d9029;
    }

    /* Attribute */
    code span.bn {
      color: #40a070;
    }

    /* BaseN */
    code span.bu {
      color: #008000;
    }

    /* BuiltIn */
    code span.cf {
      color: #007020;
      font-weight: bold;
    }

    /* ControlFlow */
    code span.ch {
      color: #4070a0;
    }

    /* Char */
    code span.cn {
      color: #880000;
    }

    /* Constant */
    code span.co {
      color: #60a0b0;
      font-style: italic;
    }

    /* Comment */
    code span.cv {
      color: #60a0b0;
      font-weight: bold;
      font-style: italic;
    }

    /* CommentVar */
    code span.do {
      color: #ba2121;
      font-style: italic;
    }

    /* Documentation */
    code span.dt {
      color: #902000;
    }

    /* DataType */
    code span.dv {
      color: #40a070;
    }

    /* DecVal */
    code span.er {
      color: #ff0000;
      font-weight: bold;
    }

    /* Error */
    code span.ex {}

    /* Extension */
    code span.fl {
      color: #40a070;
    }

    /* Float */
    code span.fu {
      color: #06287e;
    }

    /* Function */
    code span.im {
      color: #008000;
      font-weight: bold;
    }

    /* Import */
    code span.in {
      color: #60a0b0;
      font-weight: bold;
      font-style: italic;
    }

    /* Information */
    code span.kw {
      color: #007020;
      font-weight: bold;
    }

    /* Keyword */
    code span.op {
      color: #666666;
    }

    /* Operator */
    code span.ot {
      color: #007020;
    }

    /* Other */
    code span.pp {
      color: #bc7a00;
    }

    /* Preprocessor */
    code span.sc {
      color: #4070a0;
    }

    /* SpecialChar */
    code span.ss {
      color: #bb6688;
    }

    /* SpecialString */
    code span.st {
      color: #4070a0;
    }

    /* String */
    code span.va {
      color: #19177c;
    }

    /* Variable */
    code span.vs {
      color: #4070a0;
    }

    /* VerbatimString */
    code span.wa {
      color: #60a0b0;
      font-weight: bold;
      font-style: italic;
    }

    .alert {
      color: #31708f;
      background-color: #d9edf7;
      border-color: #bce8f1;
      padding: 15px;
      margin-bottom: 20px;
      border: 1px solid transparent;
      border-radius: 4px;
    }

    div.margin {
      margin-bottom: 10px;
      margin-top: 10px;
    }

    table {
      overflow: scroll;
    }

    /* Warning */
  &lt;/style&gt;
  &lt;!-- Latest compiled and minified Bootstrap CSS --&gt;
  &lt;!--&lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.0/css/bootstrap.min.css&quot; /&gt;--&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;div id=&quot;e251a98a&quot; class=&quot;margin&quot;&gt;
    &lt;h1 id=&quot;all-roads-lead-to-kdb-the-technical-counterpart&quot;&gt;All Roads Lead
      to Kdb: the technical counterpart&lt;/h1&gt;
    &lt;p&gt;This post serves as a follow-up to our prior article, &lt;a
        href=&quot;https://www.habla.dev/blog/2023/07/31/all-roads-lead-to-pykx.html&quot;&gt;All
        Roads Lead to PyKX&lt;/a&gt;, where we introduced the utility of the PyKX
      library from the perspective of Emma Monad, the CTO of a large fictional
      company known as Mad Flow. In addition to this high-level perspective,
      the focus of this post is on Python programmers who are eager to
      explore the technical intricacies that were left unexplained in the
      aforementioned article. Consequently, the post will provide them with a
      highly detailed, step-by-step example of how to migrate an existing
      Python codebase into PyKX. Similarly to the outcomes presented in the
      post &lt;a href=&quot;https://kx.com/blog/accelerating-python-workflows-using-pykx/&quot;&gt;Accelerating
        Python Workflows using PyKX&lt;/a&gt;, which we highly recommend reading, we
      will observe a significant performance advantage of the resulting PyKX
      code compared to the initial pandas implementation. More references are
      available in the bibliography at the end of the post.&lt;/p&gt;
    &lt;p&gt;The structure of the post will be as follows:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#t2&quot;&gt;&lt;strong&gt;The Use Case&lt;/strong&gt;&lt;/a&gt;: We will begin by
        explaining the traffic improvement use case itself, encompassing its
        objectives, data sources, and anticipated outcomes. This section will
        also include references to the necessary data sources required to
        execute all the code provided in this blog post.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#t3&quot;&gt;&lt;strong&gt;PyKX migration&lt;/strong&gt;&lt;/a&gt;: Subsequently, we
        will illustrate the process of delegating resource-intensive tasks to
        kdb+/q using PyKX, all while staying within the Python environment. This
        kind of PyKX-boosted Pythonic version is probably the fastest way to
        begin harnessing the capabilities of the kdb+/q environment.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#t4&quot;&gt;&lt;strong&gt;pykx.q migration&lt;/strong&gt;&lt;/a&gt;: Lastly, we will
        delve into the process of transitioning the code to pure kdb+/q, while
        continuing to utilize PyKX to retain the Pythonic code you wish to
        preserve. This kdb+/q version enhanced by PyKX is presented for those
        interested in a more extensive adoption of kdb+/q.&lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;The initial section regarding the use case is independent of
      programming languages and is primarily included for reference purposes.
      If you're eager to delve directly into the code and begin learning how
      to migrate pure pandas-based Python code into PyKX, you can proceed to
      the &lt;a href=&quot;#t3&quot;&gt;second section&lt;/a&gt; now and revisit the &lt;a href=&quot;#t2&quot;&gt;first section&lt;/a&gt; as necessary.&lt;/p&gt;
    &lt;h2 id=&quot;use-case&quot;&gt;Use Case&lt;a class=&quot;anchor&quot; id=&quot;t2&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
    &lt;p&gt;With the aim of predicting traffic congestion in the presence of
      rain, Mad Flow dedicated significant effort to preparing and integrating
      weather and traffic data into an LSTM model. This endeavor aligned with
      other &lt;a href=&quot;https://www.mdpi.com/1424-8220/20/13/3749&quot;&gt;studies&lt;/a&gt;
      that sought to forecast traffic patterns using LSTM models based on air
      pollution. Just like findings from studies in cities such as &lt;a
        href=&quot;https://pure.manchester.ac.uk/ws/portalfiles/portal/72721911/DEXA_Camera_8_pages.pdf&quot;&gt;Manchester&lt;/a&gt;,
      &lt;a href=&quot;https://ieeexplore.ieee.org/document/8964560&quot;&gt;Shenzhen&lt;/a&gt; and
      &lt;a
        href=&quot;https://www.safetylit.org/citations/index.php?fuseaction=citations.viewdetails&amp;amp;citationIds%5B%5D=citjournalarticle_716898_14&quot;&gt;Belgrade&lt;/a&gt;,
      our results project a weekday traffic volume increase of 5-15% during
      peak hours in the presence of rain.
    &lt;/p&gt;
    &lt;p&gt;Like in most projects related to smart cities, the used data is
      notable diverse, so it needed a lot of preparatory work. The following
      sections will detail the data sources, the cleansing and interpretation
      processes, as well as the used model.&lt;/p&gt;
    &lt;h3 id=&quot;data-sources-&quot;&gt;Data sources &lt;a class=&quot;anchor&quot; id=&quot;t21&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
    &lt;p&gt;The &lt;a href=&quot;https://datos.madrid.es/portal/site/egob&quot;&gt;Madrid City
        Council&lt;/a&gt; provides weather and traffic data, including both real-time
      and historical records. For the purpose of model training, only the
      historical data is pertinent. These datasets, formatted as CSV files,
      are categorized by months spanning from the year 2018 to the
      present.&lt;/p&gt;
    &lt;div class=&quot;alert&quot;&gt;
      &lt;b&gt; 🔍 You can access the different datasets required to run this notebook from the following links:
        &lt;ul&gt;
          &lt;li&gt; &lt;a href=&quot;https://datos.madrid.es/egob/catalogo/300352-141-meteorologicos-horarios.csv&quot;&gt;Weather data&lt;/a&gt;
          &lt;li&gt; &lt;a href=&quot;https://datos.madrid.es/egob/catalogo/300360-1-meteorologicos-estaciones.csv&quot;&gt;Weather
              stations&lt;/a&gt;
          &lt;li&gt; &lt;a href=&quot;https://datos.madrid.es/egob/catalogo/208627-115-transporte-ptomedida-historico.zip&quot;&gt;Traffic
              data&lt;/a&gt;
          &lt;li&gt; &lt;a href=&quot;https://datos.madrid.es/egob/catalogo/202468-170-intensidad-trafico.csv&quot;&gt;Traffic stations&lt;/a&gt;
        &lt;/ul&gt;
      &lt;/b&gt;
    &lt;/div&gt;
    &lt;p&gt;&lt;strong&gt;Traffic data&lt;/strong&gt;&lt;/p&gt;
    &lt;p&gt;The traffic sensors are strategically positioned at traffic lights
      throughout the city of Madrid. The collected data gather together
      diverse measurements of road conditions, including speed and traffic
      volume. All of these metrics are encapsulated in the &lt;code&gt;load&lt;/code&gt;
      metric, quantified in percentage terms to denote levels of congestion.
      The format of the &lt;a
        href=&quot;https://datos.madrid.es/egob/catalogo/208627-115-transporte-ptomedida-historico.zip&quot;&gt;traffic
        table&lt;/a&gt; is presented as follows:&lt;/p&gt;
    &lt;table style=&quot;width:100%;&quot;&gt;
      &lt;colgroup&gt;
        &lt;col style=&quot;width: 3%&quot; /&gt;
        &lt;col style=&quot;width: 14%&quot; /&gt;
        &lt;col style=&quot;width: 9%&quot; /&gt;
        &lt;col style=&quot;width: 10%&quot; /&gt;
        &lt;col style=&quot;width: 9%&quot; /&gt;
        &lt;col style=&quot;width: 6%&quot; /&gt;
        &lt;col style=&quot;width: 6%&quot; /&gt;
        &lt;col style=&quot;width: 6%&quot; /&gt;
        &lt;col style=&quot;width: 17%&quot; /&gt;
        &lt;col style=&quot;width: 15%&quot; /&gt;
      &lt;/colgroup&gt;
      &lt;thead&gt;
        &lt;tr class=&quot;header&quot;&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;traffic_station&lt;/th&gt;
          &lt;th style=&quot;text-align: left;&quot;&gt;element type&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;intensity&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;ocupation&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;load&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;vmed&lt;/th&gt;
          &lt;th style=&quot;text-align: left;&quot;&gt;error&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;integration period&lt;/th&gt;
          &lt;th style=&quot;text-align: left;&quot;&gt;date&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr class=&quot;odd&quot;&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;1001&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;M30&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;3240&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;9&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;59&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;N&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;5&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;2022-12-01 00:00:00&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;even&quot;&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;1&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;1001&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;M30&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;3240&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;9&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;59&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;N&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;5&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;2022-12-01 00:15:00&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;odd&quot;&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;2&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;1001&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;M30&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;300&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;1&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;66&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;N&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;5&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;2022-12-01 00:30:00&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;p&gt;This table amass information from various traffic stations, detailing
      elements such as traffic intensity, occupancy, congestion load, and
      other relevant data, all correlated with specific dates and times.&lt;/p&gt;
    &lt;p&gt;The table also includes a column for the date and another column that
      identifies the sensor. This identification will be used to establish a
      link with its corresponding coordinates by utilizing the subsequent &lt;a
        href=&quot;https://datos.madrid.es/egob/catalogo/202468-170-intensidad-trafico.csv&quot;&gt;traffic
        stations table&lt;/a&gt;:&lt;/p&gt;
    &lt;table style=&quot;width:100%;&quot;&gt;
      &lt;colgroup&gt;
        &lt;col style=&quot;width: 2%&quot; /&gt;
        &lt;col style=&quot;width: 8%&quot; /&gt;
        &lt;col style=&quot;width: 8%&quot; /&gt;
        &lt;col style=&quot;width: 4%&quot; /&gt;
        &lt;col style=&quot;width: 8%&quot; /&gt;
        &lt;col style=&quot;width: 39%&quot; /&gt;
        &lt;col style=&quot;width: 6%&quot; /&gt;
        &lt;col style=&quot;width: 7%&quot; /&gt;
        &lt;col style=&quot;width: 7%&quot; /&gt;
        &lt;col style=&quot;width: 7%&quot; /&gt;
      &lt;/colgroup&gt;
      &lt;thead&gt;
        &lt;tr class=&quot;header&quot;&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;&lt;/th&gt;
          &lt;th style=&quot;text-align: left;&quot;&gt;element type&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;district&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;id&lt;/th&gt;
          &lt;th style=&quot;text-align: left;&quot;&gt;code&lt;/th&gt;
          &lt;th style=&quot;text-align: left;&quot;&gt;name&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;utm_x&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;utm_y&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;Longitude&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;Latitude&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr class=&quot;odd&quot;&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;&quot;URB&quot;&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;4&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;3840&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;&quot;01001&quot;&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;&quot;Jose Ortega y Gasset E-O - Pº
            Castellana-Serrano&quot;&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;441615&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;4.47577e+06&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;-3.68832&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;40.4305&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;even&quot;&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;1&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;&quot;URB&quot;&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;4&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;3841&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;&quot;01002&quot;&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;&quot;Jose Ortega y Gasset O-E - Serrano-Pº
            Castellana&quot;&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;441706&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;4.47577e+06&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;-3.68726&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;40.4305&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;odd&quot;&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;2&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;&quot;URB&quot;&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;1&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;3842&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;&quot;01003&quot;&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;&quot;Pº Recoletos N-S - Almirante-Prim&quot;&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;441319&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;4.47484e+06&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;-3.69173&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;40.4221&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;p&gt;&lt;strong&gt;Weather data&lt;/strong&gt;&lt;/p&gt;
    &lt;p&gt;The table below provides a snapshot of the type of information
      available in the &lt;a href=&quot;https://datos.madrid.es/egob/catalogo/300352-141-meteorologicos-horarios.csv&quot;&gt;weather
        dataset&lt;/a&gt;:&lt;/p&gt;
    &lt;table style=&quot;width:100%;&quot;&gt;
      &lt;colgroup&gt;
        &lt;col style=&quot;width: 4%&quot; /&gt;
        &lt;col style=&quot;width: 23%&quot; /&gt;
        &lt;col style=&quot;width: 14%&quot; /&gt;
        &lt;col style=&quot;width: 9%&quot; /&gt;
        &lt;col style=&quot;width: 11%&quot; /&gt;
        &lt;col style=&quot;width: 8%&quot; /&gt;
        &lt;col style=&quot;width: 9%&quot; /&gt;
        &lt;col style=&quot;width: 8%&quot; /&gt;
        &lt;col style=&quot;width: 8%&quot; /&gt;
      &lt;/colgroup&gt;
      &lt;thead&gt;
        &lt;tr class=&quot;header&quot;&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;weather_station&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;magnitude&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;year&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;month&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;day&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;H01&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;V01&lt;/th&gt;
          &lt;th style=&quot;text-align: left;&quot;&gt;...&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr class=&quot;odd&quot;&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;108&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;81&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;2022&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;12&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;22&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;270&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;N&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;...&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;even&quot;&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;1&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;108&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;82&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;2022&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;12&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;22&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;9&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;N&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;...&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;odd&quot;&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;2&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;108&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;83&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;2022&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;12&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;22&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;94.7&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;N&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;...&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;even&quot;&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;3&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;108&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;86&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;2022&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;12&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;22&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;1031&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;N&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;...&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;odd&quot;&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;4&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;108&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;87&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;2022&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;12&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;22&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;2&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;N&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;...&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;p&gt;This dataset contains hourly meteorological observations, including
      temperature, humidity, wind speed, and precipitation measurements.&lt;/p&gt;
    &lt;p&gt;Each row documents various details about a specific meteorological
      station:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;The 'magnitude' field denotes the type of meteorological data
        captured in the corresponding row (e.g., 81 - wind, 82 - direction, ...,
        89 - rainfall).&lt;/li&gt;
      &lt;li&gt;In the 'H01' and 'V01' columns, the value for the data type
        specified in the 'magnitude' column is provided, along with its validity
        status, respectively.&lt;/li&gt;
      &lt;li&gt;The 'year', 'month', and 'day' columns indicate the timestamp of the
        measurement recording.&lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;Furthermore, we will require the geographical coordinates of the
      various stations, which are available in a distinct &lt;a
        href=&quot;https://datos.madrid.es/egob/catalogo/300360-1-meteorologicos-estaciones.csv&quot;&gt;table&lt;/a&gt;
      provided by the Madrid City Council.&lt;/p&gt;
    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr class=&quot;header&quot;&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;weather_station&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;Longitude&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;Latitude&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr class=&quot;odd&quot;&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;4&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;-3.71226&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;40.4239&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;even&quot;&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;1&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;8&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;-3.68232&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;40.4216&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;odd&quot;&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;2&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;16&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;-3.63924&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;40.44&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;even&quot;&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;3&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;18&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;-3.73184&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;40.3948&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;odd&quot;&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;4&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;108&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;-3.717881&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;40.47663&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;h3 id=&quot;data-cleansing-&quot;&gt;Data Cleansing
      &lt;a class=&quot;anchor&quot; id=&quot;t22&quot;&gt;&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;Upon loading the data, the subsequent task involved its preparation
      for analysis and modeling. The eventual consolidation of this cleaned
      data into a unified table will occur during a subsequent phase.&lt;/p&gt;
    &lt;p&gt;After loading the data, the next step was to get it ready for
      analysis and modeling. Given the diverse nature of the datasets, the
      process of data cleansing will be conducted individually for each
      dataset. We'll bring all this cleaned data together into a unified table
      in a later phase.&lt;/p&gt;
    &lt;h4 id=&quot;traffic-data&quot;&gt;Traffic Data&lt;/h4&gt;
    &lt;p&gt;The process employed to clean the traffic dataset involves the
      following steps:&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;Initially, values characterized by measurement errors are
          excluded from consideration. The documentation designates these values
          using the symbol &quot;N&quot;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Subsequently, solely the load measurements, which constitute the
          focus of our analysis, are retained.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;The data is then grouped based on each date and station,
          subsequently computing the average load value for each group:&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr class=&quot;header&quot;&gt;
          &lt;th&gt;date&lt;/th&gt;
          &lt;th&gt;traffic_station&lt;/th&gt;
          &lt;th&gt;traffic_load&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr class=&quot;odd&quot;&gt;
          &lt;td&gt;2022-12-01 00:00:00&lt;/td&gt;
          &lt;td&gt;1001&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;even&quot;&gt;
          &lt;td&gt;2022-12-01 00:00:00&lt;/td&gt;
          &lt;td&gt;1002&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;odd&quot;&gt;
          &lt;td&gt;2022-12-01 00:00:00&lt;/td&gt;
          &lt;td&gt;1003&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;h4 id=&quot;weather-data&quot;&gt;Weather Data&lt;/h4&gt;
    &lt;p&gt;Concerning the weather dataset, the procedures undertaken were as
      follows:&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;In the weather dataset, the date is split into separate columns
          for day, month, and year. However, in the traffic dataset, this
          information is combined. So, we merged the columns to create a single
          'date' column with the format:&quot; &lt;code&gt;day-month-year&lt;/code&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Additionally, given that each individual row contains all 24
          daily measurements taken at a weather station, along with their
          respective magnitudes, we need a transformation where each hourly
          measurement value and its corresponding validity status are discrete
          entries within separate rows. This presents an opportunity to remove any
          measurements that are marked as invalid.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr class=&quot;header&quot;&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;&lt;/th&gt;
          &lt;th style=&quot;text-align: left;&quot;&gt;hour&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;value&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr class=&quot;odd&quot;&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;0 days 00:00:00&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;7.1&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;even&quot;&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;1&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;0 days 00:00:00&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;6.8&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;odd&quot;&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;2&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;0 days 00:00:00&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;2.8&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;even&quot;&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;3&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;0 days 00:00:00&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;5.6&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;To standardize the time measurement format and align it with the
          traffic table, we merge the date with the time. As a result, the updated
          date format
          becomes:&lt;code&gt;date-month-year hour:minute:second&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Lastly, we restructure the diverse types of measurements into
          distinct columns, enhancing the organizational coherence of the
          dataset:&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
    &lt;table&gt;
      &lt;colgroup&gt;
        &lt;col style=&quot;width: 4%&quot; /&gt;
        &lt;col style=&quot;width: 16%&quot; /&gt;
        &lt;col style=&quot;width: 14%&quot; /&gt;
        &lt;col style=&quot;width: 10%&quot; /&gt;
        &lt;col style=&quot;width: 9%&quot; /&gt;
        &lt;col style=&quot;width: 9%&quot; /&gt;
        &lt;col style=&quot;width: 9%&quot; /&gt;
        &lt;col style=&quot;width: 7%&quot; /&gt;
        &lt;col style=&quot;width: 11%&quot; /&gt;
        &lt;col style=&quot;width: 6%&quot; /&gt;
      &lt;/colgroup&gt;
      &lt;thead&gt;
        &lt;tr class=&quot;header&quot;&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;&lt;/th&gt;
          &lt;th style=&quot;text-align: left;&quot;&gt;date&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;weather_station&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;direction&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;humidity&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;pressure&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;rainfall&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;solar&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;temperature&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;wind&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr class=&quot;odd&quot;&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;2022-12-01 00:00:00&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;4&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;7.1&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;even&quot;&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;1&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;2022-12-01 00:00:00&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;8&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;67&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;9.4&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;odd&quot;&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;2&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;2022-12-01 00:00:00&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;16&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;73&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;8.9&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;h4 id=&quot;location-data&quot;&gt;Location Data&lt;/h4&gt;
    &lt;p&gt;To make it easier to combine the tables we mentioned, we need to
      connect the traffic sensors with the weather stations. To do this, we
      can use a distance matrix that helps us find the closest pairs of both
      types of stations. Instead of directly measuring the distance using
      coordinates, we decided to go with the &lt;a href=&quot;https://en.wikipedia.org/wiki/Haversine_formula&quot;&gt;Haversine
        distance&lt;/a&gt;. This method calculates the distance in meters between
      coordinate pairs, which gives a clearer idea of the distances.&lt;/p&gt;
    &lt;p&gt;This visualization is best shown using a heatmap, where the distances
      are displayed on a range from 0 to 20 kilometers:&lt;/p&gt;
    &lt;figure&gt;
      &lt;img src=&quot;/assets/2023/09/15/heatmap3.png&quot;&gt;
      &lt;figcaption style=&quot;text-align: center&quot;&gt; &lt;b&gt;Figure 1:&lt;/b&gt; Heatmap of distances in km between weather and traffic
        stations &lt;/figcaption&gt;
    &lt;/figure&gt;
    &lt;p&gt;If we look at the shortest distances between each type of station, we
      end up with a mapping between these two tables:&lt;/p&gt;
    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr class=&quot;header&quot;&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;traffic_station&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;weather_station&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr class=&quot;odd&quot;&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;3840&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;109&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;even&quot;&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;1&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;3841&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;109&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;odd&quot;&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;2&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;3842&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;8&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;h4 id=&quot;the-final-table-&quot;&gt;The Final Table
      &lt;a class=&quot;anchor&quot; id=&quot;t23&quot;&gt;&lt;/a&gt;
    &lt;/h4&gt;
    &lt;p&gt;After we've done all the setup for the three tables - weather,
      traffic, and distance - we can now join them together. Because the
      weather table has data every hour, while the traffic data is available
      every 15 minutes, we'll combine them using an 'asof' join method. Then,
      we'll add time and day-of-the-week details to the dataset, which will
      help us study how these factors are connected to traffic congestion.&lt;/p&gt;
    &lt;table&gt;
      &lt;colgroup&gt;
        &lt;col style=&quot;width: 2%&quot; /&gt;
        &lt;col style=&quot;width: 10%&quot; /&gt;
        &lt;col style=&quot;width: 9%&quot; /&gt;
        &lt;col style=&quot;width: 4%&quot; /&gt;
        &lt;col style=&quot;width: 6%&quot; /&gt;
        &lt;col style=&quot;width: 5%&quot; /&gt;
        &lt;col style=&quot;width: 9%&quot; /&gt;
        &lt;col style=&quot;width: 6%&quot; /&gt;
        &lt;col style=&quot;width: 6%&quot; /&gt;
        &lt;col style=&quot;width: 6%&quot; /&gt;
        &lt;col style=&quot;width: 6%&quot; /&gt;
        &lt;col style=&quot;width: 4%&quot; /&gt;
        &lt;col style=&quot;width: 7%&quot; /&gt;
        &lt;col style=&quot;width: 4%&quot; /&gt;
        &lt;col style=&quot;width: 5%&quot; /&gt;
        &lt;col style=&quot;width: 4%&quot; /&gt;
      &lt;/colgroup&gt;
      &lt;thead&gt;
        &lt;tr class=&quot;header&quot;&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;&lt;/th&gt;
          &lt;th style=&quot;text-align: left;&quot;&gt;date&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;traffic_station&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;load&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;Distance&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;Closest&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;weather_station&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;direction&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;humidity&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;pressure&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;rainfall&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;solar&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;temperature&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;wind&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;weekday&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;hour&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr class=&quot;odd&quot;&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;2022-12-01 00:00:00&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;1001&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;15&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;1&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;8&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;67&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;9.4&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;3&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;even&quot;&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;1&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;2022-12-01 00:00:00&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;1002&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;15&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;1&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;8&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;67&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;9.4&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;3&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;odd&quot;&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;2&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;2022-12-01 00:00:00&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;1003&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;14&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;1&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;8&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;67&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;9.4&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;3&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;even&quot;&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;3&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;2022-12-01 00:00:00&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;1006&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;15&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;1&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;8&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;67&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;9.4&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;3&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;odd&quot;&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;4&lt;/td&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;2022-12-01 00:00:00&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;1009&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;14&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;4&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;7.1&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;3&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;h3 id=&quot;data-interpretation-&quot;&gt;Data interpretation
      &lt;a class=&quot;anchor&quot; id=&quot;t24&quot;&gt;&lt;/a&gt;
    &lt;/h3&gt;
    &lt;p&gt;Traffic patterns exhibit a pronounced dependency on time. To dig
      deeper into the data, a filtering process will be applied to extract
      instances of peak traffic. This focused dataset will help us really get
      a better grip on traffic dynamics.&lt;/p&gt;
    &lt;p&gt;The next figures illustrates the outstanding seasonality within the
      dataset:
    &lt;table&gt;
      &lt;tr&gt;
        &lt;td style='text-align:center;'&gt;
          &lt;figure&gt;
            &lt;img src=&quot;/assets/2023/09/15/loadperhour.png&quot;&gt;
            &lt;figcaption style=&quot;text-align: center&quot;&gt; &lt;b&gt;Figure 2:&lt;/b&gt; Load per Hour
            &lt;/figcaption&gt;
          &lt;/figure&gt;
        &lt;/td&gt;
        &lt;td&gt;
          &lt;figure&gt;
            &lt;img src=&quot;/assets/2023/09/15/loadperweekday.png&quot;&gt;
            &lt;figcaption style=&quot;text-align: center&quot;&gt; &lt;b&gt;Figure 3:&lt;/b&gt; Load per
              Weekday&lt;/figcaption&gt;
          &lt;/figure&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/table&gt;
    &lt;/p&gt;
    &lt;p&gt;Note: In Figure 3, zero represents Monday.&lt;/p&gt;
    &lt;p&gt;It's clear that weekdays have more traffic compared to holidays.
      Likewise, during the daytime, there's a higher traffic flow than at
      nighttime.&lt;/p&gt;
    &lt;p&gt;Concerning the relationship between Rainfall and Load, preliminary
      observations indicate a limited occurrence of rainy days within our
      dataset:&lt;/p&gt;
    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr class=&quot;header&quot;&gt;
          &lt;th style=&quot;text-align: left;&quot;&gt;&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;rainfall&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr class=&quot;odd&quot;&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;count&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;841068&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;even&quot;&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;mean&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0.0130932&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;odd&quot;&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;std&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0.194232&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;even&quot;&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;min&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;odd&quot;&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;50%&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;even&quot;&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;90%&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;0&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;odd&quot;&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;99.9%&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;2.9&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;even&quot;&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;max&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;10.9&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;p&gt;After looking closely at the percentiles of the precipitation column,
      it's clear that recorded instances of rainfall are quite scarce. To
      address this limitation, the measurements were divided into distinct
      categories based on the intensity of the rainfall. This led to a
      separate analysis for datasets involving heavy rain, moderate rain, and
      times when there was no rain. This analysis was done hourly, to minimize
      the impact of time on traffic patterns.&lt;/p&gt;
    &lt;p&gt;The results of this analysis show that on average, traffic congestion
      increases by around 5% to 14% during rainy hours. This consistently
      matches the findings discussed in the &lt;a href=&quot;#t2&quot;&gt;Use Case&lt;/a&gt;
      section.&lt;/p&gt;
    &lt;figure&gt;
      &lt;img src=&quot;/assets/2023/09/15/rainfall.png&quot;&gt;
      &lt;figcaption style=&quot;text-align: center&quot;&gt; &lt;b&gt;Figure 4:&lt;/b&gt; The average traffic load per hour for measurements
        categorized as heavy rain (blue), moderate rain (brown), and no rain (green):&lt;/figcaption&gt;
    &lt;/figure&gt;
    &lt;p&gt;To confirm the statistical importance of the differences between
      these groups, we conducted an analysis of variance (ANOVA) test.
      Notably, the ANOVA results strongly suggest significant variations in
      load levels among the different rain intensity categories for all hours.
      For example, let's take a look at the results for hour 12.&lt;/p&gt;
    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr class=&quot;header&quot;&gt;
          &lt;th style=&quot;text-align: left;&quot;&gt;&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;sum_sq&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;df&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;F&lt;/th&gt;
          &lt;th style=&quot;text-align: right;&quot;&gt;PR(&amp;gt;F)&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr class=&quot;odd&quot;&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;C(rainfall)&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;37650.7&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;6&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;20.1144&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;1.3346e-23&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;even&quot;&gt;
          &lt;td style=&quot;text-align: left;&quot;&gt;Residual&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;8.01363e+06&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;25687&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;nan&lt;/td&gt;
          &lt;td style=&quot;text-align: right;&quot;&gt;nan&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;p&gt;We chose to include rainfall as a factor in the model. However, the
      other meteorological conditions didn't show similarly clear results, so
      we decided to leave them out of the model.&lt;/p&gt;
    &lt;h3 id=&quot;the-model-&quot;&gt;The Model &lt;a class=&quot;anchor&quot; id=&quot;t25&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
    &lt;p&gt;For the purpose of performance evaluation, a preliminary model was
      developed employing a basic Long Short-Term Memory (LSTM) architecture
      with a memory span of 5 steps. The model's objective is to forecast the
      load at a specific traffic station. The model input encompasses
      historical load data, rainfall measurements, as well as the hour and day
      of the week.&lt;/p&gt;
    &lt;p&gt;Preliminary results derived from a single station exhibit promising
      outcomes, as demonstrated in Figure 6. In this figure, we compare the
      actual traffic load with the predictions made by the LSTM model.
      Furthermore, an analysis of the training and validation loss curves
      (Figure 5) indicates that the model is not experiencing issues related
      to overfitting or underfitting.&lt;/p&gt;
    &lt;table&gt; &lt;a class=&quot;anchor&quot; id=&quot;Image61&quot;&gt;&lt;/a&gt;
      &lt;tr&gt;
        &lt;td style='text-align:center;'&gt;
          &lt;figure&gt;
            &lt;img src=&quot;/assets/2023/09/15/loss_graph_p.png&quot;&gt;
            &lt;figcaption style=&quot;text-align: center&quot;&gt; &lt;b&gt;Figure 5:&lt;/b&gt; Train vs Validation loss curves plot &lt;/figcaption&gt;
          &lt;/figure&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/table&gt;
    &lt;table&gt;
      &lt;tr&gt;
        &lt;td&gt;
          &lt;figure&gt;
            &lt;img src=&quot;/assets/2023/09/15/test_python.png&quot;&gt;
            &lt;figcaption style=&quot;text-align: center&quot;&gt; &lt;b&gt;Figure 6:&lt;/b&gt; Traffic Forecasting for a traffic station
            &lt;/figcaption&gt;
          &lt;/figure&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id=&quot;2c79efba&quot; class=&quot;margin&quot;&gt;
    &lt;h2 id=&quot;pykx-migration-&quot;&gt;PyKX migration
      &lt;a class=&quot;anchor&quot; id=&quot;t3&quot;&gt;&lt;/a&gt;
    &lt;/h2&gt;
  &lt;/div&gt;
  &lt;div class=&quot;alert alert-block alert-info&quot;&gt;
&lt;b&gt; 🔍Version 2.0.1 came out since this post was originally published with version 1.6. The introduction of fantastic new features in this version has rendered certain aspects of this post outdated. Some of the new features render certain sections of the notebook non-executable. You may opt to use an earlier version of PyKX.&lt;/b&gt;
&lt;/div&gt; 
  &lt;div id=&quot;be878aa2&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;Despite the promising forecasting results yielded by the LSTM model,
      certain considerations arose concerning the efficiency of the Python
      code employed for project implementation. After profiling the entirity
      of the process, we found 4 key areas in which the code was behaving
      worse than expected:&lt;/p&gt;
    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr class=&quot;header&quot;&gt;
          &lt;th&gt;         &lt;/th&gt;
          &lt;th&gt;pandas Time    &lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr class=&quot;odd&quot;&gt;
          &lt;td&gt;Cleaning Weather&lt;/td&gt;
          &lt;td&gt;247 ms ± 10.4 ms&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;even&quot;&gt;
          &lt;td&gt;Cleaning Traffic&lt;/td&gt;
          &lt;td&gt;25.5 s ± 1.29 s  &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;odd&quot;&gt;
          &lt;td&gt;Join Final Table&lt;/td&gt;
          &lt;td&gt;7.1 s ± 168 ms  &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;even&quot;&gt;
          &lt;td&gt;Model Ingestion Preprocess&lt;/td&gt;
          &lt;td&gt;3.2 s ± 54.2 ms&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;p&gt;At this point, a fundamental decision had to be made regarding the migration strategy. Let's delve into the two
      alternatives at our disposal, along with their positive and negative aspects:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Partial migration&lt;/strong&gt;: This approach involves identifying the specific points where pandas
          experiences
          the greatest strain. Subsequently, these segments can be migrated to q using PyKX, while leaving the rest of
          the code
          intact. This alternative capitalizes on the compatibility features of PyKX, which ensure a seamless
          interaction between
          pure pandas/NumPy and PyKX. For instance, we may use the &lt;code&gt;.pd()&lt;/code&gt; method, which allows us to convert
          a PyPX table
          object into a pandas dataframe. This strategy can be particularly effective if the demarcation between
          computationally
          demanding and less complex segments is evident. However, this isn't always the case, leading to multiple
          conversions
          between Python and q. Furthermore, as the &lt;a
            href=&quot;https://code.kx.com/pykx/1.6/user-guide/advanced/performance.html&quot;&gt;
            documentation recommends&lt;/a&gt;, we should minimize these Python-to-Q conversions whenever feasible.&lt;/p&gt;
        &lt;p&gt;To test how much time is lost in these conversions, we moved the weather and traffic tables,
          as well as a 12-million-row table from a later stage in the process, to Python using the &lt;code&gt;.pd()&lt;/code&gt;
          method.
          The outcomes displayed in the subsequent table led us to dismiss this option.&lt;/p&gt;


        &lt;table&gt;
          &lt;thead&gt;
            &lt;tr class=&quot;header&quot;&gt;
              &lt;th&gt;&lt;/th&gt;
              &lt;th&gt;Translation time&lt;/th&gt;
            &lt;/tr&gt;
          &lt;/thead&gt;
          &lt;tbody&gt;
            &lt;tr class=&quot;odd&quot;&gt;
              &lt;td&gt;Traffic table&lt;/td&gt;
              &lt;td&gt;2.78 s ± 84.9 ms&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr class=&quot;even&quot;&gt;
              &lt;td&gt;Weather table&lt;/td&gt;
              &lt;td&gt;24.6 ms ± 821 µs&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr class=&quot;odd&quot;&gt;
              &lt;td&gt;Final table&lt;/td&gt;
              &lt;td&gt;1 minute 33 s&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;

        &lt;p&gt;A promising alternative to this intermediate transformations method is the PyKX implementation of the
          &lt;a href=&quot;https://code.kx.com/pykx/1.6/user-guide/advanced/Pandas_API.html&quot;&gt;pandas API&lt;/a&gt;. However,
          as we will explore later, even this had to be discarded for our particular case.
        &lt;/p&gt;
      &lt;/li&gt;
      &lt;br&gt;
      &lt;li&gt;&lt;strong&gt;Complete Migration&lt;/strong&gt;: Completely migrating the code to PyKX allows for the full use of kdb+/q
        processing capabilities without the need to switch between memory spaces. This strategy is particularly
        pertinent for managing substantial volume of data. In our case, a complete migration to PyKX became
        indispensable. Although it might seem challenging at first, as we will soon realize, having a basic
        understanding of q will make this process straightforward.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;Let's get started!&lt;/p&gt;
    &lt;div class=&quot;alert&quot;&gt;
      &lt;b&gt; 🔍 You can find on Github the &lt;a
          href=&quot;https://github.com/hablapps/AllRoadsLeadToKdb/blob/main/src/pandas/Pandas_code.py&quot;&gt;Original
          Python Project&lt;/a&gt; that will be migrated into PyKX. &lt;/b&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;5869bbc2&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;First of all we need to install and import PyKX:&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;d007dbc9&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb1-1&quot;&gt;&lt;a href=&quot;#cb1-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;op&quot;&gt;!&lt;/span&gt;pip install pykx == 1.6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;14b67a8e&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb2&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb2-1&quot;&gt;&lt;a href=&quot;#cb2-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; pykx &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; kx&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;38612113&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;alert&quot;&gt;
      &lt;b&gt; 🔍 A license is required to use some of the following features. You can find more information in the &lt;a
          href=&quot;https://code.kx.com/pykx/1.6/getting-started/installing.html&quot;&gt;
          PyKX installation documentation&lt;/a&gt;. &lt;/b&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;dfc586db&quot; class=&quot;margin&quot;&gt;
    &lt;h2 id=&quot;datasets-&quot;&gt;Datasets &lt;a class=&quot;anchor&quot; id=&quot;t31&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
  &lt;/div&gt;
  &lt;div id=&quot;f09daf6d&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;An excellent starting point for the migration process involves transferring our data to the q environment.
      We can even revert these objects to pandas and reuse all our existing code. This approach ensures that our
      data remains stored within the kdb environment, thus benefitting from its rapid and scalable database
      capabilities.
      However, it's important to acknowledge that we might sacrifice the processing power of kdb+/q. As a result, we
      will
      proceed with deeper steps in the migration process.&lt;/p&gt;
    &lt;p&gt;Before continuing, be sure to download the &lt;a href=&quot;#t21&quot;&gt;datasets&lt;/a&gt; required for running the next pieces of
      code.&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;b49c0e1a&quot; class=&quot;margin&quot;&gt;
    &lt;h4 id=&quot;traffic&quot;&gt;Traffic&lt;/h4&gt;
  &lt;/div&gt;
  &lt;div id=&quot;7aefd96b&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;The preprocessing of the traffic table was one of the most critical
      parts in terms of time. Later on, we will showcase the improvement in
      execution time compared to our pure pandas implementation.&lt;/p&gt;
    &lt;p&gt;The data loading will be executed employing the utilities facilitated
      by PyKX:&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;c6acb3cb&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb3&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb3-1&quot;&gt;&lt;a href=&quot;#cb3-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;traffic &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; kx.q.read.csv(&lt;span class=&quot;st&quot;&gt;&amp;#39;../12-2022.csv&amp;#39;&lt;/span&gt;, types&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;IPSIIIISI&amp;quot;&lt;/span&gt;, delimiter&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;#39;;&amp;#39;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;ae7e1553&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;alert alert-block alert-success&quot;
      style=&quot;background-color: #FFFFFF; border: 0px solid; padding: 0px;box-shadow: 2px 2px #3841459c; border-left: 3px solid #00b100;margin-left: 5%; margin-right: 5%; border-top: 3px solid #00b100&quot;&gt;
      &lt;div class=&quot;alert-header custom-card-header&quot;
        style=&quot;background-color: #d8ffd8; border: 1px solid #d8ffd8; color: black; padding: 10px;&quot;&gt;
        &lt;i class=&quot;fa fa-commenting&quot; aria-hidden=&quot;true&quot; style=&quot;color:#00b100&quot;&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Further Information
        on &lt;a href=&quot;https://code.kx.com/pykx/1.6/api/read.html&quot;&gt;PyKX Read/Write Utils &lt;/a&gt;
      &lt;/div&gt;
      &lt;div style=&quot;background-color: #e5ffdf70;  padding: 40px; padding-top:30px; padding-bottom:20px&quot;&gt;
        &lt;p
          style=&quot;color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px; line-weight: 1.5&quot;&gt;
          PyKX provides an array of functions designed to facilitate data loading and writing tasks. These functions
          encompass the capability to handle diverse file types, spanning both general formats and those specific to the
          q language. Notably, the q-specific functionalities enable seamless transfer of tables between the q context
          and the Python context, offering a bidirectional exchange of data. &lt;/p&gt;
        &lt;p
          style=&quot;color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px; line-weight: 1.5&quot;&gt;
          Specifically, the parameters of the &lt;code&gt;read.csv&lt;/code&gt; function adhere to conventional standards. The
          file's URL and
          delimiter are specified. It is important to emphasize the types parameter, which expects the q &lt;a
            href=&quot;https://code.kx.com/q/basics/datatypes/&quot;&gt;types&lt;/a&gt; associated with each column.
        &lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;7546a656&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb4&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb4-1&quot;&gt;&lt;a href=&quot;#cb4-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(traffic)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;margin&quot;&gt;
    &lt;code&gt;id   fecha                         tipo_elem intensidad ocupacion carga vmed ..
-----------------------------------------------------------------------------..
1001 2022.12.01D00:00:00.000000000 M30       3240       9         0     59   ..
1001 2022.12.01D00:15:00.000000000 M30       3240       9         0     59   ..
1001 2022.12.01D00:30:00.000000000 M30       300        1         0     66   ..
1001 2022.12.01D00:45:00.000000000 M30       300        1         0     66   ..
1001 2022.12.01D01:00:00.000000000 M30       300        1         0     66   ..
1001 2022.12.01D01:15:00.000000000 M30       300        1         0     66   ..
1001 2022.12.01D01:30:00.000000000 M30       300        1         0     66   ..
1001 2022.12.01D01:45:00.000000000 M30       300        1         0     66   ..
1001 2022.12.01D02:00:00.000000000 M30       300        1         0     66   ..
1001 2022.12.01D02:15:00.000000000 M30       300        1         0     66   ..
1001 2022.12.01D02:30:00.000000000 M30       300        1         0     66   ..
1001 2022.12.01D02:45:00.000000000 M30       300        1         0     66   ..
1001 2022.12.01D03:00:00.000000000 M30       300        1         0     66   ..
1001 2022.12.01D03:15:00.000000000 M30       300        1         0     66   ..
1001 2022.12.01D03:30:00.000000000 M30       300        1         0     66   ..
1001 2022.12.01D03:45:00.000000000 M30       300        1         0     66   ..
1001 2022.12.01D04:00:00.000000000 M30       300        1         0     66   ..
1001 2022.12.01D04:15:00.000000000 M30       300        1         0     66   ..
1001 2022.12.01D04:30:00.000000000 M30       300        1         0     66   ..
1001 2022.12.01D04:45:00.000000000 M30       300        1         0     66   ..
..&lt;/code&gt;
  &lt;/div&gt;
  &lt;div id=&quot;e9577ccf&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;As a result of this process, our table is now a PyKX object:&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;89aef455&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb5&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb5-1&quot;&gt;&lt;a href=&quot;#cb5-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;type&lt;/span&gt;(traffic)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;margin&quot;&gt;
    &lt;code&gt;pykx.wrappers.Table&lt;/code&gt;
  &lt;/div&gt;
  &lt;div id=&quot;218eecef&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;Let's examine the initial few rows of this table:&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;aa345ea9&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb6&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb6-1&quot;&gt;&lt;a href=&quot;#cb6-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(traffic[:&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;margin&quot;&gt;
    &lt;code&gt;id   fecha                         tipo_elem intensidad ocupacion carga vmed ..
-----------------------------------------------------------------------------..
1001 2022.12.01D00:00:00.000000000 M30       3240       9         0     59   ..
1001 2022.12.01D00:15:00.000000000 M30       3240       9         0     59   ..
1001 2022.12.01D00:30:00.000000000 M30       300        1         0     66   ..&lt;/code&gt;
  &lt;/div&gt;
  &lt;div id=&quot;908d6b8d&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;alert alert-block alert-success&quot;
      style=&quot;background-color: #FFFFFF; border: 0px solid; padding: 0px;box-shadow: 2px 2px #3841459c; border-left: 3px solid #00b100;margin-left: 5%; margin-right: 5%; border-top: 3px solid #00b100&quot;&gt;
      &lt;div class=&quot;alert-header custom-card-header&quot;
        style=&quot;background-color: #d8ffd8; border: 1px solid #d8ffd8; color: black; padding: 10px;&quot;&gt;
        &lt;i class=&quot;fa fa-commenting&quot; aria-hidden=&quot;true&quot; style=&quot;color:#00b100&quot;&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Further Information
        on &lt;a href=&quot;https://code.kx.com/pykx/1.6/user-guide/fundamentals/indexing.html&quot;&gt;pythonic indexing in PyKX&lt;/a&gt;
      &lt;/div&gt;
      &lt;div style=&quot;background-color: #e5ffdf70;  padding: 40px; padding-top:30px; padding-bottom:20px&quot;&gt;
        &lt;p
          style=&quot;color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;line-weight: 1.5&quot;&gt;
          Accessing data within PyKX objects, be it lists or tables, follows a methodology analogous to that of NumPy or
          pandas. This facilitates the indexing of PyKX objects without necessitating the explicit utilization of q
          functions. Furthermore, the capacity to index by columns is an additional convenience offered by this
          approach.&lt;/p&gt;
        &lt;code
          style=&quot;background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%;margin-bottom: 0px; color:black&quot;&gt; &gt;&gt;&gt; print(weather[&quot;H01&quot;][:3]) 
&lt;div style=&quot;color:#808080;display:inline;&quot;&gt; 270 9 94.7 &lt;/div&gt;&lt;/code&gt;&lt;br&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;51f379bd&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;We have the &lt;code&gt;kx.q.qsql&lt;/code&gt; interface integrated in PyKX,
      which allows us to query into q tables concisely.&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;d8a61424&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;alert alert-block alert-success&quot;
      style=&quot;background-color: #FFFFFF; border: 0px solid; padding: 0px;box-shadow: 2px 2px #3841459c; border-left: 3px solid #00b100;margin-left: 5%; margin-right: 5%; border-top: 3px solid #00b100&quot;&gt;
      &lt;div class=&quot;alert-header custom-card-header&quot;
        style=&quot;background-color: #d8ffd8; border: 1px solid #d8ffd8; color: black; padding: 10px;&quot;&gt;
        &lt;i class=&quot;fa fa-commenting&quot; aria-hidden=&quot;true&quot; style=&quot;color:#00b100&quot;&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Further Information
        on &lt;a href=&quot;https://code.kx.com/pykx/1.6/api/read.html&quot;&gt;qSQL&lt;/a&gt; and &lt;a
          href=&quot;https://code.kx.com/pykx/1.6/api/read.html&quot;&gt;SQL&lt;/a&gt; querys
      &lt;/div&gt;
      &lt;div style=&quot;background-color: #e5ffdf70;  padding: 40px; padding-top:30px; padding-bottom:20px&quot;&gt;
        &lt;p
          style=&quot;color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px; line-weight: 1.5&quot;&gt;
          PyKX allows you to use qSQL queries using API functions. This includes &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;exec&lt;/code&gt;,
          &lt;code&gt;update&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt; functions, which share some common characteristics, mainly with
          the arguments they receive. The first three share roughly this function call structure:
        &lt;/p&gt;
        &lt;code
          style=&quot;background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%; color:black&quot;&gt; kx.q.qsql.{function}({tab}, columns=..., where=..., by=...) &lt;/code&gt;
        &lt;br&gt;
        &lt;p
          style=&quot;color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px; line-weight: 1.5&quot;&gt;
          The &lt;code&gt;columns&lt;/code&gt; argument expects either a list of strings or a dictionary where the key is the column
          name and the value is the actual value you want in this column if let's say you want to apply a function to
          it. Let's see an example:&lt;/p&gt;
        &lt;code
          style=&quot;background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%; color:black&quot;&gt; &gt;&gt;&gt; print(kx.q.qsql.select(weather, {&quot;magnitude&quot;: &quot;count distinct magnitude&quot;}, by=[&quot;weather_station&quot;])[:3])
&lt;br&gt;&lt;div style=&quot;color:#808080;display:inline;&quot;&gt; weather_station| magnitude
 ---------------| ---------
 4              | 1        
 8              | 2        
 16             | 2     
&lt;/div&gt;         
&lt;/code&gt;
        &lt;br&gt;
        &lt;p
          style=&quot;color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px; line-weight: 1.5&quot;&gt;
          But if you are more familiarized with the q environment it is also possible to use q functions. This approach
          reduces the verbosity of our functions compared to the equivalent in Python.
        &lt;/p&gt;
        &lt;code
          style=&quot;background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%; color:black&quot;&gt; &gt;&gt;&gt; print(kx.q(&quot;{select count distinct magnitude by weather_station from x}&quot;, weather)[:3])
&lt;br&gt; &lt;div style=&quot;color:#808080;display:inline;&quot;&gt;weather_station| magnitude
 ---------------| ---------
 4              | 1        
 8              | 2        
 16             | 2 
&lt;/div&gt;    
&lt;/code&gt;
        &lt;br&gt;
        &lt;p
          style=&quot;color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px; line-weight: 1.5&quot;&gt;
          PyKX lets you use ANSI SQL queries too! &lt;/p&gt;
        &lt;code
          style=&quot;background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%; color:black&quot;&gt; &gt;&gt;&gt; print(kx.q.sql(&quot;SELECT weather_station, COUNT(DISTINCT(magnitude)) FROM &amp;#36 1 GROUP BY weather_station&quot;, weather)[:3])
&lt;br&gt; &lt;div style=&quot;color:#808080;display:inline;&quot;&gt;weather_station magnitude
 -------------------------
 4               1        
 8               2        
 16              2             
&lt;/div&gt;&lt;/code&gt;
        &lt;br&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;30e7b14f&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;To preprocess the traffic table our objective is to ascertain the
      average load based on date and season, while eliminating measurement
      errors. The power of qSQL enables us to accomplish this feat through a
      singular query:&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;d9c9c847&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb7&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb7-1&quot;&gt;&lt;a href=&quot;#cb7-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;traffic &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; kx.q.qsql.select(traffic,&lt;/span&gt;
&lt;span id=&quot;cb7-2&quot;&gt;&lt;a href=&quot;#cb7-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                         columns &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;st&quot;&gt;&amp;#39;traffic_load&amp;#39;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&amp;#39;avg carga&amp;#39;&lt;/span&gt;},&lt;/span&gt;
&lt;span id=&quot;cb7-3&quot;&gt;&lt;a href=&quot;#cb7-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                         by &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;st&quot;&gt;&amp;quot;date&amp;quot;&lt;/span&gt;:&lt;span class=&quot;st&quot;&gt;&amp;#39;fecha&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;traffic_station&amp;quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;}, &lt;/span&gt;
&lt;span id=&quot;cb7-4&quot;&gt;&lt;a href=&quot;#cb7-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                         where &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;error=`N&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;02ed7f35&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb8&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb8-1&quot;&gt;&lt;a href=&quot;#cb8-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(kx.q(&lt;span class=&quot;st&quot;&gt;&amp;quot;3#&amp;quot;&lt;/span&gt;,traffic))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;margin&quot;&gt;
    &lt;code&gt;date                          traffic_station| traffic_load
---------------------------------------------| ------------
2022.12.01D00:00:00.000000000 1001           | 0           
2022.12.01D00:00:00.000000000 1002           | 0           
2022.12.01D00:00:00.000000000 1003           | 0           &lt;/code&gt;
  &lt;/div&gt;
  &lt;div id=&quot;c155fa58&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;alert alert-block&quot;
      style=&quot;background-color: #FFFFFF; border: 0px solid; padding: 0px;box-shadow: 2px 2px #3841459c; border-left: 3px solid #953eff;margin-left: 5%; margin-right: 5%; border-top: 3px solid #953eff&quot;&gt;
      &lt;div class=&quot;alert-header custom-card-header&quot; style=&quot;background-color: #fad5ff; color: black; padding: 10px;&quot;&gt;
        &lt;i class=&quot;fa fa-commenting&quot; aria-hidden=&quot;true&quot; style=&quot;color:#953eff&quot;&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;pandas alternative:
        Traffic Cleaning
      &lt;/div&gt;
      &lt;div style=&quot;background-color: #fbf1ff;  padding: 40px; padding-top:30px; padding-bottom:20px&quot;&gt;
        &lt;p
          style=&quot;color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;line-weight: 1.5&quot;&gt;
          Although it may look like a simple query, it is performing a seriously heavy operation. The original pandas
          implementation looked like this: &lt;/p&gt;
        &lt;code
          style=&quot;background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%;margin-bottom: 0px; color:black&quot;&gt; &gt;&gt;&gt; traffic = traffic[traffic[&quot;error&quot;] == &quot;N&quot;].rename(columns={&quot;carga&quot;:&quot;load&quot;, &quot;id&quot;:&quot;traffic_station&quot;})
 &gt;&gt;&gt; traffic['date'] = pd.to_datetime(traffic['fecha'], errors='coerce')
 &gt;&gt;&gt; traffic.drop([&quot;tipo_elem&quot;, &quot;error&quot;, &quot;periodo_integracion&quot;, &quot;fecha&quot;, &quot;intensidad&quot;, &quot;ocupacion&quot;, &quot;vmed&quot;], axis=1, inplace=True)
 &gt;&gt;&gt; traffic.groupby([&quot;date&quot;, 'traffic_station']).mean().reset_index()
&lt;/code&gt;&lt;br&gt;
        &lt;p
          style=&quot;color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;line-weight: 1.5&quot;&gt;
          We observe a noticeable improvement in code legibility, especially once you have familiarised a little bit
          with the qSQL syntax. The code looks sleeker and simpler using PyKX. We noticed a roughly 10x reduction in
          execution time: &lt;/p&gt;
        &lt;table&gt;
          &lt;tr style=&quot;background-color: #FFFFFF;&quot;&gt;
            &lt;th style=&quot;background-color: #fbf1ff;&quot;&gt;&lt;/th&gt;
            &lt;th style=&quot;background-color:#fbf1ff&quot;&gt;pandas Time&lt;/th&gt;
            &lt;th style=&quot;background-color:#fbf1ff&quot;&gt;PyKX Time&lt;/th&gt;
          &lt;/tr&gt;
          &lt;tr style=&quot;border-top: 1px solid #000000&quot;&gt;
            &lt;td&gt;Cleaning Traffic&lt;/td&gt;
            &lt;td&gt;25.5 s ± 1.29 s&lt;/td&gt;
            &lt;td&gt;1.65 s ± 248 ms&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/table&gt;&lt;br&gt;
        &lt;p
          style=&quot;color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;line-weight: 1.5&quot;&gt;
          This time we achieved both simpler and faster code, which we can agree can be considered as a success.&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;f42c0fe5&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;Now traffic is a keyed table. Keyed tables indexing is a bit different; that's why if we want to see the
            first values of the table, we need to use the sublist method.&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;8a2772b7&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb9&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb9-1&quot;&gt;&lt;a href=&quot;#cb9-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(kx.q.sublist(&lt;span class=&quot;st&quot;&gt;3&lt;/span&gt;,traffic))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;margin&quot;&gt;
    &lt;code&gt;date                          traffic_station| traffic_load
---------------------------------------------| ------------
2022.12.01D00:00:00.000000000 1001           | 0           
2022.12.01D00:00:00.000000000 1002           | 0           
2022.12.01D00:00:00.000000000 1003           | 0           &lt;/code&gt;
  &lt;/div&gt;
  &lt;div id=&quot;ac69b52b&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;alert alert-block alert-success&quot;
      style=&quot;background-color: #FFFFFF; border: 0px solid; padding: 0px;box-shadow: 2px 2px #3841459c; border-left: 3px solid #00b100;margin-left: 5%; margin-right: 5%; border-top: 3px solid #00b100&quot;&gt;
      &lt;div class=&quot;alert-header custom-card-header&quot;
        style=&quot;background-color: #d8ffd8; border: 1px solid #d8ffd8; color: black; padding: 10px;&quot;&gt;
        &lt;i class=&quot;fa fa-commenting&quot; aria-hidden=&quot;true&quot; style=&quot;color:#00b100&quot;&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Further Information
        on Using &lt;a href=&quot;https://code.kx.com/pykx/1.6/user-guide/advanced/numpy.html&quot;&gt;NumPy&lt;/a&gt; and &lt;a
          href=&quot;https://code.kx.com/pykx/1.6/user-guide/advanced/Pandas_API.html&quot;&gt;pandas&lt;/a&gt;
      &lt;/div&gt;
      &lt;div style=&quot;background-color: #e5ffdf70;  padding: 40px; padding-top:30px; padding-bottom:20px&quot;&gt;
        &lt;p
          style=&quot;color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;line-weight: 1.5&quot;&gt;
          For individuals who are still acclimatizing to the kdb+/q ecosystem, a partial adoption of NumPy's
          functionality remains accessible. Specifically &lt;a
            href=&quot;https://numpy.org/doc/stable/reference/ufuncs.html&quot;&gt;universal functions&lt;/a&gt;. By using this type of
          function, the average q function that was employed in the previous query can be rephrased as follows:&lt;/p&gt;
        &lt;code
          style=&quot;background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%;color:black&quot;&gt; &gt;&gt;&gt; import numpy as np
 &gt;&gt;&gt;
 &gt;&gt;&gt; def npmean(arr):
 &gt;&gt;&gt;   return np.add.reduce(arr) / len(arr)
 &gt;&gt;&gt;
 &gt;&gt;&gt; print(npmean(traffic[&quot;load&quot;]))    
&lt;div style=&quot;color:#808080;display:inline;&quot;&gt;5.4 &lt;/div&gt;&lt;/code&gt;&lt;br&gt;
        &lt;p
          style=&quot;color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;line-weight: 1.5&quot;&gt;
          While the ability to reuse NumPy functions inside q is really nice and can be of great help during a migration
          like the one we are exemplifying, we found that we were not able to use this NumPy function on our
          &lt;code&gt;kx.q.qsql()&lt;/code&gt; query. After executing the previous code, our query would look something like this:
        &lt;/p&gt;
        &lt;code
          style=&quot;background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%;color:black&quot;&gt;
 &gt;&gt;&gt; kx.q[&quot;npmean&quot;] = npmean 
 &gt;&gt;&gt; traffic = kx.q.qsql.select(traffic,
                                columns = {'traffic_load': 'npmean carga'},
                                by = {&quot;date&quot;:'fecha', &quot;traffic_station&quot;: 'id'}, 
                                where = &quot;error=`N&quot;)
&lt;/code&gt;&lt;br&gt;
        &lt;p
          style=&quot;color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;line-weight: 1.5&quot;&gt;
          Notice the function called to perform the average of the &lt;code&gt;traffic_load&lt;/code&gt; column is the one defined
          earlier. Even though we didn't get any errors, this resulted in our code running for over 20 minutes with no
          feedback until we eventually stopped it manually, so we can't recommend the usage NumPy functions inside a
          qSQL query like we did. We suspect it may have something to do with q's &lt;code&gt;avg&lt;/code&gt; function (and all of
          q's functions) being optimised for this kind of usages and NumPy's implementation not being ready to deal with
          how kdb+/q implements its tables. It may also have something to do with the &lt;code&gt;group by&lt;/code&gt; clause,
          which creates a keyed table on q, but we can't confirm it as of now.
        &lt;/p&gt;
        &lt;p
          style=&quot;color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px; line-weight: 1.5&quot;&gt;
          On the other hand, pandas can seamlessly interface with PyKX objects through the pandas API. This can be
          effortlessly achieved by importing NumPy and pandas and toggling a designated flag. We can try to replicate
          the previous select:&lt;/p&gt;
        &lt;code
          style=&quot;background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%;color:black&quot;&gt; &gt;&gt;&gt; import os
 &gt;&gt;&gt; os.environ['PYKX_ENABLE_PANDAS_API'] = 'true'
 &gt;&gt;&gt; import numpy as np
 &gt;&gt;&gt; import pandas as pd
 &gt;&gt;&gt;
 &gt;&gt;&gt; print(traffic.iloc[traffic[&quot;error&quot;] == &quot;N&quot;][[&quot;date&quot;, &quot;traffic_station&quot;,&quot;load&quot;]].head())        
&lt;br&gt; &lt;div style=&quot;color:#808080;display:inline;&quot;&gt; fecha                         id   carga
----------------------------------------
2022.12.01D00:00:00.000000000 1001 0    
2022.12.01D00:15:00.000000000 1001 0    
2022.12.01D00:30:00.000000000 1001 0    
2022.12.01D00:45:00.000000000 1001 0    
2022.12.01D01:00:00.000000000 1001 0     
&lt;/div&gt;&lt;/code&gt;
        &lt;br&gt;
        &lt;p
          style=&quot;color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px; line-weight: 1.5&quot;&gt;
          However, it's worth noting that the pandas API is currently under development, hence not all of pandas
          functions have been fully incorporated yet. And unfortunately, &lt;code&gt;groupby&lt;/code&gt; is one of them. We hope
          that in the future we can migrate our pandas code to PyKX without any changes.&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;alert alert-block alert-info&quot;&gt;
    &lt;b&gt; 🔍 Version 2.0.0 of PyKX brings significant improvements in this regard, making the pandas API a viable option for such migrations. Regrettably, at the time when the post was created, these essential functions were not yet available. But now we have functions like groupby and flags/imports are no longer needed.
    &lt;/b&gt;
&lt;/div&gt;
  &lt;div id=&quot;f991f02a&quot; class=&quot;margin&quot;&gt;
    &lt;h4 id=&quot;weather&quot;&gt;Weather&lt;/h4&gt;
  &lt;/div&gt;
  &lt;div id=&quot;7d81c683&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;This table, serving as the traffic table, will also be imported into
      the Python environment. Consequently, it becomes accessible as a Python
      object, albeit not within q scopes.&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;7cac0ae6&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb10&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb10-1&quot;&gt;&lt;a href=&quot;#cb10-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;weather &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; kx.q.read.csv(&lt;span class=&quot;st&quot;&gt;&amp;#39;../dic_meteo22.csv&amp;#39;&lt;/span&gt;, types&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;#39;I&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;FS&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;24&lt;/span&gt;, delimiter&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;#39;;&amp;#39;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;d539fa84&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;To display a table in markdown format, we can transfer it to
      pandas:&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;030a8818&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb11&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb11-1&quot;&gt;&lt;a href=&quot;#cb11-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;weather[:&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;].pd()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;margin&quot;&gt;
    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr style=&quot;text-align: right;&quot;&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;PROVINCIA&lt;/th&gt;
          &lt;th&gt;MUNICIPIO&lt;/th&gt;
          &lt;th&gt;ESTACION&lt;/th&gt;
          &lt;th&gt;MAGNITUD&lt;/th&gt;
          &lt;th&gt;PUNTO_MUESTREO&lt;/th&gt;
          &lt;th&gt;ANO&lt;/th&gt;
          &lt;th&gt;MES&lt;/th&gt;
          &lt;th&gt;DIA&lt;/th&gt;
          &lt;th&gt;H01&lt;/th&gt;
          &lt;th&gt;V01&lt;/th&gt;
          &lt;th&gt;...&lt;/th&gt;
          &lt;th&gt;H20&lt;/th&gt;
          &lt;th&gt;V20&lt;/th&gt;
          &lt;th&gt;H21&lt;/th&gt;
          &lt;th&gt;V21&lt;/th&gt;
          &lt;th&gt;H22&lt;/th&gt;
          &lt;th&gt;V22&lt;/th&gt;
          &lt;th&gt;H23&lt;/th&gt;
          &lt;th&gt;V23&lt;/th&gt;
          &lt;th&gt;H24&lt;/th&gt;
          &lt;th&gt;V24&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;th&gt;0&lt;/th&gt;
          &lt;td&gt;28&lt;/td&gt;
          &lt;td&gt;79&lt;/td&gt;
          &lt;td&gt;108&lt;/td&gt;
          &lt;td&gt;81&lt;/td&gt;
          &lt;td&gt;b'28079108_81_98'&lt;/td&gt;
          &lt;td&gt;b'2022'&lt;/td&gt;
          &lt;td&gt;b'12'&lt;/td&gt;
          &lt;td&gt;b'22'&lt;/td&gt;
          &lt;td&gt;270.0&lt;/td&gt;
          &lt;td&gt;N&lt;/td&gt;
          &lt;td&gt;...&lt;/td&gt;
          &lt;td&gt;218.0&lt;/td&gt;
          &lt;td&gt;V&lt;/td&gt;
          &lt;td&gt;228.0&lt;/td&gt;
          &lt;td&gt;V&lt;/td&gt;
          &lt;td&gt;227.83&lt;/td&gt;
          &lt;td&gt;V&lt;/td&gt;
          &lt;td&gt;213.67&lt;/td&gt;
          &lt;td&gt;V&lt;/td&gt;
          &lt;td&gt;233.83&lt;/td&gt;
          &lt;td&gt;V&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;th&gt;1&lt;/th&gt;
          &lt;td&gt;28&lt;/td&gt;
          &lt;td&gt;79&lt;/td&gt;
          &lt;td&gt;108&lt;/td&gt;
          &lt;td&gt;82&lt;/td&gt;
          &lt;td&gt;b'28079108_82_98'&lt;/td&gt;
          &lt;td&gt;b'2022'&lt;/td&gt;
          &lt;td&gt;b'12'&lt;/td&gt;
          &lt;td&gt;b'22'&lt;/td&gt;
          &lt;td&gt;9.0&lt;/td&gt;
          &lt;td&gt;N&lt;/td&gt;
          &lt;td&gt;...&lt;/td&gt;
          &lt;td&gt;10.0&lt;/td&gt;
          &lt;td&gt;V&lt;/td&gt;
          &lt;td&gt;10.0&lt;/td&gt;
          &lt;td&gt;V&lt;/td&gt;
          &lt;td&gt;9.00&lt;/td&gt;
          &lt;td&gt;V&lt;/td&gt;
          &lt;td&gt;9.00&lt;/td&gt;
          &lt;td&gt;V&lt;/td&gt;
          &lt;td&gt;8.00&lt;/td&gt;
          &lt;td&gt;V&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;th&gt;2&lt;/th&gt;
          &lt;td&gt;28&lt;/td&gt;
          &lt;td&gt;79&lt;/td&gt;
          &lt;td&gt;108&lt;/td&gt;
          &lt;td&gt;83&lt;/td&gt;
          &lt;td&gt;b'28079108_83_98'&lt;/td&gt;
          &lt;td&gt;b'2022'&lt;/td&gt;
          &lt;td&gt;b'12'&lt;/td&gt;
          &lt;td&gt;b'22'&lt;/td&gt;
          &lt;td&gt;94.7&lt;/td&gt;
          &lt;td&gt;N&lt;/td&gt;
          &lt;td&gt;...&lt;/td&gt;
          &lt;td&gt;86.7&lt;/td&gt;
          &lt;td&gt;V&lt;/td&gt;
          &lt;td&gt;91.4&lt;/td&gt;
          &lt;td&gt;V&lt;/td&gt;
          &lt;td&gt;93.80&lt;/td&gt;
          &lt;td&gt;V&lt;/td&gt;
          &lt;td&gt;96.30&lt;/td&gt;
          &lt;td&gt;V&lt;/td&gt;
          &lt;td&gt;98.70&lt;/td&gt;
          &lt;td&gt;V&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div class=&quot;alert alert-block alert-success&quot;
    style=&quot;background-color: #FFFFFF; border: 0px solid; padding: 0px;box-shadow: 2px 2px #3841459c; border-left: 3px solid #00b100;margin-left: 5%; margin-right: 5%; border-top: 3px solid #00b100&quot;&gt;
    &lt;div class=&quot;alert-header custom-card-header&quot;
      style=&quot;background-color: #d8ffd8; border: 1px solid #d8ffd8; color: black; padding: 10px;&quot;&gt;
      &lt;i class=&quot;fa fa-commenting&quot; aria-hidden=&quot;true&quot; style=&quot;color:#00b100&quot;&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Further Information
      on &lt;a href=&quot;https://code.kx.com/pykx/1.6/user-guide/fundamentals/creating.html&quot;&gt;Python/Q transformations &lt;/a&gt;
    &lt;/div&gt;
    &lt;div style=&quot;background-color: #e5ffdf70;  padding: 40px; padding-top:30px; padding-bottom:20px&quot;&gt;
      &lt;p
        style=&quot;color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px; line-weight: 1.5&quot;&gt;
        Objects from q can be converted to pandas with &lt;code&gt;.pd()&lt;/code&gt;, to PyArrow with &lt;code&gt;.pa()&lt;/code&gt;, to
        NumPy with &lt;code&gt;.np()&lt;/code&gt; and to Python with &lt;code&gt;.py()&lt;/code&gt; methods. This flexibility empowers Python
        developers, especially those new to PyKX, to seamlessly tap into the capabilities of kdb+ databases while
        acquainting themselves with q.
      &lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;7d397c5c&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;As is evident, these objects are not currently within the q memory
      space. Let's proceed to explore how we can access and use q
      features on these objects. First, we will examine the straightforward
      &lt;code&gt;xcol&lt;/code&gt; function, which affords us the ability to rename
      columns:
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;a35cf269&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb12&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb12-1&quot;&gt;&lt;a href=&quot;#cb12-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;weather &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; kx.q.xcol({&lt;span class=&quot;st&quot;&gt;&amp;#39;ANO&amp;#39;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&amp;#39;year&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;MES&amp;#39;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&amp;#39;month&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;DIA&amp;#39;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&amp;#39;day&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;ESTACION&amp;#39;&lt;/span&gt;:&lt;span class=&quot;st&quot;&gt;&amp;#39;weather_station&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;MAGNITUD&amp;#39;&lt;/span&gt;:&lt;span class=&quot;st&quot;&gt;&amp;#39;magnitude&amp;#39;&lt;/span&gt;}, weather)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;47a11bbb&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;alert alert-block alert-success&quot;
      style=&quot;background-color: #FFFFFF; border: 0px solid; padding: 0px;box-shadow: 2px 2px #3841459c; border-left: 3px solid #00b100;margin-left: 5%; margin-right: 5%;  border-top: 3px solid #00b100&quot;&gt;
      &lt;div class=&quot;alert-header custom-card-header&quot;
        style=&quot;background-color: #d8ffd8; border: 1px solid #d8ffd8; color: black; padding: 10px;&quot;&gt;
        &lt;i class=&quot;fa fa-commenting&quot; aria-hidden=&quot;true&quot; style=&quot;color:#00b100&quot;&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Further Information
        on using &lt;a href=&quot;https://code.kx.com/pykx/1.6/user-guide/fundamentals/evaluating.html&quot;&gt;q functions in PyKX&lt;/a&gt;
      &lt;/div&gt;
      &lt;div style=&quot;background-color: #e5ffdf70;  padding: 40px; padding-top:30px; padding-bottom:20px&quot;&gt;
        &lt;p
          style=&quot;color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px; line-weight: 1.5&quot;&gt;
          A plethora of q functions can be accessed via the &lt;code&gt;pykx.q&lt;/code&gt; interface. The attributes mirrored by
          these functions closely resemble the parameters anticipated by the corresponding q functions, with Python data
          structures being employed in lieu of q structures. It is important to note that these functions are compiled
          and thoroughly elucidated within the &lt;a href=&quot;https://code.kx.com/pykx/1.6/api/q/q.html&quot;&gt; PyKX
            documentation&lt;/a&gt;&lt;/p&gt;
        &lt;code
          style=&quot;background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%; color:black&quot;&gt; &gt;&gt;&gt; kx.q.distinct(['A', 'B', 'B', 'B' ,'C'])
&lt;samp style=&quot;color:#808080;display:inline;&quot;&gt; `A`B`C &lt;/samp&gt;&lt;/code&gt;&lt;br&gt;
        &lt;p
          style=&quot;color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px; line-weight: 1.5&quot;&gt;
          For those who want to dig deeper into kdb+/q and gain experience, you can use q functions and pass PyKX
          objects as arguments: &lt;/p&gt;
        &lt;code
          style=&quot;background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%; color:black&quot;&gt; &gt;&gt;&gt; kx.q(&quot;distinct&quot;, ['A', 'B', 'B', 'B' ,'C'])
&lt;samp style=&quot;color:#808080;display:inline;&quot;&gt; `A`B`C &lt;/samp&gt;&lt;/code&gt;&lt;br&gt;
        &lt;p
          style=&quot;color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px; line-weight: 1.5&quot;&gt;
          It's important to emphasize that in the preceding function, a Python object is being passed to a q function.
          When Python objects have a direct equivalent in q, like dictionaries, they can be directly employed as
          attributes for PyKX functions. Beneath the surface, PyKX adeptly manages the conversion to q data structures.
        &lt;/p&gt;
        &lt;p style=&quot;color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;font-size: 115%; line-weight: 1.5&quot;&gt; Moreover, the application of &lt;a href=&quot;https://code.kx.com/q/basics/iteration/&quot;&gt;q iterations&lt;/a&gt; could be another avenue of exploration. You can even create functions and use them with PyKX or Python objects using Lambda functions (as we have done thus far) or by applying a composition of functions to the Python object:&lt;/p&gt;
&lt;code style=&quot;background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%; color:black&quot;&gt; &gt;&gt;&gt; kx.q.count.each(kx.q.group(['A', 'B', 'B', 'B' ,'C'])) 
&lt;samp style=&quot;color:#808080;display:inline;&quot;&gt; A| 1
 B| 3
 C| 1 &lt;/samp&gt;&lt;/code&gt;&lt;br&gt;  
          
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;dba475a3&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;With the following code we have removed several columns that are not
      relevant to the analysis.&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;6f559934&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb13&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb13-1&quot;&gt;&lt;a href=&quot;#cb13-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;weather &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; kx.q.qsql.delete(weather, [&lt;span class=&quot;st&quot;&gt;&amp;#39;PUNTO_MUESTREO&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;PROVINCIA&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;MUNICIPIO&amp;#39;&lt;/span&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;93c5c6b9&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;The next step involves merging the year, month, and day columns into
      a single unified date column. To initiate this process, we begin by
      accessing these three individual columns. This can be accomplished
      through indexing:&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;9c952877&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb14&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb14-1&quot;&gt;&lt;a href=&quot;#cb14-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(weather[&lt;span class=&quot;st&quot;&gt;&amp;quot;year&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;month&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;day&amp;quot;&lt;/span&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;margin&quot;&gt;
    &lt;code&gt;&quot;2022&quot; &quot;2022&quot; &quot;2022&quot; &quot;2022&quot; &quot;2022&quot; &quot;2022&quot; &quot;2022&quot; &quot;2022&quot; &quot;2022&quot; &quot;2022&quot; &quot;2022&quot; ..
&quot;12&quot;   &quot;12&quot;   &quot;12&quot;   &quot;12&quot;   &quot;12&quot;   &quot;12&quot;   &quot;12&quot;   &quot;12&quot;   &quot;12&quot;   &quot;12&quot;   &quot;12&quot;   ..
&quot;22&quot;   &quot;22&quot;   &quot;22&quot;   &quot;22&quot;   &quot;22&quot;   &quot;22&quot;   &quot;22&quot;   &quot;01&quot;   &quot;02&quot;   &quot;03&quot;   &quot;04&quot;   ..&lt;/code&gt;
  &lt;/div&gt;
  &lt;div id=&quot;4a530359&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;We observe that the outcome consists of three lists, each containing
      data corresponding to the sample size. The objective is to form a single
      list of the sample size, wherein the three date elements are
      combined:&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;d4463a68&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb15&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb15-1&quot;&gt;&lt;a href=&quot;#cb15-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(kx.q.flip(weather[&lt;span class=&quot;st&quot;&gt;&amp;quot;year&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;month&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;day&amp;quot;&lt;/span&gt;])[:&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;margin&quot;&gt;
    &lt;code&gt;&quot;2022&quot; &quot;12&quot; &quot;22&quot;
&quot;2022&quot; &quot;12&quot; &quot;22&quot;
&quot;2022&quot; &quot;12&quot; &quot;22&quot;&lt;/code&gt;
  &lt;/div&gt;
  &lt;div id=&quot;5faba647&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;We appear to be approaching the desired outcome. Currently, we
      possess a list of sample size, wherein each position contains a sub-list
      comprising three elements: the day, the month, and the year. To
      consolidate each sub-list into a singular, unified element, the
      &lt;em&gt;each&lt;/em&gt; iterator can be used:
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;6e9f1ca3&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb16&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb16-1&quot;&gt;&lt;a href=&quot;#cb16-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(kx.q.each(kx.q.raze, kx.q.flip(weather[&lt;span class=&quot;st&quot;&gt;&amp;quot;year&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;month&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;day&amp;quot;&lt;/span&gt;]))[:&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;margin&quot;&gt;
    &lt;code&gt;&quot;20221222&quot;
&quot;20221222&quot;
&quot;20221222&quot;&lt;/code&gt;
  &lt;/div&gt;
  &lt;div id=&quot;3ccc1ddf&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;The final step entails converting the resultant data from string
      format to a date format. However, it's worth noting that certain
      functions, particularly the overloaded glyphs, have yet to be
      implemented. For example cast (&lt;code&gt;$&lt;/code&gt;), take (&lt;code&gt;#&lt;/code&gt;),
      concat (&lt;code&gt;,&lt;/code&gt;)... So we are forced to abandon the pythonic way
      of calling q functions and perform this casting writing kdb+/q code
      using the &lt;code&gt;pykx.q()&lt;/code&gt; method:&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;9739ef93&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb17&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb17-1&quot;&gt;&lt;a href=&quot;#cb17-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;date &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; kx.q(&lt;span class=&quot;st&quot;&gt;&amp;#39;&amp;quot;D&amp;quot;$&amp;#39;&lt;/span&gt;,(kx.q.each(kx.q.raze, kx.q.flip(weather[&lt;span class=&quot;st&quot;&gt;&amp;quot;year&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;month&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;day&amp;quot;&lt;/span&gt;]))))&lt;/span&gt;
&lt;span id=&quot;cb17-2&quot;&gt;&lt;a href=&quot;#cb17-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(date[:&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;margin&quot;&gt;
    &lt;code&gt;2022.12.22 2022.12.22 2022.12.22&lt;/code&gt;
  &lt;/div&gt;
  &lt;div id=&quot;f24a9cd5&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;Finally, we add this column to our table:&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;7e366cb6&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb18&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb18-1&quot;&gt;&lt;a href=&quot;#cb18-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;weather_ &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; kx.q.qsql.update(weather, columns &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;st&quot;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;: date})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;e851d1fa&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;alert alert-block alert-success&quot;
      style=&quot;background-color: #FFFFFF; border: 0px solid; padding: 0px;box-shadow: 2px 2px #3841459c; border-left: 3px solid #953eff;margin-left: 5%; margin-right: 5%; border-top: 3px solid #953eff&quot;&gt;
      &lt;div class=&quot;alert-header custom-card-header&quot; style=&quot;background-color: #fad5ff; color: black; padding: 10px;&quot;&gt;
        &lt;i class=&quot;fa fa-commenting&quot; aria-hidden=&quot;true&quot; style=&quot;color:#953eff&quot;&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;pandas Alternative:
        Time Join
      &lt;/div&gt;
      &lt;div style=&quot;background-color: #fbf1ff;  padding: 40px; padding-top:30px; padding-bottom:20px&quot;&gt;
        &lt;p
          style=&quot;color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;line-weight: 1.5&quot;&gt;
          In pandas, we achieved this by executing this operation on our table: &lt;/p&gt;
        &lt;code
          style=&quot;background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%;margin-bottom: 0px; color:black&quot;&gt; &gt;&gt;&gt; pd.to_datetime(weather[[&quot;year&quot;, &quot;month&quot;, &quot;day&quot;]])
&lt;/code&gt;&lt;br&gt;
        &lt;p
          style=&quot;color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;line-weight: 1.5&quot;&gt;
          It seems to be less complicated thanks to having a function that does exactly what we need, whereas in q we
          had to implement this function ourselves.&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;b8caa931&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;Shortly after, some team members started using q code instead of PyKX
      functions in the pythonic way, as they found the resulting code to be
      sleeker and more concise. As their familiarity with q grew, they put
      forth a suggestion to create a function entirely written in q.&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;b984407d&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb19&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb19-1&quot;&gt;&lt;a href=&quot;#cb19-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;weather &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; kx.q.qsql.update(weather, columns &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;st&quot;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;:&lt;span class=&quot;st&quot;&gt;&amp;#39;&amp;quot;D&amp;quot;$ raze each flip(year;month;day)&amp;#39;&lt;/span&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;0d496b18&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;Once again, both solutions are entirely compatible and can even be
      combined. It's at the programmer's discretion to opt for either
      approach.&lt;/p&gt;
    &lt;p&gt;Now, the three columns that have already been incorporated into the
      date can be eliminated:&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;2477b277&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb20&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb20-1&quot;&gt;&lt;a href=&quot;#cb20-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;weather &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; kx.q.qsql.delete(weather, [&lt;span class=&quot;st&quot;&gt;&amp;#39;year&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;month&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;day&amp;#39;&lt;/span&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;5935123c&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;The current state of the weather table is as follows:&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;797881f3&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb21&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb21-1&quot;&gt;&lt;a href=&quot;#cb21-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;weather[:&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;].pd()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;margin&quot;&gt;
    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr style=&quot;text-align: right;&quot;&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;weather_station&lt;/th&gt;
          &lt;th&gt;magnitude&lt;/th&gt;
          &lt;th&gt;H01&lt;/th&gt;
          &lt;th&gt;V01&lt;/th&gt;
          &lt;th&gt;H02&lt;/th&gt;
          &lt;th&gt;V02&lt;/th&gt;
          &lt;th&gt;H03&lt;/th&gt;
          &lt;th&gt;V03&lt;/th&gt;
          &lt;th&gt;H04&lt;/th&gt;
          &lt;th&gt;V04&lt;/th&gt;
          &lt;th&gt;...&lt;/th&gt;
          &lt;th&gt;V20&lt;/th&gt;
          &lt;th&gt;H21&lt;/th&gt;
          &lt;th&gt;V21&lt;/th&gt;
          &lt;th&gt;H22&lt;/th&gt;
          &lt;th&gt;V22&lt;/th&gt;
          &lt;th&gt;H23&lt;/th&gt;
          &lt;th&gt;V23&lt;/th&gt;
          &lt;th&gt;H24&lt;/th&gt;
          &lt;th&gt;V24&lt;/th&gt;
          &lt;th&gt;date&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;th&gt;0&lt;/th&gt;
          &lt;td&gt;108&lt;/td&gt;
          &lt;td&gt;81&lt;/td&gt;
          &lt;td&gt;270.0&lt;/td&gt;
          &lt;td&gt;N&lt;/td&gt;
          &lt;td&gt;252.0&lt;/td&gt;
          &lt;td&gt;N&lt;/td&gt;
          &lt;td&gt;216.0&lt;/td&gt;
          &lt;td&gt;N&lt;/td&gt;
          &lt;td&gt;242.0&lt;/td&gt;
          &lt;td&gt;N&lt;/td&gt;
          &lt;td&gt;...&lt;/td&gt;
          &lt;td&gt;V&lt;/td&gt;
          &lt;td&gt;228.0&lt;/td&gt;
          &lt;td&gt;V&lt;/td&gt;
          &lt;td&gt;227.83&lt;/td&gt;
          &lt;td&gt;V&lt;/td&gt;
          &lt;td&gt;213.67&lt;/td&gt;
          &lt;td&gt;V&lt;/td&gt;
          &lt;td&gt;233.83&lt;/td&gt;
          &lt;td&gt;V&lt;/td&gt;
          &lt;td&gt;2022-12-22&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;th&gt;1&lt;/th&gt;
          &lt;td&gt;108&lt;/td&gt;
          &lt;td&gt;82&lt;/td&gt;
          &lt;td&gt;9.0&lt;/td&gt;
          &lt;td&gt;N&lt;/td&gt;
          &lt;td&gt;8.0&lt;/td&gt;
          &lt;td&gt;N&lt;/td&gt;
          &lt;td&gt;9.0&lt;/td&gt;
          &lt;td&gt;N&lt;/td&gt;
          &lt;td&gt;8.0&lt;/td&gt;
          &lt;td&gt;N&lt;/td&gt;
          &lt;td&gt;...&lt;/td&gt;
          &lt;td&gt;V&lt;/td&gt;
          &lt;td&gt;10.0&lt;/td&gt;
          &lt;td&gt;V&lt;/td&gt;
          &lt;td&gt;9.00&lt;/td&gt;
          &lt;td&gt;V&lt;/td&gt;
          &lt;td&gt;9.00&lt;/td&gt;
          &lt;td&gt;V&lt;/td&gt;
          &lt;td&gt;8.00&lt;/td&gt;
          &lt;td&gt;V&lt;/td&gt;
          &lt;td&gt;2022-12-22&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;th&gt;2&lt;/th&gt;
          &lt;td&gt;108&lt;/td&gt;
          &lt;td&gt;83&lt;/td&gt;
          &lt;td&gt;94.7&lt;/td&gt;
          &lt;td&gt;N&lt;/td&gt;
          &lt;td&gt;97.6&lt;/td&gt;
          &lt;td&gt;N&lt;/td&gt;
          &lt;td&gt;96.6&lt;/td&gt;
          &lt;td&gt;N&lt;/td&gt;
          &lt;td&gt;97.5&lt;/td&gt;
          &lt;td&gt;N&lt;/td&gt;
          &lt;td&gt;...&lt;/td&gt;
          &lt;td&gt;V&lt;/td&gt;
          &lt;td&gt;91.4&lt;/td&gt;
          &lt;td&gt;V&lt;/td&gt;
          &lt;td&gt;93.80&lt;/td&gt;
          &lt;td&gt;V&lt;/td&gt;
          &lt;td&gt;96.30&lt;/td&gt;
          &lt;td&gt;V&lt;/td&gt;
          &lt;td&gt;98.70&lt;/td&gt;
          &lt;td&gt;V&lt;/td&gt;
          &lt;td&gt;2022-12-22&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id=&quot;cc56cf70&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;Now, let's shift our focus towards deconstructing the H* and V*
      queries into multiple rows, while simultaneously introducing a time
      column to prevent information gaps. In q, the conventional approach
      would involve leveraging functional qSQL to extract columns conforming
      to the aforementioned patterns. However, we will capitalize on the
      advantage that PyKX offers by incorporating q code via strings to
      sidestep this method:&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;728e319c&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb22&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb22-1&quot;&gt;&lt;a href=&quot;#cb22-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; functionalSearch(cols, pattern, func):&lt;/span&gt;
&lt;span id=&quot;cb22-2&quot;&gt;&lt;a href=&quot;#cb22-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    xcols &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; cols[kx.q.where(kx.q.like(cols, pattern))]&lt;/span&gt;
&lt;span id=&quot;cb22-3&quot;&gt;&lt;a href=&quot;#cb22-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    xstring &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; func.&lt;span class=&quot;bu&quot;&gt;format&lt;/span&gt;(kx.q.sv(&lt;span class=&quot;st&quot;&gt;b&amp;quot;;&amp;quot;&lt;/span&gt;, kx.q.string(xcols)).py().decode(&lt;span class=&quot;st&quot;&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&quot;cb22-4&quot;&gt;&lt;a href=&quot;#cb22-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; xcols, xstring&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;2a828db0&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;The function above accepts a list of columns, a designated pattern
      for searching, and a q function represented as a string. This function
      takes the columns found following the specified pattern in qSQL format
      (where columns are accessed by their names, not symbols) as an argument.
      When applied to all columns commencing with &quot;H&quot;, it yields these columns
      as a vector of symbols, alongside a string representation of these
      columns in qSQL format:&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;6091fa6a&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb23&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb23-1&quot;&gt;&lt;a href=&quot;#cb23-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;cols &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; kx.q.cols(weather)&lt;/span&gt;
&lt;span id=&quot;cb23-2&quot;&gt;&lt;a href=&quot;#cb23-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;found_columns, qsql_function &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; functionalSearch(cols, &lt;span class=&quot;st&quot;&gt;b&amp;#39;H*&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb23-3&quot;&gt;&lt;a href=&quot;#cb23-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb23-4&quot;&gt;&lt;a href=&quot;#cb23-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;Columns found: &amp;quot;&lt;/span&gt;, found_columns)&lt;/span&gt;
&lt;span id=&quot;cb23-5&quot;&gt;&lt;a href=&quot;#cb23-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;bu&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;qSQL function: &amp;quot;&lt;/span&gt;, qsql_function)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;margin&quot;&gt;
    &lt;code&gt;Columns found:  `H01`H02`H03`H04`H05`H06`H07`H08`H09`H10`H11`H12`H13`H14`H15`H16`H17`H18`H19`..
qSQL function:  H01;H02;H03;H04;H05;H06;H07;H08;H09;H10;H11;H12;H13;H14;H15;H16;H17;H18;H19;H20;H21;H22;H23;H24&lt;/code&gt;
  &lt;/div&gt;
  &lt;div id=&quot;91873db7&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;This capability is remarkably powerful, as it enables the utilization
      of qSQL alongside variables, obviating the need for functional forms
      which can often prove intricate for individuals new to kdb+/q
      development.&lt;/p&gt;
    &lt;p&gt;Now, let's apply the above methodology to the columns commencing with
      &lt;strong&gt;H&lt;/strong&gt;, which correspond to the measurement values, and to
      the columns commencing with &lt;strong&gt;V&lt;/strong&gt;, which indicate the
      validity of the measurements. The function employed to transform the
      measurement column into rows is &lt;code&gt;flip&lt;/code&gt;:
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;cbca5b61&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb24&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb24-1&quot;&gt;&lt;a href=&quot;#cb24-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;hcols, value &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; functionalSearch(cols, &lt;span class=&quot;st&quot;&gt;b&amp;#39;H*&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;flip(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;)&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb24-2&quot;&gt;&lt;a href=&quot;#cb24-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;vcols, valid &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; functionalSearch(cols, &lt;span class=&quot;st&quot;&gt;b&amp;#39;V*&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;flip(&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;)&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;b98f8279&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;Our next step involves feeding our internally constructed functions,
      represented as strings, into the qSQL &lt;code&gt;update&lt;/code&gt; function. This
      is done in conjunction with the repetition of the 24-hour sequence to
      match the initial number of rows:&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;c40e5441&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb25&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb25-1&quot;&gt;&lt;a href=&quot;#cb25-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;weather &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; kx.q.qsql.update(weather, columns &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;st&quot;&gt;&amp;#39;hour&amp;#39;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&amp;#39;count[i]#enlist 01:00*til 24&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;values&amp;#39;&lt;/span&gt;: value, &lt;span class=&quot;st&quot;&gt;&amp;#39;valid&amp;#39;&lt;/span&gt;: valid})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;12f082f3&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;To remove columns beginning with &lt;strong&gt;H&lt;/strong&gt; or
      &lt;strong&gt;V&lt;/strong&gt;, we can employ the same approach as earlier to
      circumvent the need for functional qSQL:
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;712df953&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb26&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb26-1&quot;&gt;&lt;a href=&quot;#cb26-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;weather &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; kx.q.qsql.delete(weather, columns &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; kx.q.raze(hcols,vcols).py())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;5bb289e7&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;Let's see the result:&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;9533cadd&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb27&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb27-1&quot;&gt;&lt;a href=&quot;#cb27-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;weather[:&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;].pd()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;margin&quot;&gt;
    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr style=&quot;text-align: right;&quot;&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;weather_station&lt;/th&gt;
          &lt;th&gt;magnitude&lt;/th&gt;
          &lt;th&gt;date&lt;/th&gt;
          &lt;th&gt;hour&lt;/th&gt;
          &lt;th&gt;values&lt;/th&gt;
          &lt;th&gt;valid&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;th&gt;0&lt;/th&gt;
          &lt;td&gt;108&lt;/td&gt;
          &lt;td&gt;81&lt;/td&gt;
          &lt;td&gt;2022-12-22&lt;/td&gt;
          &lt;td&gt;[0 minutes, 60 minutes, 120 minutes, 180 minut...&lt;/td&gt;
          &lt;td&gt;[270.0, 252.0, 216.0, 242.0, 239.0, 246.0, 233...&lt;/td&gt;
          &lt;td&gt;[N, N, N, N, N, N, N, N, N, N, V, V, V, V, V, ...&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;th&gt;1&lt;/th&gt;
          &lt;td&gt;108&lt;/td&gt;
          &lt;td&gt;82&lt;/td&gt;
          &lt;td&gt;2022-12-22&lt;/td&gt;
          &lt;td&gt;[0 minutes, 60 minutes, 120 minutes, 180 minut...&lt;/td&gt;
          &lt;td&gt;[9.0, 8.0, 9.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, ...&lt;/td&gt;
          &lt;td&gt;[N, N, N, N, N, N, N, N, N, N, V, V, V, V, V, ...&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;th&gt;2&lt;/th&gt;
          &lt;td&gt;108&lt;/td&gt;
          &lt;td&gt;83&lt;/td&gt;
          &lt;td&gt;2022-12-22&lt;/td&gt;
          &lt;td&gt;[0 minutes, 60 minutes, 120 minutes, 180 minut...&lt;/td&gt;
          &lt;td&gt;[94.7, 97.6, 96.6, 97.5, 97.5, 98.2, 98.8, 98....&lt;/td&gt;
          &lt;td&gt;[N, N, N, N, N, N, N, N, N, N, V, V, V, V, V, ...&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id=&quot;6106b1c9&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;Finally, the remaining task involves expanding the table so that each
      element within the lists corresponds to a distinct row:&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;a185e603&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb28&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb28-1&quot;&gt;&lt;a href=&quot;#cb28-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;weather &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; kx.q.ungroup(weather)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;a8c59bd1&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;We can further streamline the table by eliminating rows that lack
      validity and merging the date with the time:&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;6f8524a6&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb29&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb29-1&quot;&gt;&lt;a href=&quot;#cb29-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;weather &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; kx.q.qsql.select(weather, where &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;valid=`V&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb29-2&quot;&gt;&lt;a href=&quot;#cb29-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;weather &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; kx.q.qsql.update(weather, columns &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;st&quot;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&amp;#39;date+hour&amp;#39;&lt;/span&gt;})&lt;/span&gt;
&lt;span id=&quot;cb29-3&quot;&gt;&lt;a href=&quot;#cb29-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;weather &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; kx.q.qsql.delete(weather, columns &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;&amp;quot;valid&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;hour&amp;quot;&lt;/span&gt;])&lt;/span&gt;
&lt;span id=&quot;cb29-4&quot;&gt;&lt;a href=&quot;#cb29-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;weather[:&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;].pd()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;margin&quot;&gt;
    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr style=&quot;text-align: right;&quot;&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;weather_station&lt;/th&gt;
          &lt;th&gt;magnitude&lt;/th&gt;
          &lt;th&gt;date&lt;/th&gt;
          &lt;th&gt;values&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;th&gt;0&lt;/th&gt;
          &lt;td&gt;108&lt;/td&gt;
          &lt;td&gt;81&lt;/td&gt;
          &lt;td&gt;2022-12-22 10:00:00&lt;/td&gt;
          &lt;td&gt;263.00&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;th&gt;1&lt;/th&gt;
          &lt;td&gt;108&lt;/td&gt;
          &lt;td&gt;81&lt;/td&gt;
          &lt;td&gt;2022-12-22 11:00:00&lt;/td&gt;
          &lt;td&gt;247.83&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;th&gt;2&lt;/th&gt;
          &lt;td&gt;108&lt;/td&gt;
          &lt;td&gt;81&lt;/td&gt;
          &lt;td&gt;2022-12-22 12:00:00&lt;/td&gt;
          &lt;td&gt;215.83&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id=&quot;fad6c8fa&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;The &lt;strong&gt;magnitude&lt;/strong&gt; column plays a pivotal role in
      attributing meaning to the &lt;strong&gt;value&lt;/strong&gt;. As outlined by the
      dataset creators, the diverse magnitudes align with the elements
      encapsulated within the following dictionary:&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;82b864cd&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb30&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb30-1&quot;&gt;&lt;a href=&quot;#cb30-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;magnitude &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;dv&quot;&gt;80&lt;/span&gt;:&lt;span class=&quot;st&quot;&gt;&amp;quot;ultraviolet&amp;quot;&lt;/span&gt;, &lt;/span&gt;
&lt;span id=&quot;cb30-2&quot;&gt;&lt;a href=&quot;#cb30-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;             &lt;span class=&quot;dv&quot;&gt;81&lt;/span&gt;:&lt;span class=&quot;st&quot;&gt;&amp;quot;wind&amp;quot;&lt;/span&gt;, &lt;/span&gt;
&lt;span id=&quot;cb30-3&quot;&gt;&lt;a href=&quot;#cb30-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;             &lt;span class=&quot;dv&quot;&gt;82&lt;/span&gt;:&lt;span class=&quot;st&quot;&gt;&amp;quot;direction&amp;quot;&lt;/span&gt;, &lt;/span&gt;
&lt;span id=&quot;cb30-4&quot;&gt;&lt;a href=&quot;#cb30-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;             &lt;span class=&quot;dv&quot;&gt;83&lt;/span&gt;:&lt;span class=&quot;st&quot;&gt;&amp;quot;temperature&amp;quot;&lt;/span&gt;, &lt;/span&gt;
&lt;span id=&quot;cb30-5&quot;&gt;&lt;a href=&quot;#cb30-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;             &lt;span class=&quot;dv&quot;&gt;86&lt;/span&gt;:&lt;span class=&quot;st&quot;&gt;&amp;quot;humidity&amp;quot;&lt;/span&gt;, &lt;/span&gt;
&lt;span id=&quot;cb30-6&quot;&gt;&lt;a href=&quot;#cb30-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;             &lt;span class=&quot;dv&quot;&gt;87&lt;/span&gt;:&lt;span class=&quot;st&quot;&gt;&amp;quot;pressure&amp;quot;&lt;/span&gt;, &lt;/span&gt;
&lt;span id=&quot;cb30-7&quot;&gt;&lt;a href=&quot;#cb30-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;             &lt;span class=&quot;dv&quot;&gt;88&lt;/span&gt;:&lt;span class=&quot;st&quot;&gt;&amp;quot;solar&amp;quot;&lt;/span&gt;, &lt;/span&gt;
&lt;span id=&quot;cb30-8&quot;&gt;&lt;a href=&quot;#cb30-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;             &lt;span class=&quot;dv&quot;&gt;89&lt;/span&gt;:&lt;span class=&quot;st&quot;&gt;&amp;quot;rainfall&amp;quot;&lt;/span&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;ab5dcabf&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;We just have to change the key by the value of the dictionary.&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;a13b5d47&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb31&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb31-1&quot;&gt;&lt;a href=&quot;#cb31-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;weather &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; kx.q(&lt;span class=&quot;st&quot;&gt;&amp;#39;{update magnitude: x magnitude from y}&amp;#39;&lt;/span&gt;, magnitude, weather)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;5c6a2bcd&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;Finally, all we have to do is separate the different weather
      conditions into different columns:&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;4bf369e1&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb32&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb32-1&quot;&gt;&lt;a href=&quot;#cb32-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;weather &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; kx.q(&lt;span class=&quot;st&quot;&gt;&amp;#39;{exec (value x)#magnitude!values by date,weather_station from y}&amp;#39;&lt;/span&gt;,magnitude,weather)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;b0fbd539&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;The &lt;code&gt;exec&lt;/code&gt; query provides us with the capability to
      transform a dictionary, stored within a column, into multiple columns.
      In this transformation, the keys become the column names, and the values
      constitute the data within those respective columns. This proves
      particularly beneficial when dealing with a dictionary that represents
      the weather conditions of each entry, linked with their respective
      values. By implementing this approach and subsequently grouping the
      data, we effectively disseminate the weather conditions across distinct
      columns for each weather entry and weather station.&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;0843ec62&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;alert alert-block alert-success&quot;
      style=&quot;background-color: #FFFFFF; border: 0px solid; padding: 0px;box-shadow: 2px 2px #3841459c; border-left: 3px solid #953eff;margin-left: 5%; margin-right: 5%; border-top: 3px solid #953eff&quot;&gt;
      &lt;div class=&quot;alert-header custom-card-header&quot; style=&quot;background-color: #fad5ff; color: black; padding: 10px;&quot;&gt;
        &lt;i class=&quot;fa fa-commenting&quot; aria-hidden=&quot;true&quot; style=&quot;color:#953eff&quot;&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;pandas Alternative:
        Weather Cleaning
      &lt;/div&gt;
      &lt;div style=&quot;background-color: #fbf1ff;  padding: 40px; padding-top:30px; padding-bottom:20px&quot;&gt;
        &lt;p
          style=&quot;color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;line-weight: 1.5&quot;&gt;
          This turned out to be a complex migration, since on pandas this &quot;flipping&quot; functionality is provided by
          &lt;code&gt;melt&lt;/code&gt;:
        &lt;/p&gt;
        &lt;code
          style=&quot;background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%;margin-bottom: 0px; color:black&quot;&gt; &gt;&gt;&gt; weather_hour = weather.melt(id_vars=[&quot;weather_station&quot;, &quot;magnitud&quot;, &quot;date&quot;],
                            value_vars=[x for x in weather.columns if re.match(&quot;^H&quot;, x)],
                            var_name=&quot;hour&quot;)
 &gt;&gt;&gt;  
 &gt;&gt;&gt; weather_valid = weather.melt(value_vars=[x for x in weather.columns if re.match(&quot;^V&quot;, x)], var_name=&quot;valid&quot;)
&lt;/code&gt;&lt;br&gt;
        &lt;p
          style=&quot;color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;line-weight: 1.5&quot;&gt;
          As for the subsequent operations, those turned more alike to the original pandas implementation: &lt;/p&gt;
        &lt;code
          style=&quot;background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%;margin-bottom: 0px; color:black&quot;&gt; &gt;&gt;&gt; weather= weather_hour[weather_valid[&quot;value&quot;] == &quot;V&quot;].reset_index()
 &gt;&gt;&gt; 
 &gt;&gt;&gt; weather[&quot;hour&quot;] = weather[&quot;hour&quot;].str[1:]
 &gt;&gt;&gt; weather[&quot;hour&quot;] = pd.to_timedelta(weather['hour'].astype(int)-1, unit='h')
 &gt;&gt;&gt; weather[&quot;date&quot;] = weather[&quot;date&quot;] + weather[&quot;hour&quot;]
 &gt;&gt;&gt; 
 &gt;&gt;&gt; weather_values = weather.assign(MAGNITUD = weather[&quot;magnitud&quot;].map({80:&quot;ultraviolet&quot;,
                         81:&quot;wind&quot;,
                         82:&quot;direction&quot;,
                         83:&quot;temperature&quot;,
                         86:&quot;humidity&quot;,
                         87:&quot;pressure&quot;,
                         88:&quot;solar&quot;,
                         89:&quot;rainfall&quot;})) \
                         .MAGNITUD.str.get_dummies() \
                         .multiply(weather[&quot;value&quot;], axis=&quot;index&quot;) 
 &gt;&gt;&gt; 
 &gt;&gt;&gt; weather = pd.concat([weather, weather_values], axis=1)
 &gt;&gt;&gt; weather = weather.drop([&quot;index&quot;, &quot;hour&quot;, &quot;magnitud&quot;, &quot;value&quot;], axis=1)
 &gt;&gt;&gt; weather = weather.groupby([&quot;date&quot;, &quot;weather_station&quot;]).sum().reset_index()
&lt;/code&gt;&lt;br&gt;
        &lt;p
          style=&quot;color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;line-weight: 1.5&quot;&gt;
          All in all, this table proved to be quite tricky with the migration, but nothing unmanageable. The rest of the
          migration was far simpler. Overall, we noticed again a 10x decrease in execution time, which we consider
          something remarkable. &lt;/p&gt;
        &lt;table&gt;
          &lt;tr style=&quot;background-color: #FFFFFF;&quot;&gt;
            &lt;th style=&quot;background-color: #fbf1ff;&quot;&gt;&lt;/th&gt;
            &lt;th style=&quot;background-color:#fbf1ff&quot;&gt;pandas Time&lt;/th&gt;
            &lt;th style=&quot;background-color:#fbf1ff&quot;&gt;PyKX Time&lt;/th&gt;
          &lt;/tr&gt;
          &lt;tr style=&quot;background-color:#fbf1ff; border-top: 1px solid #000000&quot;&gt;
            &lt;td&gt;Cleaning Weather&lt;/td&gt;
            &lt;td&gt;247 ms ± 10.4 ms&lt;/td&gt;
            &lt;td&gt;26.7 ms ± 683 µs&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/table&gt;&lt;br&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;eb89abd3&quot; class=&quot;margin&quot;&gt;
    &lt;h4 id=&quot;location&quot;&gt;Location&lt;/h4&gt;
  &lt;/div&gt;
  &lt;div id=&quot;677a023c&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;Both traffic and weather station tables will be loaded into the q
      memory space:&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;d2445911&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb33&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb33-1&quot;&gt;&lt;a href=&quot;#cb33-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;kx.q[&lt;span class=&quot;st&quot;&gt;&amp;quot;weather_station&amp;quot;&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; kx.q(&lt;span class=&quot;st&quot;&gt;&amp;quot;.Q.id&amp;quot;&lt;/span&gt;, kx.q.read.csv(&lt;span class=&quot;st&quot;&gt;&amp;#39;../Estaciones_control_datos_meteorologicos.csv&amp;#39;&lt;/span&gt;, types&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot; IFF&amp;quot;&lt;/span&gt;, delimiter&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;;&amp;quot;&lt;/span&gt;, as_table&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&quot;cb33-2&quot;&gt;&lt;a href=&quot;#cb33-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;kx.q[&lt;span class=&quot;st&quot;&gt;&amp;quot;traffic_station&amp;quot;&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; kx.q.read.csv(&lt;span class=&quot;st&quot;&gt;&amp;#39;../pmed_ubicacion_12-2022.csv&amp;#39;&lt;/span&gt;, types &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;SII**FFFF&amp;quot;&lt;/span&gt;, delimiter &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;;&amp;quot;&lt;/span&gt;, as_table&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;33b3c09d&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;We are now able to access these objects within q functions without
      the necessity of passing them as PyKX or Python objects. To illustrate,
      let's proceed to modify the column names in both tables in order to
      establish a uniform naming convention:&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;6c5a3528&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb34&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb34-1&quot;&gt;&lt;a href=&quot;#cb34-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;kx.q(&lt;span class=&quot;st&quot;&gt;&amp;quot;weather_station:(`CDIGO_CORTO`LONGITUD`LATITUD!`weather_station`longitude`latitude) xcol weather_station&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb34-2&quot;&gt;&lt;a href=&quot;#cb34-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;_&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;kx.q(&lt;span class=&quot;st&quot;&gt;&amp;quot;traffic_station:(`id`longitud`latitud!`traffic_station`longitude`latitude) xcol traffic_station&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;0cbf1e72&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;alert alert-block alert-success&quot;
      style=&quot;background-color: #FFFFFF; border: 0px solid; padding: 0px;box-shadow: 2px 2px #3841459c; border-left: 3px solid #00b100;margin-left: 5%; margin-right: 5%; border-top: 3px solid #00b100&quot;&gt;
      &lt;div class=&quot;alert-header custom-card-header&quot;
        style=&quot;background-color: #d8ffd8; border: 1px solid #d8ffd8; color: black; padding: 10px;&quot;&gt;
        &lt;i class=&quot;fa fa-commenting&quot; aria-hidden=&quot;true&quot; style=&quot;color:#00b100&quot;&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Further Information
        on Using &lt;a
          href=&quot;https://code.kx.com/pykx/1.6/user-guide/fundamentals/creating.html#by-retrieving-a-named-entity-from-qs-memory&quot;&gt;Q
          memory space&lt;/a&gt;
      &lt;/div&gt;
      &lt;div style=&quot;background-color: #e5ffdf70;  padding: 40px; padding-top:30px; padding-bottom:20px; &quot;&gt;
        &lt;p
          style=&quot;color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px; line-weight: 1.5&quot;&gt;
          If you feel more comfortable programming in q, you have the option to operate within the q memory space. PyKX
          objects can be seamlessly transferred into the q memory space, where you can manipulate them as if you were
          operating within a q ecosystem, employing the following code: &lt;code&gt;kx.q[&quot;table&quot;]&lt;/code&gt;. Once you've
          completed your operations, you can effortlessly bring them back to the Python memory space by returning them
          using q code: &lt;code&gt;kx.q(&quot;table&quot;)&lt;/code&gt;&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;d9cb6e86&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;Our objective is to merge these two tables. Currently, there appears
      to be no identifier that readily facilitates a conventional join.
      Nevertheless, it's worth noting that both the weather and traffic
      stations are situated by coordinates. We can exploit the spatial
      proximity between stations designated for measuring traffic and weather
      to facilitate the join. To compute the distance between two sets of
      coordinates, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Haversine_formula&quot;&gt;Harvesine
        distance&lt;/a&gt; as previously discussed, can be employed. It's important to
      acknowledge that while this distance function is readily available in
      Python, it is not natively accessible within q.&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;0a71c287&quot; class=&quot;margin&quot; data-scrolled=&quot;true&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb35&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb35-1&quot;&gt;&lt;a href=&quot;#cb35-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;pip install haversine&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;2070e874&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;One potential approach would involve re-implementing the Haversine
      distance function in q. However, this might become impractical for more
      complex libraries. Alternatively, although slower, we could transmit our
      q objects to Python and work with them there. Nonetheless, it's strongly
      recommended to avoid switching objects between q and Python. However,
      the data we had to move between memory spaces wasn't very large (and we
      were careful about this) and we didn't see any noticeable drop in
      performance.&lt;/p&gt;
    &lt;p&gt;The features we've elucidated earlier, allowing us to transition
      between Python and q objects, empower us to temporarily reuse Python
      code. This is particularly pertinent given the scale of tables we are
      currently dealing with. To incorporate our q objects into this function,
      we can use certain PyKX tools to convert them into Python
      objects:&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;05afc748&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb36&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb36-1&quot;&gt;&lt;a href=&quot;#cb36-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; haversine &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; haversine_vector, Unit&lt;/span&gt;
&lt;span id=&quot;cb36-2&quot;&gt;&lt;a href=&quot;#cb36-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;dist &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; kx.toq(&lt;/span&gt;
&lt;span id=&quot;cb36-3&quot;&gt;&lt;a href=&quot;#cb36-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;            haversine_vector(kx.q(&lt;span class=&quot;st&quot;&gt;&amp;#39;`longitude`latitude # weather_station&amp;#39;&lt;/span&gt;).pd(), &lt;/span&gt;
&lt;span id=&quot;cb36-4&quot;&gt;&lt;a href=&quot;#cb36-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                             kx.q(&lt;span class=&quot;st&quot;&gt;&amp;#39;`longitude`latitude # traffic_station&amp;#39;&lt;/span&gt;).pd(),&lt;/span&gt;
&lt;span id=&quot;cb36-5&quot;&gt;&lt;a href=&quot;#cb36-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                             Unit.KILOMETERS, comb&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;True&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;d9877b87&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;We've reached a point where we have a matrix detailing the distance
      in kilometers for every combination of traffic and weather stations. Our
      upcoming task is to pinpoint pairs of station identifiers that exhibit
      the minimum distance:&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;0c51ae77&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb37&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb37-1&quot;&gt;&lt;a href=&quot;#cb37-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;ids &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; kx.q.each(kx.q(&lt;span class=&quot;st&quot;&gt;&amp;#39;{x?min x}&amp;#39;&lt;/span&gt;), dist)&lt;/span&gt;
&lt;span id=&quot;cb37-2&quot;&gt;&lt;a href=&quot;#cb37-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;distance_table &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; kx.q(&lt;span class=&quot;st&quot;&gt;&amp;#39;{traffic_station ^ weather_station[x]}&amp;#39;&lt;/span&gt; ,  ids)&lt;/span&gt;
&lt;span id=&quot;cb37-3&quot;&gt;&lt;a href=&quot;#cb37-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;distance_table &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; kx.q.qsql.delete(distance_table, columns &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;st&quot;&gt;&amp;#39;tipo_elem&amp;#39;&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&amp;#39;distrito&amp;#39;&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&amp;#39;cod_cent&amp;#39;&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&amp;#39;nombre&amp;#39;&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&amp;#39;utm_x&amp;#39;&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&amp;#39;utm_y&amp;#39;&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&amp;#39;longitude&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;latitude&amp;#39;&lt;/span&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;6c6e5673&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;With this we have a mapping that relates every traffic station to its
      nearest weather station:&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;7203140e&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb38&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb38-1&quot;&gt;&lt;a href=&quot;#cb38-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;distance_table[:&lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;].pd()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;margin&quot;&gt;
    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr style=&quot;text-align: right;&quot;&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;traffic_station&lt;/th&gt;
          &lt;th&gt;weather_station&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;th&gt;0&lt;/th&gt;
          &lt;td&gt;3840&lt;/td&gt;
          &lt;td&gt;109&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;th&gt;1&lt;/th&gt;
          &lt;td&gt;3841&lt;/td&gt;
          &lt;td&gt;109&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;th&gt;2&lt;/th&gt;
          &lt;td&gt;3842&lt;/td&gt;
          &lt;td&gt;8&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id=&quot;c3c54e13&quot; class=&quot;margin&quot;&gt;
    &lt;h4 id=&quot;final-table&quot;&gt;Final Table&lt;/h4&gt;
  &lt;/div&gt;
  &lt;div id=&quot;950da21d&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;Integrating the three tables is a relatively straightforward process.
      The distances table can be seamlessly merged with either of the other
      two using a simple left join. However, when joining the traffic and
      weather tables, an asof join (&lt;code&gt;aj&lt;/code&gt;) is necessary due to their
      disparate time intervals. To conclude, two columns, time and day of the
      week, should be appended to furnish the model with the data's inherent
      seasonality:&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;05a17234&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb39&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb39-1&quot;&gt;&lt;a href=&quot;#cb39-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;complete &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; kx.q.lj(traffic, kx.q.xkey(&lt;span class=&quot;st&quot;&gt;&amp;#39;traffic_station&amp;#39;&lt;/span&gt;, distance_table))&lt;/span&gt;
&lt;span id=&quot;cb39-2&quot;&gt;&lt;a href=&quot;#cb39-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;complete &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; kx.q.aj(kx.toq([&lt;span class=&quot;st&quot;&gt;&amp;#39;date&amp;#39;&lt;/span&gt;,&lt;span class=&quot;st&quot;&gt;&amp;#39;weather_station&amp;#39;&lt;/span&gt;]), complete, weather)&lt;/span&gt;
&lt;span id=&quot;cb39-3&quot;&gt;&lt;a href=&quot;#cb39-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;complete &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; kx.q.qsql.update(kx.q(&lt;span class=&quot;st&quot;&gt;&amp;quot;0^&amp;quot;&lt;/span&gt;,complete),  {&lt;span class=&quot;st&quot;&gt;&amp;quot;hour&amp;quot;&lt;/span&gt;:&lt;span class=&quot;st&quot;&gt;&amp;quot;`hh$date&amp;quot;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;quot;weekday&amp;quot;&lt;/span&gt;:&lt;span class=&quot;st&quot;&gt;&amp;#39;(&amp;quot;d&amp;quot;$date)mod 7&amp;#39;&lt;/span&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;3d1630b6&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;Let's look at this last table:&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;92446f46&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb40&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb40-1&quot;&gt;&lt;a href=&quot;#cb40-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;kx.q.sublist(&lt;span class=&quot;st&quot;&gt;3&lt;/span&gt;,complete).pd()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;margin&quot;&gt;
    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr style=&quot;text-align: right;&quot;&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;traffic_load&lt;/th&gt;
          &lt;th&gt;weather_station&lt;/th&gt;
          &lt;th&gt;ultraviolet&lt;/th&gt;
          &lt;th&gt;wind&lt;/th&gt;
          &lt;th&gt;direction&lt;/th&gt;
          &lt;th&gt;temperature&lt;/th&gt;
          &lt;th&gt;humidity&lt;/th&gt;
          &lt;th&gt;pressure&lt;/th&gt;
          &lt;th&gt;solar&lt;/th&gt;
          &lt;th&gt;rainfall&lt;/th&gt;
          &lt;th&gt;hour&lt;/th&gt;
          &lt;th&gt;weekday&lt;/th&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;th&gt;date&lt;/th&gt;
          &lt;th&gt;traffic_station&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;th rowspan=&quot;5&quot; valign=&quot;top&quot;&gt;2022-12-01&lt;/th&gt;
          &lt;th&gt;1001&lt;/th&gt;
          &lt;td&gt;0.0&lt;/td&gt;
          &lt;td&gt;24&lt;/td&gt;
          &lt;td&gt;0.0&lt;/td&gt;
          &lt;td&gt;0.54&lt;/td&gt;
          &lt;td&gt;239.0&lt;/td&gt;
          &lt;td&gt;6.0&lt;/td&gt;
          &lt;td&gt;84.0&lt;/td&gt;
          &lt;td&gt;946.0&lt;/td&gt;
          &lt;td&gt;1.0&lt;/td&gt;
          &lt;td&gt;0.0&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;5&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;th&gt;1002&lt;/th&gt;
          &lt;td&gt;0.0&lt;/td&gt;
          &lt;td&gt;24&lt;/td&gt;
          &lt;td&gt;0.0&lt;/td&gt;
          &lt;td&gt;0.54&lt;/td&gt;
          &lt;td&gt;239.0&lt;/td&gt;
          &lt;td&gt;6.0&lt;/td&gt;
          &lt;td&gt;84.0&lt;/td&gt;
          &lt;td&gt;946.0&lt;/td&gt;
          &lt;td&gt;1.0&lt;/td&gt;
          &lt;td&gt;0.0&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;5&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;th&gt;1003&lt;/th&gt;
          &lt;td&gt;0.0&lt;/td&gt;
          &lt;td&gt;24&lt;/td&gt;
          &lt;td&gt;0.0&lt;/td&gt;
          &lt;td&gt;0.54&lt;/td&gt;
          &lt;td&gt;239.0&lt;/td&gt;
          &lt;td&gt;6.0&lt;/td&gt;
          &lt;td&gt;84.0&lt;/td&gt;
          &lt;td&gt;946.0&lt;/td&gt;
          &lt;td&gt;1.0&lt;/td&gt;
          &lt;td&gt;0.0&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;5&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;th&gt;1006&lt;/th&gt;
          &lt;td&gt;0.0&lt;/td&gt;
          &lt;td&gt;24&lt;/td&gt;
          &lt;td&gt;0.0&lt;/td&gt;
          &lt;td&gt;0.54&lt;/td&gt;
          &lt;td&gt;239.0&lt;/td&gt;
          &lt;td&gt;6.0&lt;/td&gt;
          &lt;td&gt;84.0&lt;/td&gt;
          &lt;td&gt;946.0&lt;/td&gt;
          &lt;td&gt;1.0&lt;/td&gt;
          &lt;td&gt;0.0&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;5&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;th&gt;1009&lt;/th&gt;
          &lt;td&gt;0.0&lt;/td&gt;
          &lt;td&gt;110&lt;/td&gt;
          &lt;td&gt;0.0&lt;/td&gt;
          &lt;td&gt;0.35&lt;/td&gt;
          &lt;td&gt;2.0&lt;/td&gt;
          &lt;td&gt;7.9&lt;/td&gt;
          &lt;td&gt;79.0&lt;/td&gt;
          &lt;td&gt;937.0&lt;/td&gt;
          &lt;td&gt;1.0&lt;/td&gt;
          &lt;td&gt;0.0&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;5&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;div id=&quot;2998c540&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;alert alert-block alert-success&quot;
      style=&quot;background-color: #FFFFFF; border: 0px solid; padding: 0px;box-shadow: 2px 2px #3841459c; border-left: 3px solid #953eff;margin-left: 5%; margin-right: 5%; border-top: 3px solid #953eff&quot;&gt;
      &lt;div class=&quot;alert-header custom-card-header&quot; style=&quot;background-color: #fad5ff; color: black; padding: 10px;&quot;&gt;
        &lt;i class=&quot;fa fa-commenting&quot; aria-hidden=&quot;true&quot; style=&quot;color:#953eff&quot;&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;pandas Alternative:
        Final table
      &lt;/div&gt;
      &lt;div style=&quot;background-color: #fbf1ff;  padding: 40px; padding-top:30px; padding-bottom:20px&quot;&gt;
        &lt;p
          style=&quot;color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;line-weight: 1.5&quot;&gt;
          This is another bottleneck we encountered on our profiling. On pandas, the code looked kind of similar, with a
          simple join and an asof join: &lt;/p&gt;
        &lt;code
          style=&quot;background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%;margin-bottom: 0px; color:black&quot;&gt; &gt;&gt;&gt; complete = traffic.merge(distance_table, on=[&quot;traffic_station&quot;], how=&quot;inner&quot;)
&gt;&gt;&gt; complete = pd.merge_asof(complete.sort_values([&quot;date&quot;]), weather, on='date', by=[&quot;weather_station&quot;])
&lt;/code&gt;&lt;br&gt;
        &lt;p
          style=&quot;color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;line-weight: 1.5&quot;&gt;
          However we once again noticed a 10x reduction in execution time: &lt;/p&gt;
        &lt;table&gt;
          &lt;tr style=&quot;background-color: #FFFFFF;&quot;&gt;
            &lt;th style=&quot;background-color: #fbf1ff;&quot;&gt;&lt;/th&gt;
            &lt;th style=&quot;background-color:#fbf1ff&quot;&gt;pandas Time&lt;/th&gt;
            &lt;th style=&quot;background-color:#fbf1ff&quot;&gt;PyKX Time&lt;/th&gt;
          &lt;/tr&gt;
          &lt;tr style=&quot;border-top: 1px solid #000000&quot;&gt;
            &lt;td&gt;Join Final Table&lt;/td&gt;
            &lt;td&gt;7.1 s ± 168 ms&lt;/td&gt;
            &lt;td&gt;686 ms ± 24.1 ms&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/table&gt;&lt;br&gt;
        &lt;p
          style=&quot;color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;line-weight: 1.5&quot;&gt;
          This improvement is most likely due to performance benefits when using kdb, as it's optimized for time series
          data and the asof join, which is where most of this performance gain came from.&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;beeeaf88&quot; class=&quot;margin&quot;&gt;
    &lt;h3 id=&quot;model-&quot;&gt;Model &lt;a class=&quot;anchor&quot; id=&quot;t32&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
  &lt;/div&gt;
  &lt;div id=&quot;b55416f8&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;For the model's input, we chose to cherry-pick only the essential
      columns. Moreover, we apply normalization to the rainfall column using a
      straightforward MinMax scaler. This function can be included within the
      q memory space, ready for use whenever necessary:&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;5aa1100f&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb41&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb41-1&quot;&gt;&lt;a href=&quot;#cb41-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;kx.q(&lt;span class=&quot;st&quot;&gt;&amp;quot;minMaxScale:{[l] {(x-y)%(z-y)}[;min l;max l]l}&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb41-2&quot;&gt;&lt;a href=&quot;#cb41-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                  &lt;/span&gt;
&lt;span id=&quot;cb41-3&quot;&gt;&lt;a href=&quot;#cb41-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;final &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; kx.q.qsql.select(complete, columns &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; {&lt;span class=&quot;st&quot;&gt;&amp;quot;date&amp;quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&amp;quot;date&amp;quot;&lt;/span&gt;,&lt;/span&gt;
&lt;span id=&quot;cb41-4&quot;&gt;&lt;a href=&quot;#cb41-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                                              &lt;span class=&quot;st&quot;&gt;&amp;quot;traffic_station&amp;quot;&lt;/span&gt;:&lt;span class=&quot;st&quot;&gt;&amp;quot;traffic_station&amp;quot;&lt;/span&gt;,&lt;/span&gt;
&lt;span id=&quot;cb41-5&quot;&gt;&lt;a href=&quot;#cb41-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                                              &lt;span class=&quot;st&quot;&gt;&amp;quot;hour&amp;quot;&lt;/span&gt;:&lt;span class=&quot;st&quot;&gt;&amp;quot;hour&amp;quot;&lt;/span&gt;, &lt;/span&gt;
&lt;span id=&quot;cb41-6&quot;&gt;&lt;a href=&quot;#cb41-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                                              &lt;span class=&quot;st&quot;&gt;&amp;quot;weekday&amp;quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&amp;quot;weekday&amp;quot;&lt;/span&gt;, &lt;/span&gt;
&lt;span id=&quot;cb41-7&quot;&gt;&lt;a href=&quot;#cb41-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                                              &lt;span class=&quot;st&quot;&gt;&amp;quot;traffic_load&amp;quot;&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&amp;quot;traffic_load%100&amp;quot;&lt;/span&gt;,&lt;/span&gt;
&lt;span id=&quot;cb41-8&quot;&gt;&lt;a href=&quot;#cb41-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                                              &lt;span class=&quot;st&quot;&gt;&amp;quot;rainfall&amp;quot;&lt;/span&gt;:&lt;span class=&quot;st&quot;&gt;&amp;quot;minMaxScale rainfall&amp;quot;&lt;/span&gt;}&lt;/span&gt;
&lt;span id=&quot;cb41-9&quot;&gt;&lt;a href=&quot;#cb41-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                                    )&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;7e591be5&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;Throughout this transition from pandas, the primary challenge emerged
      while migrating the &lt;code&gt;time_window&lt;/code&gt; function, given its
      reliance on loops. Our approach involved first comprehending the input
      data, defining the desired output, and then formulating an idiomatic q
      implementation rather than a direct 1:1 migration. This method proved
      more time-efficient.&lt;/p&gt;
    &lt;p&gt;In this scenario, our input consisted of a table, and our desired
      output was a list of matrices for each station. To facilitate this
      process, we devised multiple functions that proved invaluable:&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;2896fa4f&quot; class=&quot;margin&quot;&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;sliding window&lt;/strong&gt;: given a matrix, x, divides it into
        chunks of length y:&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;e6b89595&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb42&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb42-1&quot;&gt;&lt;a href=&quot;#cb42-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;_&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;kx.q(&lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;quot;&amp;quot;sw:{({y#z _x}[x;y;]&amp;#39;)til count b:y _x}&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;052906f8&quot; class=&quot;margin&quot;&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;get target&lt;/strong&gt;: For a given matrix, x, it takes the
        target located in the column z and the first lines are eliminated to
        match with the chunks length y:&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;c96ce3a1&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb43&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb43-1&quot;&gt;&lt;a href=&quot;#cb43-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;_&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;kx.q(&lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;quot;&amp;quot;gt:{y _(flip x)[z]}&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;# gets target (in position z)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;4ac8947b&quot; class=&quot;margin&quot;&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;to Matrix&lt;/strong&gt;: Transform the table x to a matrix:&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;fc8fb88f&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb44&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb44-1&quot;&gt;&lt;a href=&quot;#cb44-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;_&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;kx.q(&lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;quot;&amp;quot;toMatrix:{({[t;i]value t[i]}[x;]&amp;#39;)til count x:flip x}&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;) &lt;span class=&quot;co&quot;&gt;# table to matrix&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;b6201cbf&quot; class=&quot;margin&quot;&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;prepareData&lt;/strong&gt;: This function is designed to create
          the training and testing datasets. It begins by selecting the necessary
          columns (&lt;code&gt;columns&lt;/code&gt;) from the table, grouped by traffic
          station. For each traffic station, it retains &lt;code&gt;ntest&lt;/code&gt; rows
          for testing purposes. The data is divided into chunks of length
          &lt;code&gt;chunkLen&lt;/code&gt;. Finally, the function constructs a list of
          dictionaries for training data and training targets (the load column),
          as well as test data and test targets.
        &lt;/p&gt;
        &lt;p&gt;To start, regardless of whether we require the training or testing
          output, we must retrieve either the last &lt;code&gt;ntest&lt;/code&gt; records or
          up to the last &lt;code&gt;ntest&lt;/code&gt; records. Given the necessity of
          performing this operation for the designated columns, a functional
          statement emerged as the most suitable approach.&lt;/p&gt;
        &lt;p&gt;Once we've molded the data to align with our requirements, the
          subsequent step involves constructing the list of matrices. Achieving
          this entails employing a sliding window approach. In order to return a
          list of matrices, rather than a list of tables, we used the
          &lt;code&gt;toMatrix&lt;/code&gt; function, which facilitates the transformation of
          a table into a matrix. Additionally, we useed the &lt;code&gt;sw&lt;/code&gt;
          (sliding window) function to apply the sliding window concept to a
          singular large matrix.
        &lt;/p&gt;
        &lt;p&gt;In terms of the y data, we enlisted the &lt;code&gt;gt&lt;/code&gt; (get target)
          function. This function retrieves the target data (traffic load), with
          the exclusion of the first &lt;code&gt;chunkLen+1&lt;/code&gt; entries.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;41197b18&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb45&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb45-1&quot;&gt;&lt;a href=&quot;#cb45-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;_&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;kx.q(&lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb45-2&quot;&gt;&lt;a href=&quot;#cb45-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;st&quot;&gt;        prepareData:{[data; ntest; chunkLen; columns; locTarget]  &lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb45-3&quot;&gt;&lt;a href=&quot;#cb45-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;st&quot;&gt;            train:(toMatrix&amp;#39;)?[data;();`traffic_station;columns!({(y;(-;(count;x);z);x)}[;_;ntest]&amp;#39;)columns]; &lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb45-4&quot;&gt;&lt;a href=&quot;#cb45-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;st&quot;&gt;            test:(toMatrix&amp;#39;)?[data;();`traffic_station;columns!({(y;(-;(count;x);z);x)}[;#;ntest]&amp;#39;)columns];                                                                               &lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb45-5&quot;&gt;&lt;a href=&quot;#cb45-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;st&quot;&gt;            (((sw[;chunkLen]&amp;#39;)test;(gt[;chunkLen;locTarget]&amp;#39;)test);((sw[;chunkLen]&amp;#39;)train;(gt[;chunkLen;locTarget]&amp;#39;)train))   &lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb45-6&quot;&gt;&lt;a href=&quot;#cb45-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;st&quot;&gt;        }&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb45-7&quot;&gt;&lt;a href=&quot;#cb45-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;st&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;570c36b5&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;Lets test this function in action with only one station:&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;04456bab&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb46&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb46-1&quot;&gt;&lt;a href=&quot;#cb46-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;
&lt;span id=&quot;cb46-2&quot;&gt;&lt;a href=&quot;#cb46-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb46-3&quot;&gt;&lt;a href=&quot;#cb46-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;station_id &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4010&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb46-4&quot;&gt;&lt;a href=&quot;#cb46-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb46-5&quot;&gt;&lt;a href=&quot;#cb46-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;station &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; kx.q.qsql.select(final, where&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;st&quot;&gt;&amp;quot;traffic_station=&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;bu&quot;&gt;str&lt;/span&gt;(station_id)])&lt;/span&gt;
&lt;span id=&quot;cb46-6&quot;&gt;&lt;a href=&quot;#cb46-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb46-7&quot;&gt;&lt;a href=&quot;#cb46-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;data &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; kx.q(&lt;span class=&quot;st&quot;&gt;&amp;quot;prepareData&amp;quot;&lt;/span&gt;, station, &lt;span class=&quot;dv&quot;&gt;500&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;5&lt;/span&gt;, kx.SymbolVector([&lt;span class=&quot;st&quot;&gt;&amp;#39;rainfall&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;traffic_load&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;hour&amp;#39;&lt;/span&gt;, &lt;span class=&quot;st&quot;&gt;&amp;#39;weekday&amp;#39;&lt;/span&gt;]), &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb46-8&quot;&gt;&lt;a href=&quot;#cb46-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb46-9&quot;&gt;&lt;a href=&quot;#cb46-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;X_train, y_train &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; np.array(data[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;][station_id].py()), np.array(data[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;][station_id].py())&lt;/span&gt;
&lt;span id=&quot;cb46-10&quot;&gt;&lt;a href=&quot;#cb46-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;X_test, y_test &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;  np.array(data[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;][station_id].py()), np.array(data[&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;][&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;][station_id].py())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;57a4e81b&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;alert alert-block alert-success&quot;
      style=&quot;background-color: #FFFFFF; border: 0px solid; padding: 0px;box-shadow: 2px 2px #3841459c; border-left: 3px solid #953eff;margin-left: 5%; margin-right: 5%; border-top: 3px solid #953eff&quot;&gt;
      &lt;div class=&quot;alert-header custom-card-header&quot; style=&quot;background-color: #fad5ff; color: black; padding: 10px;&quot;&gt;
        &lt;i class=&quot;fa fa-commenting&quot; aria-hidden=&quot;true&quot; style=&quot;color:#953eff&quot;&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;pandas Alternative:
        Model Ingestion
      &lt;/div&gt;
      &lt;div style=&quot;background-color: #fbf1ff;  padding: 40px; padding-top:30px; padding-bottom:20px&quot;&gt;
        &lt;p
          style=&quot;color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;line-weight: 1.5&quot;&gt;
          This is the last bottleneck we ran into while doing our profiling. We used the Python Sklearn MinMax scaler
          for this. &lt;/p&gt; &lt;code
          style=&quot;background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%;margin-bottom: 0px; color:black&quot;&gt; &gt;&gt;&gt; from sklearn.preprocessing import MinMaxScaler
 &gt;&gt;&gt; final_table[&quot;load&quot;]/=100
 &gt;&gt;&gt; final_table[&quot;rainfall&quot;] = MinMaxScaler().fit_transform(final_table[&quot;rainfall&quot;]) 
&lt;/code&gt;&lt;br&gt;
        &lt;p
          style=&quot;color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;line-weight: 1.5&quot;&gt;
          We also created a custom function to make those 5-step back chunks for a particular station: &lt;/p&gt;
        &lt;code
          style=&quot;background-color: #eee;border: 1px solid #999;display: block;padding: 10px;margin-left: 8%;margin-right: 10%;margin-bottom: 0px; color:black&quot;&gt;
 &gt;&gt;&gt; &lt;div style=&quot;color:#007979;display:inline;&quot;&gt;# Table Index: Load -&gt; 2, Rainfall -&gt; 7, Hour -&gt; 11, Weekday -&gt; 12 &lt;/div&gt;
 &gt;&gt;&gt; 
 &gt;&gt;&gt; &lt;div style=&quot;color:#007979;display:inline;&quot;&gt;# Assign to each traffic station an array with the target column and the training information&lt;/div&gt;
 &gt;&gt;&gt; 
 &gt;&gt;&gt; train = final_table.groupby('traffic_station').apply(lambda x: np.array(x[:500])[:,[2,7,11,12]].astype(float))
 &gt;&gt;&gt; test  = final_table.groupby('traffic_station').apply(lambda x: np.array(x[500:])[:,[2,7,11,12]].astype(float))
 &gt;&gt;&gt; 
 &gt;&gt;&gt; &lt;div style=&quot;color:#007979;display:inline;&quot;&gt;# Crete 5 step back chunks &lt;/div&gt;
 &gt;&gt;&gt; def time_window(traffic_station, dataset, look_back=5):
 &gt;&gt;&gt;         data_X,  data_y= [], []
 &gt;&gt;&gt;         station_data = dataset[traffic_station]
 &gt;&gt;&gt;         for i in range(len(station_data)-look_back-1):
 &gt;&gt;&gt;             data_X.append(station_data[i:(i+look_back)])
 &gt;&gt;&gt;             data_y.append(station_data[i+look_back+1, 2])
 &gt;&gt;&gt;         return np.array(data_X), np.array(data_y)
 &gt;&gt;&gt; 
 &gt;&gt;&gt; train_X, train_y = create_dataset(train)
 &gt;&gt;&gt; test_X, test_y = create_dataset(test)
&lt;/code&gt;&lt;br&gt;
        &lt;p
          style=&quot;color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px;line-weight: 1.5&quot;&gt;
          In this final test, we once again notice a huge time improvement:&lt;/p&gt;
        &lt;table&gt;
          &lt;tr style=&quot;background-color: #FFFFFF;&quot;&gt;
            &lt;th style=&quot;background-color: #fbf1ff;&quot;&gt;&lt;/th&gt;
            &lt;th style=&quot;background-color:#fbf1ff&quot;&gt;pandas Time&lt;/th&gt;
            &lt;th style=&quot;background-color:#fbf1ff&quot;&gt;PyKX Time&lt;/th&gt;
          &lt;/tr&gt;
          &lt;tr style=&quot;border-top: 1px solid #000000&quot;&gt;
            &lt;td&gt;Model Ingestion Preprocess&lt;/td&gt;
            &lt;td&gt;3.2 s ± 54.2 ms&lt;/td&gt;
            &lt;td&gt;178 ms ± 8.01 ms&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/table&gt;&lt;br&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;p&gt;That wraps up our migration to PyKX. Next, we proceed to confirm that
      the model is working as intended with the data we acquired through
      PyKX.&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;026e5435&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;Firstly, we install Tensorflow:&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;9a27de1d&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb47&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb47-1&quot;&gt;&lt;a href=&quot;#cb47-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;pip install tensorflow&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;d2f380aa&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;And now we create and train a simple LSTM model:&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;efbe9b8c&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb48&quot;&gt;
      &lt;pre
        class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb48-1&quot;&gt;&lt;a href=&quot;#cb48-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; keras.models &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Sequential&lt;/span&gt;
&lt;span id=&quot;cb48-2&quot;&gt;&lt;a href=&quot;#cb48-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; keras.layers &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Dense,LSTM &lt;/span&gt;
&lt;span id=&quot;cb48-3&quot;&gt;&lt;a href=&quot;#cb48-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb48-4&quot;&gt;&lt;a href=&quot;#cb48-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;model &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; Sequential()&lt;/span&gt;
&lt;span id=&quot;cb48-5&quot;&gt;&lt;a href=&quot;#cb48-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;model.add(LSTM(units &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;, return_sequences&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;, input_shape&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;[&lt;span class=&quot;va&quot;&gt;None&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;]))&lt;/span&gt;
&lt;span id=&quot;cb48-6&quot;&gt;&lt;a href=&quot;#cb48-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;model.add(Dense(units &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id=&quot;cb48-7&quot;&gt;&lt;a href=&quot;#cb48-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;model.&lt;span class=&quot;bu&quot;&gt;compile&lt;/span&gt;(loss&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;#39;mae&amp;#39;&lt;/span&gt;, optimizer&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;#39;adam&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb48-8&quot;&gt;&lt;a href=&quot;#cb48-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb48-9&quot;&gt;&lt;a href=&quot;#cb48-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; fit(train_X, train_y, test_X, test_y):&lt;/span&gt;
&lt;span id=&quot;cb48-10&quot;&gt;&lt;a href=&quot;#cb48-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; model.fit(train_X, train_y, &lt;/span&gt;
&lt;span id=&quot;cb48-11&quot;&gt;&lt;a href=&quot;#cb48-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                    epochs&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;50&lt;/span&gt;, batch_size&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;8&lt;/span&gt;, &lt;/span&gt;
&lt;span id=&quot;cb48-12&quot;&gt;&lt;a href=&quot;#cb48-12&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                    validation_data&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;(test_X, test_y), &lt;/span&gt;
&lt;span id=&quot;cb48-13&quot;&gt;&lt;a href=&quot;#cb48-13&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;                    verbose&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;, shuffle&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;va&quot;&gt;False&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb48-14&quot;&gt;&lt;a href=&quot;#cb48-14&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb48-15&quot;&gt;&lt;a href=&quot;#cb48-15&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb48-16&quot;&gt;&lt;a href=&quot;#cb48-16&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; predict(data):&lt;/span&gt;
&lt;span id=&quot;cb48-17&quot;&gt;&lt;a href=&quot;#cb48-17&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;    &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; model.predict(data, verbose&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;792f6f32&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;Now we can observe the loss curves for both training and validation
      over epochs.&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;d90d7ee4&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb49&quot;&gt;
      &lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb49-1&quot;&gt;&lt;a href=&quot;#cb49-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; plt&lt;/span&gt;
&lt;span id=&quot;cb49-2&quot;&gt;&lt;a href=&quot;#cb49-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb49-3&quot;&gt;&lt;a href=&quot;#cb49-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;history &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; fit(X_train,y_train,X_test,y_test)&lt;/span&gt;
&lt;span id=&quot;cb49-4&quot;&gt;&lt;a href=&quot;#cb49-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb49-5&quot;&gt;&lt;a href=&quot;#cb49-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;plt.plot(history.history[&lt;span class=&quot;st&quot;&gt;&amp;#39;loss&amp;#39;&lt;/span&gt;], label&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;#39;train&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb49-6&quot;&gt;&lt;a href=&quot;#cb49-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;plt.plot(history.history[&lt;span class=&quot;st&quot;&gt;&amp;#39;val_loss&amp;#39;&lt;/span&gt;], label&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;#39;validation&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb49-7&quot;&gt;&lt;a href=&quot;#cb49-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id=&quot;cb49-8&quot;&gt;&lt;a href=&quot;#cb49-8&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;plt.title(&lt;span class=&quot;st&quot;&gt;&amp;quot;Train and Validation Loss Curves&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb49-9&quot;&gt;&lt;a href=&quot;#cb49-9&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;plt.xlabel(&lt;span class=&quot;st&quot;&gt;&amp;quot;Epochs&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb49-10&quot;&gt;&lt;a href=&quot;#cb49-10&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;plt.ylabel(&lt;span class=&quot;st&quot;&gt;&amp;quot;Loss&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb49-11&quot;&gt;&lt;a href=&quot;#cb49-11&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;plt.legend()&lt;/span&gt;
&lt;span id=&quot;cb49-12&quot;&gt;&lt;a href=&quot;#cb49-12&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;plt.show()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;margin&quot;&gt;
    &lt;img src=&quot;/assets/2023/09/15/132_0.png&quot;&gt;
  &lt;/div&gt;
  &lt;div id=&quot;4f7246e0&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;And finally, we can see the performance of the model in the following
      graph:&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;eb419a32&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb50&quot;&gt;
      &lt;pre class=&quot;sourceCode python&quot;&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span id=&quot;cb50-1&quot;&gt;&lt;a href=&quot;#cb50-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;plt.plot(y_test, label&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;#39;test real&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb50-2&quot;&gt;&lt;a href=&quot;#cb50-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;plt.plot(&lt;span class=&quot;bu&quot;&gt;range&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;200&lt;/span&gt;,&lt;span class=&quot;dv&quot;&gt;495&lt;/span&gt;), model.predict(X_test[&lt;span class=&quot;dv&quot;&gt;200&lt;/span&gt;:], verbose&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;).flatten(), label&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;#39;test predict&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb50-3&quot;&gt;&lt;a href=&quot;#cb50-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;plt.title(&lt;span class=&quot;st&quot;&gt;&amp;quot;Real test vs Predicted test&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb50-4&quot;&gt;&lt;a href=&quot;#cb50-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;plt.xlabel(&lt;span class=&quot;st&quot;&gt;&amp;quot;Time(15 min)&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb50-5&quot;&gt;&lt;a href=&quot;#cb50-5&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;plt.ylabel(&lt;span class=&quot;st&quot;&gt;&amp;quot;Load&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb50-6&quot;&gt;&lt;a href=&quot;#cb50-6&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;plt.legend(loc&lt;span class=&quot;op&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;upper right&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id=&quot;cb50-7&quot;&gt;&lt;a href=&quot;#cb50-7&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;plt.show()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;margin&quot;&gt;
    &lt;img src=&quot;/assets/2023/09/15/134_0.png&quot;&gt;
  &lt;/div&gt;
  &lt;div id=&quot;d7dc5e20&quot; class=&quot;margin&quot;&gt;
    &lt;h3 id=&quot;performance-gains-&quot;&gt;Performance gains
      &lt;a class=&quot;anchor&quot; id=&quot;t33&quot;&gt;&lt;/a&gt;
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div id=&quot;79299f2c&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;As discussed earlier, all 4 bottlenecks were solved by migrating to
      the kdb+/q environment taking advantage of PyKX. Overall, the final
      picture looks like this:&lt;/p&gt;
    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr class=&quot;header&quot;&gt;
          &lt;th&gt;         &lt;/th&gt;
          &lt;th&gt;pandas Time    &lt;/th&gt;
          &lt;th&gt;PyKX Time      &lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr class=&quot;odd&quot;&gt;
          &lt;td&gt;Cleaning Weather&lt;/td&gt;
          &lt;td&gt;247 ms ± 10.4 ms&lt;/td&gt;
          &lt;td&gt;26.7 ms ± 683 µs&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;even&quot;&gt;
          &lt;td&gt;Cleaning Traffic&lt;/td&gt;
          &lt;td&gt;25.5 s ± 1.29 s  &lt;/td&gt;
          &lt;td&gt;1.65 s ± 248 ms  &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;odd&quot;&gt;
          &lt;td&gt;Join Final Table&lt;/td&gt;
          &lt;td&gt;7.1 s ± 168 ms  &lt;/td&gt;
          &lt;td&gt;686 ms ± 24.1 ms&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;even&quot;&gt;
          &lt;td&gt;Model Ingestion Preprocess&lt;/td&gt;
          &lt;td&gt;3.2 s ± 54.2 ms&lt;/td&gt;
          &lt;td&gt;178 ms ± 8.01 ms&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;p&gt;So we got a 10x decrease across the board. We went from a total of 36
      seconds spent on these bottlenecks down to just shy of 4 seconds, which
      is really impressive on itself. If a migration like this one was on the
      horizon, we would strongly suggest profiling the code to see where it
      struggles the most and try to think of a way to migrate those parts
      alone to PyKX. Then, as a second step, we recommend to port the rest of
      the code to PyKX in order to circumvent the overhead that moving data
      between memory spaces inherently adds to the process.&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;b522a5be&quot; class=&quot;margin&quot;&gt;
    &lt;div class=&quot;alert&quot;&gt;
      &lt;b&gt; 🔍 You can find on Github the resulting &lt;a
          href=&quot;https://github.com/hablapps/AllRoadsLeadToKdb/blob/main/src/pykx/PyKX_code.py&quot;&gt;PyKX-enhanced
          pythonic code&lt;/a&gt;. &lt;/b&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;91f0090c&quot; class=&quot;margin&quot;&gt;
    &lt;h2 id=&quot;pykxq-migration-&quot;&gt;pykx.q migration
      &lt;a class=&quot;anchor&quot; id=&quot;t4&quot;&gt;&lt;/a&gt;
    &lt;/h2&gt;
  &lt;/div&gt;
  &lt;div id=&quot;5e81d5b6&quot; class=&quot;margin&quot;&gt;
    &lt;p&gt;After gaining proficiency in the q language, the team progressively
      shifted towards utilizing &lt;code&gt;kx.q()&lt;/code&gt; extensively, drawn by its
      brevity. Yet, this approach introduced a level of monotony due to the
      requirement of employing strings. As a remedy, a decision was made to
      transition into a q environment. However, as highlighted in the previous
      chapter, certain Python code proved challenging to migrate to q.
      Consequently, the team chose to remain within PyKX, this time operating
      within a q environment.&lt;/p&gt;
    &lt;p&gt;pykx.q facilitates the execution of Python code within a q
      environment, thereby presenting new avenues for addressing existing
      codebases. This flexibility enables the incorporation and utilization of
      Python libraries, both those installed on the system and those available
      as .py files.&lt;/p&gt;
    &lt;p&gt;In our scenario, we harness both of these options. We emphasize the
      potential provided by these opportunities to integrate Python code
      within pykx.q, while also providing a link to the project's &lt;a href=&quot;&quot;&gt;q
        script&lt;/a&gt; for readers seeking further insights.&lt;/p&gt;
    &lt;div class=&quot;alert&quot;&gt;
      &lt;b&gt; 🔍 You can find on Github the resulting &lt;a
          href=&quot;https://github.com/hablapps/AllRoadsLeadToKdb/tree/main/src/pykx.q&quot;&gt;PyKX-enhanced
          kdb+/q code&lt;/a&gt;.&lt;/b&gt;
    &lt;/div&gt;
    &lt;p&gt;Our initial step involves executing the &lt;code&gt;haversine_vector&lt;/code&gt;
      function for calculating coordinate distances. Given its unavailability
      in q, we opted to employ pykx.q to seamlessly integrate this library
      directly into our q code. This was achieved through the following
      lines:&lt;/p&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb51&quot;&gt;
      &lt;pre
        class=&quot;sourceCode q&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span id=&quot;cb51-1&quot;&gt;&lt;a href=&quot;#cb51-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;.pykx.pyexec&lt;span class=&quot;st&quot;&gt;&amp;quot;from haversine import haversine_vector, Unit&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;div class=&quot;alert alert-block alert-success&quot;
      style=&quot;background-color: #FFFFFF; border: 0px solid; padding: 0px;box-shadow: 2px 2px #3841459c; border-left: 5px solid #00b100;margin-left: 5%; margin-right: 5%; border-top: 3px solid #00b100&quot;&gt;
      &lt;div class=&quot;alert-header custom-card-header&quot;
        style=&quot;background-color: #d8ffd8; border: 1px solid #d8ffd8; color: black; padding: 10px;&quot;&gt;
        &lt;i class=&quot;fa fa-commenting&quot; aria-hidden=&quot;true&quot; style=&quot;color:#00b100&quot;&gt;&lt;/i&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;Further Information
        on &lt;a href=&quot;https://code.kx.com/pykx/1.6/user-guide/advanced/running_under_q.html&quot;&gt;Python and Q Context&lt;/a&gt;das
      &lt;/div&gt;
      &lt;div style=&quot;background-color: #e5ffdf70;  padding: 40px; padding-top:30px; padding-bottom:20px&quot;&gt;
        &lt;p
          style=&quot;color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px; line-weight: 1.5&quot;&gt;
          In PyKX.q, the python and q contexts coexists too. The utilization of &lt;code&gt;.pykx.pyexec&lt;/code&gt; permits the
          execution of Python code within the q environment. When you're in the q context, you can work with python
          objects using the resources provided by pykx.q.These incluede indexing, function declaration, and library
          importation. However, consistent with the recommendation of the previous chapter, it's generally better to
          stick with q objects for as long as you can.&lt;/p&gt;

        &lt;p
          style=&quot;color: black; margin-top:0%; text-align: left;margin-left: 5%; margin-right: 5%; margin-bottom: 15px; line-weight: 1.5&quot;&gt;
          Objects from the Python memory can be retrieved using &lt;code&gt;pykx.get&lt;/code&gt; and transmitted using
          &lt;code&gt;pykx.set&lt;/code&gt;. The Python data type to be employed in the transformation can be specified using
          &lt;code&gt;.pykx.setdefault&lt;/code&gt;.
        &lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;p&gt;This function expects two pandas DataFrames as input, so we need to
      change the default conversion type from NumPy to pandas:&lt;/p&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb52&quot;&gt;
      &lt;pre
        class=&quot;sourceCode q&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span id=&quot;cb52-1&quot;&gt;&lt;a href=&quot;#cb52-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;.pykx.setdefault&lt;span class=&quot;st&quot;&gt;&amp;quot;pd&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;Having done this, we can &quot;move&quot; our input variables to the Python
      memory space using &lt;code&gt;.pykx.set&lt;/code&gt;&lt;/p&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb53&quot;&gt;
      &lt;pre
        class=&quot;sourceCode q&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span id=&quot;cb53-1&quot;&gt;&lt;a href=&quot;#cb53-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;.pykx.set[&lt;span class=&quot;st&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;a;&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;`&lt;/span&gt;longitude&lt;span class=&quot;st&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;latitude#a];&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb53-2&quot;&gt;&lt;a href=&quot;#cb53-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;at&quot;&gt;.pykx.set[&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;`&lt;/span&gt;b;&lt;span class=&quot;st&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;longitude&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;`&lt;/span&gt;latitude&lt;span class=&quot;co&quot;&gt;#b];&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;And finally execute our function:&lt;/p&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb54&quot;&gt;
      &lt;pre
        class=&quot;sourceCode q&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span id=&quot;cb54-1&quot;&gt;&lt;a href=&quot;#cb54-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;(.pykx.eval&lt;span class=&quot;st&quot;&gt;&amp;quot;haversine_vector(a, b, Unit.KILOMETERS, comb=True)&amp;quot;&lt;/span&gt;)&lt;span class=&quot;st&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;Notice the backtick at the end, this is for converting back to a q
      type.&lt;/p&gt;
    &lt;p&gt;The other way we can run Python code is to load a .py (renamed to .p)
      file using &lt;code&gt;\l&lt;/code&gt;. This could be done as follows:&lt;/p&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb55&quot;&gt;
      &lt;pre
        class=&quot;sourceCode q&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span id=&quot;cb55-1&quot;&gt;&lt;a href=&quot;#cb55-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;system&lt;span class=&quot;st&quot;&gt;&amp;quot;l kerasmodel.p&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;Here we have included the functions &lt;code&gt;fit&lt;/code&gt; and
      &lt;code&gt;predict&lt;/code&gt; previously defined in last section. We can load
      them and use them like this:
    &lt;/p&gt;
    &lt;div class=&quot;sourceCode&quot; id=&quot;cb56&quot;&gt;
      &lt;pre
        class=&quot;sourceCode q&quot;&gt;&lt;code class=&quot;sourceCode r&quot;&gt;&lt;span id=&quot;cb56-1&quot;&gt;&lt;a href=&quot;#cb56-1&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;modelfit&lt;span class=&quot;sc&quot;&gt;:&lt;/span&gt;.pykx.get&lt;span class=&quot;st&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;at&quot;&gt;fit;&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb56-2&quot;&gt;&lt;a href=&quot;#cb56-2&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;at&quot;&gt;modelfit[train[0][3403];train[1][3403];test[0][3403];test[1][3403]];&lt;/span&gt;&lt;/span&gt;
&lt;span id=&quot;cb56-3&quot;&gt;&lt;a href=&quot;#cb56-3&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;at&quot;&gt;modelpredict:.pykx.get&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;`&lt;/span&gt;predict;&lt;/span&gt;
&lt;span id=&quot;cb56-4&quot;&gt;&lt;a href=&quot;#cb56-4&quot; aria-hidden=&quot;true&quot; tabindex=&quot;-1&quot;&gt;&lt;/a&gt;res&lt;span class=&quot;sc&quot;&gt;:&lt;/span&gt;modelpredict[train[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;][&lt;span class=&quot;dv&quot;&gt;3403&lt;/span&gt;]];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;In terms of performance, we noticed a slight decrease in execution
      time comparing to using PyKX:&lt;/p&gt;
    &lt;table&gt;
      &lt;colgroup&gt;
        &lt;col style=&quot;width: 35%&quot; /&gt;
        &lt;col style=&quot;width: 21%&quot; /&gt;
        &lt;col style=&quot;width: 21%&quot; /&gt;
        &lt;col style=&quot;width: 21%&quot; /&gt;
      &lt;/colgroup&gt;
      &lt;thead&gt;
        &lt;tr class=&quot;header&quot;&gt;
          &lt;th&gt;         &lt;/th&gt;
          &lt;th&gt;pandas Time    &lt;/th&gt;
          &lt;th&gt;PyKX Time      &lt;/th&gt;
          &lt;th&gt;q Time&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr class=&quot;odd&quot;&gt;
          &lt;td&gt;Cleaning Weather&lt;/td&gt;
          &lt;td&gt;247 ms ± 10.4 ms&lt;/td&gt;
          &lt;td&gt;26.7 ms ± 683 µs&lt;/td&gt;
          &lt;td&gt;22.3 ms ± 224 µs&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;even&quot;&gt;
          &lt;td&gt;Cleaning Traffic&lt;/td&gt;
          &lt;td&gt;25.5 s ± 1.29 s  &lt;/td&gt;
          &lt;td&gt;1.65 s ± 248 ms  &lt;/td&gt;
          &lt;td&gt;1.627 s ± 124 ms&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;odd&quot;&gt;
          &lt;td&gt;Join Final Table&lt;/td&gt;
          &lt;td&gt;7.1 s ± 168 ms  &lt;/td&gt;
          &lt;td&gt;686 ms ± 24.1 ms&lt;/td&gt;
          &lt;td&gt;543 ms ± 10.1 ms&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr class=&quot;even&quot;&gt;
          &lt;td&gt;Model Ingestion Preprocess&lt;/td&gt;
          &lt;td&gt;3.2 s ± 54.2 ms&lt;/td&gt;
          &lt;td&gt;178 ms ± 8.01 ms&lt;/td&gt;
          &lt;td&gt;153 ms ± 3.12 ms&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
    &lt;p&gt;These little timing shifts might happen because of changes in memory
      or processor activity, but it's not really noticeable as far as we could
      see.&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;0a55ce42&quot; class=&quot;margin&quot;&gt;
    &lt;h2 id=&quot;final-thoughts&quot;&gt;Final
      thoughts&lt;a class=&quot;anchor&quot; id=&quot;t5&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
    &lt;p&gt;Overall this project turned out smoother than expected thanks to
      PyKX. It allowed us to get a foothold on the kdb+/q ecosystem before
      making the full transition to using q code, which on itself it's
      impressive. We achieved our goals of reducing execution time, as we saw
      throughout this post, and learned a lot about the kdb+/q ecosystem and
      its technologies.&lt;/p&gt;
    &lt;p&gt;It wasn't all smooth and sail though. For instance, we hit a
      fundamental obstacle when using the pandas API. In an ideal world, the
      transition from pandas to PyKX using this API would be as simple as
      importing PyKX, enabling a flag and getting the input tables as PyKX
      objects. However, since we relied on operations such as
      &lt;code&gt;group_by&lt;/code&gt; and &lt;code&gt;melt&lt;/code&gt;, it ended up being
      unfeasible since these operations were not yet implemented and we would
      have to manually code them, which would take a long time on itself. We
      should note, however, that this feature is still on beta, so we look
      forward to future improvements in this regard since it would make
      migrations like this one much simpler once it becomes a drop-in
      replacement for pandas calls.
    &lt;/p&gt;
    &lt;p&gt;In summary, with the experience we gained we dare to recommend you
      following these steps as a PyKX migration guide:&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;Migrate the original data to a kdb+/q environment or PyKX objects.&lt;/li&gt;
      &lt;li&gt;Profile the original code to locate bottlenecks. This allows us to
        put the focus on the heavier parts of our process.&lt;/li&gt;
      &lt;li&gt;Once located, migrate those parts alone to PyKX. You
        &lt;strong&gt;will&lt;/strong&gt; take a performance hit when moving data from
        memory spaces, but it's important to know the potential gains that are
        possible, so measure the migrated bottlenecks alone to see the
        difference.
      &lt;/li&gt;
      &lt;li&gt;If your tables are not that large, you may be able to get away with
        it as-is, not needing to do a full migration. If that's the case then
        great! You are done. However, if you notice that the performance hit
        when moving data between memory spaces is actually hindering the
        process, consider a full migration to PyKX.&lt;/li&gt;
      &lt;li&gt;If a full migration to PyKX is needed, then first take a look at the
        pandas API. By the time you read this, it may have already improved
        compatibility and could be a drop-in replacement for pandas. If it's not
        the case you will need to familiarise yourself with PyKX and get your
        hands dirty as we had to.&lt;/li&gt;
    &lt;/ol&gt;
    &lt;p&gt;We hope this post could serve as a guide of sorts for those that want
      to familiarise themselves with PyKX and the kdb+/q ecosystem since it
      brings a lot to the table. In the end we were able to achieve a full 1:1
      migration to PyKX and even to q with pykx.q, which is impressive given
      the differences between the languages and their philosophy all while
      notably cutting execution time. Below you will find some additional
      references to continue learning PyKX. Have fun with PyKX!&lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;4b5cbbd1&quot; class=&quot;margin&quot;&gt;

&lt;h2 id=&quot;Acknowledgments-&quot;&gt; Acknowledgments &lt;/h2&gt;

          We would like to express our gratitude to the KX team for their valuable advice and feedback. Special thanks
          to Ferenc Bodon for suggesting several improvements.

    &lt;div id=&quot;4b5cbbd1&quot; class=&quot;margin&quot;&gt;

    &lt;h2 id=&quot;bibliography-&quot;&gt;Bibliography &lt;a class=&quot;anchor&quot; id=&quot;t5&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;Vidas M, Tubić V, Ivanović I, Subotić M. Sustainability (Basel)
          2022; 14(9): e4985, &lt;a href=&quot;http://dx.doi.org/10.3390/su14094985&quot;
            class=&quot;uri&quot;&gt;http://dx.doi.org/10.3390/su14094985&lt;/a&gt;&lt;/em&gt;&lt;br /&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Y. Yao et al., &quot;Analyzing the Effects of Rainfall on Urban
          Traffic-Congestion Bottlenecks,&quot; in IEEE Journal of Selected Topics in
          Applied Earth Observations and Remote Sensing, vol. 13, pp. 504-512,
          2020, &lt;a href=&quot;http://dx.doi.org/10.1109/JSTARS.2020.2966591&quot;
            class=&quot;uri&quot;&gt;http://dx.doi.org/10.1109/JSTARS.2020.2966591&lt;/a&gt;&lt;/em&gt;&lt;br /&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Essien, A., Petrounias, I., Sampaio, P., &amp;amp; Sampaio, S.
          (2018). The Impact of Rainfall and Temperature on Peak and Off-Peak
          Urban Traffic. In Database and Expert Systems Applications : 28th
          International Conference, DEXA 2018, Regensburg, Germany. (pp. 399-407).
          (Lecture Notes in Computer Science). Springer Nature. &lt;a href=&quot;https://doi.org/10.1007/978-3-319-98812-2_36&quot;
            class=&quot;uri&quot;&gt;https://doi.org/10.1007/978-3-319-98812-2_36&lt;/a&gt;&lt;/em&gt;&lt;br /&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;em&gt;A. Morrison and N. Crone, Accelerating Python Workflows using
          PyKX, June 2023, KX Developers blog, &lt;a href=&quot;https://kx.com/blog/accelerating-python-workflows-using-pykx/&quot;
            class=&quot;uri&quot;&gt;https://kx.com/blog/accelerating-python-workflows-using-pykx/&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Reuben Taylor. An Introduction to PyKX &lt;a href=&quot;https://kx.com/videos/an-introduction-to-pykx/&quot;
            class=&quot;uri&quot;&gt;https://kx.com/videos/an-introduction-to-pykx/&lt;/a&gt; June,
          2023&lt;/em&gt;&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Paul Walsh PyKX Boosts Trade Analytics &lt;a
            href=&quot;https://www.treliant.com/knowledge-center/pykx-boosts-trade-analytics/&quot;
            class=&quot;uri&quot;&gt;https://www.treliant.com/knowledge-center/pykx-boosts-trade-analytics/&lt;/a&gt;
          June 26, 2023&lt;/em&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/body&gt;

&lt;/html&gt;</content><author><name>Oscar Nydza Nicpoñ, Marcos Vázquez Martín</name></author><summary type="html">All Roads Lead to Kdb: the technical counterpart This post serves as a follow-up to our prior article, All Roads Lead to PyKX, where we introduced the utility of the PyKX library from the perspective of Emma Monad, the CTO of a large fictional company known as Mad Flow. In addition to this high-level perspective, the focus of this post is on Python programmers who are eager to explore the technical intricacies that were left unexplained in the aforementioned article. Consequently, the post will provide them with a highly detailed, step-by-step example of how to migrate an existing Python codebase into PyKX. Similarly to the outcomes presented in the post Accelerating Python Workflows using PyKX, which we highly recommend reading, we will observe a significant performance advantage of the resulting PyKX code compared to the initial pandas implementation. More references are available in the bibliography at the end of the post. The structure of the post will be as follows: The Use Case: We will begin by explaining the traffic improvement use case itself, encompassing its objectives, data sources, and anticipated outcomes. This section will also include references to the necessary data sources required to execute all the code provided in this blog post. PyKX migration: Subsequently, we will illustrate the process of delegating resource-intensive tasks to kdb+/q using PyKX, all while staying within the Python environment. This kind of PyKX-boosted Pythonic version is probably the fastest way to begin harnessing the capabilities of the kdb+/q environment. pykx.q migration: Lastly, we will delve into the process of transitioning the code to pure kdb+/q, while continuing to utilize PyKX to retain the Pythonic code you wish to preserve. This kdb+/q version enhanced by PyKX is presented for those interested in a more extensive adoption of kdb+/q. The initial section regarding the use case is independent of programming languages and is primarily included for reference purposes. If you're eager to delve directly into the code and begin learning how to migrate pure pandas-based Python code into PyKX, you can proceed to the second section now and revisit the first section as necessary. Use Case With the aim of predicting traffic congestion in the presence of rain, Mad Flow dedicated significant effort to preparing and integrating weather and traffic data into an LSTM model. This endeavor aligned with other studies that sought to forecast traffic patterns using LSTM models based on air pollution. Just like findings from studies in cities such as Manchester, Shenzhen and Belgrade, our results project a weekday traffic volume increase of 5-15% during peak hours in the presence of rain. Like in most projects related to smart cities, the used data is notable diverse, so it needed a lot of preparatory work. The following sections will detail the data sources, the cleansing and interpretation processes, as well as the used model. Data sources The Madrid City Council provides weather and traffic data, including both real-time and historical records. For the purpose of model training, only the historical data is pertinent. These datasets, formatted as CSV files, are categorized by months spanning from the year 2018 to the present. 🔍 You can access the different datasets required to run this notebook from the following links: Weather data Weather stations Traffic data Traffic stations Traffic data The traffic sensors are strategically positioned at traffic lights throughout the city of Madrid. The collected data gather together diverse measurements of road conditions, including speed and traffic volume. All of these metrics are encapsulated in the load metric, quantified in percentage terms to denote levels of congestion. The format of the traffic table is presented as follows: traffic_station element type intensity ocupation load vmed error integration period date 0 1001 M30 3240 9 0 59 N 5 2022-12-01 00:00:00 1 1001 M30 3240 9 0 59 N 5 2022-12-01 00:15:00 2 1001 M30 300 1 0 66 N 5 2022-12-01 00:30:00 This table amass information from various traffic stations, detailing elements such as traffic intensity, occupancy, congestion load, and other relevant data, all correlated with specific dates and times. The table also includes a column for the date and another column that identifies the sensor. This identification will be used to establish a link with its corresponding coordinates by utilizing the subsequent traffic stations table: element type district id code name utm_x utm_y Longitude Latitude 0 &quot;URB&quot; 4 3840 &quot;01001&quot; &quot;Jose Ortega y Gasset E-O - Pº Castellana-Serrano&quot; 441615 4.47577e+06 -3.68832 40.4305 1 &quot;URB&quot; 4 3841 &quot;01002&quot; &quot;Jose Ortega y Gasset O-E - Serrano-Pº Castellana&quot; 441706 4.47577e+06 -3.68726 40.4305 2 &quot;URB&quot; 1 3842 &quot;01003&quot; &quot;Pº Recoletos N-S - Almirante-Prim&quot; 441319 4.47484e+06 -3.69173 40.4221 Weather data The table below provides a snapshot of the type of information available in the weather dataset: weather_station magnitude year month day H01 V01 ... 0 108 81 2022 12 22 270 N ... 1 108 82 2022 12 22 9 N ... 2 108 83 2022 12 22 94.7 N ... 3 108 86 2022 12 22 1031 N ... 4 108 87 2022 12 22 2 N ... This dataset contains hourly meteorological observations, including temperature, humidity, wind speed, and precipitation measurements. Each row documents various details about a specific meteorological station: The 'magnitude' field denotes the type of meteorological data captured in the corresponding row (e.g., 81 - wind, 82 - direction, ..., 89 - rainfall). In the 'H01' and 'V01' columns, the value for the data type specified in the 'magnitude' column is provided, along with its validity status, respectively. The 'year', 'month', and 'day' columns indicate the timestamp of the measurement recording. Furthermore, we will require the geographical coordinates of the various stations, which are available in a distinct table provided by the Madrid City Council. weather_station Longitude Latitude 0 4 -3.71226 40.4239 1 8 -3.68232 40.4216 2 16 -3.63924 40.44 3 18 -3.73184 40.3948 4 108 -3.717881 40.47663 Data Cleansing Upon loading the data, the subsequent task involved its preparation for analysis and modeling. The eventual consolidation of this cleaned data into a unified table will occur during a subsequent phase. After loading the data, the next step was to get it ready for analysis and modeling. Given the diverse nature of the datasets, the process of data cleansing will be conducted individually for each dataset. We'll bring all this cleaned data together into a unified table in a later phase. Traffic Data The process employed to clean the traffic dataset involves the following steps: Initially, values characterized by measurement errors are excluded from consideration. The documentation designates these values using the symbol &quot;N&quot;. Subsequently, solely the load measurements, which constitute the focus of our analysis, are retained. The data is then grouped based on each date and station, subsequently computing the average load value for each group: date traffic_station traffic_load 2022-12-01 00:00:00 1001 0 2022-12-01 00:00:00 1002 0 2022-12-01 00:00:00 1003 0 Weather Data Concerning the weather dataset, the procedures undertaken were as follows: In the weather dataset, the date is split into separate columns for day, month, and year. However, in the traffic dataset, this information is combined. So, we merged the columns to create a single 'date' column with the format:&quot; day-month-year. Additionally, given that each individual row contains all 24 daily measurements taken at a weather station, along with their respective magnitudes, we need a transformation where each hourly measurement value and its corresponding validity status are discrete entries within separate rows. This presents an opportunity to remove any measurements that are marked as invalid. hour value 0 0 days 00:00:00 7.1 1 0 days 00:00:00 6.8 2 0 days 00:00:00 2.8 3 0 days 00:00:00 5.6 To standardize the time measurement format and align it with the traffic table, we merge the date with the time. As a result, the updated date format becomes:date-month-year hour:minute:second Lastly, we restructure the diverse types of measurements into distinct columns, enhancing the organizational coherence of the dataset: date weather_station direction humidity pressure rainfall solar temperature wind 0 2022-12-01 00:00:00 4 0 0 0 0 0 7.1 0 1 2022-12-01 00:00:00 8 0 67 0 0 0 9.4 0 2 2022-12-01 00:00:00 16 0 73 0 0 0 8.9 0 Location Data To make it easier to combine the tables we mentioned, we need to connect the traffic sensors with the weather stations. To do this, we can use a distance matrix that helps us find the closest pairs of both types of stations. Instead of directly measuring the distance using coordinates, we decided to go with the Haversine distance. This method calculates the distance in meters between coordinate pairs, which gives a clearer idea of the distances. This visualization is best shown using a heatmap, where the distances are displayed on a range from 0 to 20 kilometers: Figure 1: Heatmap of distances in km between weather and traffic stations If we look at the shortest distances between each type of station, we end up with a mapping between these two tables: traffic_station weather_station 0 3840 109 1 3841 109 2 3842 8 The Final Table After we've done all the setup for the three tables - weather, traffic, and distance - we can now join them together. Because the weather table has data every hour, while the traffic data is available every 15 minutes, we'll combine them using an 'asof' join method. Then, we'll add time and day-of-the-week details to the dataset, which will help us study how these factors are connected to traffic congestion. date traffic_station load Distance Closest weather_station direction humidity pressure rainfall solar temperature wind weekday hour 0 2022-12-01 00:00:00 1001 0 15 1 8 0 67 0 0 0 9.4 0 3 0 1 2022-12-01 00:00:00 1002 0 15 1 8 0 67 0 0 0 9.4 0 3 0 2 2022-12-01 00:00:00 1003 0 14 1 8 0 67 0 0 0 9.4 0 3 0 3 2022-12-01 00:00:00 1006 0 15 1 8 0 67 0 0 0 9.4 0 3 0 4 2022-12-01 00:00:00 1009 0 14 0 4 0 0 0 0 0 7.1 0 3 0 Data interpretation Traffic patterns exhibit a pronounced dependency on time. To dig deeper into the data, a filtering process will be applied to extract instances of peak traffic. This focused dataset will help us really get a better grip on traffic dynamics. The next figures illustrates the outstanding seasonality within the dataset: Figure 2: Load per Hour Figure 3: Load per Weekday Note: In Figure 3, zero represents Monday. It's clear that weekdays have more traffic compared to holidays. Likewise, during the daytime, there's a higher traffic flow than at nighttime. Concerning the relationship between Rainfall and Load, preliminary observations indicate a limited occurrence of rainy days within our dataset: rainfall count 841068 mean 0.0130932 std 0.194232 min 0 50% 0 90% 0 99.9% 2.9 max 10.9 After looking closely at the percentiles of the precipitation column, it's clear that recorded instances of rainfall are quite scarce. To address this limitation, the measurements were divided into distinct categories based on the intensity of the rainfall. This led to a separate analysis for datasets involving heavy rain, moderate rain, and times when there was no rain. This analysis was done hourly, to minimize the impact of time on traffic patterns. The results of this analysis show that on average, traffic congestion increases by around 5% to 14% during rainy hours. This consistently matches the findings discussed in the Use Case section. Figure 4: The average traffic load per hour for measurements categorized as heavy rain (blue), moderate rain (brown), and no rain (green): To confirm the statistical importance of the differences between these groups, we conducted an analysis of variance (ANOVA) test. Notably, the ANOVA results strongly suggest significant variations in load levels among the different rain intensity categories for all hours. For example, let's take a look at the results for hour 12. sum_sq df F PR(&amp;gt;F) C(rainfall) 37650.7 6 20.1144 1.3346e-23 Residual 8.01363e+06 25687 nan nan We chose to include rainfall as a factor in the model. However, the other meteorological conditions didn't show similarly clear results, so we decided to leave them out of the model. The Model For the purpose of performance evaluation, a preliminary model was developed employing a basic Long Short-Term Memory (LSTM) architecture with a memory span of 5 steps. The model's objective is to forecast the load at a specific traffic station. The model input encompasses historical load data, rainfall measurements, as well as the hour and day of the week. Preliminary results derived from a single station exhibit promising outcomes, as demonstrated in Figure 6. In this figure, we compare the actual traffic load with the predictions made by the LSTM model. Furthermore, an analysis of the training and validation loss curves (Figure 5) indicates that the model is not experiencing issues related to overfitting or underfitting. Figure 5: Train vs Validation loss curves plot Figure 6: Traffic Forecasting for a traffic station PyKX migration 🔍Version 2.0.1 came out since this post was originally published with version 1.6. The introduction of fantastic new features in this version has rendered certain aspects of this post outdated. Some of the new features render certain sections of the notebook non-executable. You may opt to use an earlier version of PyKX. Despite the promising forecasting results yielded by the LSTM model, certain considerations arose concerning the efficiency of the Python code employed for project implementation. After profiling the entirity of the process, we found 4 key areas in which the code was behaving worse than expected: pandas Time Cleaning Weather 247 ms ± 10.4 ms Cleaning Traffic 25.5 s ± 1.29 s Join Final Table 7.1 s ± 168 ms Model Ingestion Preprocess 3.2 s ± 54.2 ms At this point, a fundamental decision had to be made regarding the migration strategy. Let's delve into the two alternatives at our disposal, along with their positive and negative aspects: Partial migration: This approach involves identifying the specific points where pandas experiences the greatest strain. Subsequently, these segments can be migrated to q using PyKX, while leaving the rest of the code intact. This alternative capitalizes on the compatibility features of PyKX, which ensure a seamless interaction between pure pandas/NumPy and PyKX. For instance, we may use the .pd() method, which allows us to convert a PyPX table object into a pandas dataframe. This strategy can be particularly effective if the demarcation between computationally demanding and less complex segments is evident. However, this isn't always the case, leading to multiple conversions between Python and q. Furthermore, as the documentation recommends, we should minimize these Python-to-Q conversions whenever feasible. To test how much time is lost in these conversions, we moved the weather and traffic tables, as well as a 12-million-row table from a later stage in the process, to Python using the .pd() method. The outcomes displayed in the subsequent table led us to dismiss this option. Translation time Traffic table 2.78 s ± 84.9 ms Weather table 24.6 ms ± 821 µs Final table 1 minute 33 s A promising alternative to this intermediate transformations method is the PyKX implementation of the pandas API. However, as we will explore later, even this had to be discarded for our particular case. Complete Migration: Completely migrating the code to PyKX allows for the full use of kdb+/q processing capabilities without the need to switch between memory spaces. This strategy is particularly pertinent for managing substantial volume of data. In our case, a complete migration to PyKX became indispensable. Although it might seem challenging at first, as we will soon realize, having a basic understanding of q will make this process straightforward. Let's get started! 🔍 You can find on Github the Original Python Project that will be migrated into PyKX. First of all we need to install and import PyKX: !pip install pykx == 1.6 import pykx as kx 🔍 A license is required to use some of the following features. You can find more information in the PyKX installation documentation. Datasets An excellent starting point for the migration process involves transferring our data to the q environment. We can even revert these objects to pandas and reuse all our existing code. This approach ensures that our data remains stored within the kdb environment, thus benefitting from its rapid and scalable database capabilities. However, it's important to acknowledge that we might sacrifice the processing power of kdb+/q. As a result, we will proceed with deeper steps in the migration process. Before continuing, be sure to download the datasets required for running the next pieces of code. Traffic The preprocessing of the traffic table was one of the most critical parts in terms of time. Later on, we will showcase the improvement in execution time compared to our pure pandas implementation. The data loading will be executed employing the utilities facilitated by PyKX: traffic = kx.q.read.csv(&amp;#39;../12-2022.csv&amp;#39;, types=&amp;quot;IPSIIIISI&amp;quot;, delimiter=&amp;#39;;&amp;#39;) &amp;nbsp;&amp;nbsp;&amp;nbsp;Further Information on PyKX Read/Write Utils PyKX provides an array of functions designed to facilitate data loading and writing tasks. These functions encompass the capability to handle diverse file types, spanning both general formats and those specific to the q language. Notably, the q-specific functionalities enable seamless transfer of tables between the q context and the Python context, offering a bidirectional exchange of data. Specifically, the parameters of the read.csv function adhere to conventional standards. The file's URL and delimiter are specified. It is important to emphasize the types parameter, which expects the q types associated with each column. print(traffic) id fecha tipo_elem intensidad ocupacion carga vmed .. -----------------------------------------------------------------------------.. 1001 2022.12.01D00:00:00.000000000 M30 3240 9 0 59 .. 1001 2022.12.01D00:15:00.000000000 M30 3240 9 0 59 .. 1001 2022.12.01D00:30:00.000000000 M30 300 1 0 66 .. 1001 2022.12.01D00:45:00.000000000 M30 300 1 0 66 .. 1001 2022.12.01D01:00:00.000000000 M30 300 1 0 66 .. 1001 2022.12.01D01:15:00.000000000 M30 300 1 0 66 .. 1001 2022.12.01D01:30:00.000000000 M30 300 1 0 66 .. 1001 2022.12.01D01:45:00.000000000 M30 300 1 0 66 .. 1001 2022.12.01D02:00:00.000000000 M30 300 1 0 66 .. 1001 2022.12.01D02:15:00.000000000 M30 300 1 0 66 .. 1001 2022.12.01D02:30:00.000000000 M30 300 1 0 66 .. 1001 2022.12.01D02:45:00.000000000 M30 300 1 0 66 .. 1001 2022.12.01D03:00:00.000000000 M30 300 1 0 66 .. 1001 2022.12.01D03:15:00.000000000 M30 300 1 0 66 .. 1001 2022.12.01D03:30:00.000000000 M30 300 1 0 66 .. 1001 2022.12.01D03:45:00.000000000 M30 300 1 0 66 .. 1001 2022.12.01D04:00:00.000000000 M30 300 1 0 66 .. 1001 2022.12.01D04:15:00.000000000 M30 300 1 0 66 .. 1001 2022.12.01D04:30:00.000000000 M30 300 1 0 66 .. 1001 2022.12.01D04:45:00.000000000 M30 300 1 0 66 .. .. As a result of this process, our table is now a PyKX object: type(traffic) pykx.wrappers.Table Let's examine the initial few rows of this table: print(traffic[:3]) id fecha tipo_elem intensidad ocupacion carga vmed .. -----------------------------------------------------------------------------.. 1001 2022.12.01D00:00:00.000000000 M30 3240 9 0 59 .. 1001 2022.12.01D00:15:00.000000000 M30 3240 9 0 59 .. 1001 2022.12.01D00:30:00.000000000 M30 300 1 0 66 .. &amp;nbsp;&amp;nbsp;&amp;nbsp;Further Information on pythonic indexing in PyKX Accessing data within PyKX objects, be it lists or tables, follows a methodology analogous to that of NumPy or pandas. This facilitates the indexing of PyKX objects without necessitating the explicit utilization of q functions. Furthermore, the capacity to index by columns is an additional convenience offered by this approach. &gt;&gt;&gt; print(weather[&quot;H01&quot;][:3]) 270 9 94.7 We have the kx.q.qsql interface integrated in PyKX, which allows us to query into q tables concisely. &amp;nbsp;&amp;nbsp;&amp;nbsp;Further Information on qSQL and SQL querys PyKX allows you to use qSQL queries using API functions. This includes select, exec, update and delete functions, which share some common characteristics, mainly with the arguments they receive. The first three share roughly this function call structure: kx.q.qsql.{function}({tab}, columns=..., where=..., by=...) The columns argument expects either a list of strings or a dictionary where the key is the column name and the value is the actual value you want in this column if let's say you want to apply a function to it. Let's see an example: &gt;&gt;&gt; print(kx.q.qsql.select(weather, {&quot;magnitude&quot;: &quot;count distinct magnitude&quot;}, by=[&quot;weather_station&quot;])[:3]) weather_station| magnitude ---------------| --------- 4 | 1 8 | 2 16 | 2 But if you are more familiarized with the q environment it is also possible to use q functions. This approach reduces the verbosity of our functions compared to the equivalent in Python. &gt;&gt;&gt; print(kx.q(&quot;{select count distinct magnitude by weather_station from x}&quot;, weather)[:3]) weather_station| magnitude ---------------| --------- 4 | 1 8 | 2 16 | 2 PyKX lets you use ANSI SQL queries too! &gt;&gt;&gt; print(kx.q.sql(&quot;SELECT weather_station, COUNT(DISTINCT(magnitude)) FROM &amp;#36 1 GROUP BY weather_station&quot;, weather)[:3]) weather_station magnitude ------------------------- 4 1 8 2 16 2 To preprocess the traffic table our objective is to ascertain the average load based on date and season, while eliminating measurement errors. The power of qSQL enables us to accomplish this feat through a singular query: traffic = kx.q.qsql.select(traffic, columns = {&amp;#39;traffic_load&amp;#39;: &amp;#39;avg carga&amp;#39;}, by = {&amp;quot;date&amp;quot;:&amp;#39;fecha&amp;#39;, &amp;quot;traffic_station&amp;quot;: &amp;#39;id&amp;#39;}, where = &amp;quot;error=`N&amp;quot;) print(kx.q(&amp;quot;3#&amp;quot;,traffic)) date traffic_station| traffic_load ---------------------------------------------| ------------ 2022.12.01D00:00:00.000000000 1001 | 0 2022.12.01D00:00:00.000000000 1002 | 0 2022.12.01D00:00:00.000000000 1003 | 0 &amp;nbsp;&amp;nbsp;&amp;nbsp;pandas alternative: Traffic Cleaning Although it may look like a simple query, it is performing a seriously heavy operation. The original pandas implementation looked like this: &gt;&gt;&gt; traffic = traffic[traffic[&quot;error&quot;] == &quot;N&quot;].rename(columns={&quot;carga&quot;:&quot;load&quot;, &quot;id&quot;:&quot;traffic_station&quot;}) &gt;&gt;&gt; traffic['date'] = pd.to_datetime(traffic['fecha'], errors='coerce') &gt;&gt;&gt; traffic.drop([&quot;tipo_elem&quot;, &quot;error&quot;, &quot;periodo_integracion&quot;, &quot;fecha&quot;, &quot;intensidad&quot;, &quot;ocupacion&quot;, &quot;vmed&quot;], axis=1, inplace=True) &gt;&gt;&gt; traffic.groupby([&quot;date&quot;, 'traffic_station']).mean().reset_index() We observe a noticeable improvement in code legibility, especially once you have familiarised a little bit with the qSQL syntax. The code looks sleeker and simpler using PyKX. We noticed a roughly 10x reduction in execution time: pandas Time PyKX Time Cleaning Traffic 25.5 s ± 1.29 s 1.65 s ± 248 ms This time we achieved both simpler and faster code, which we can agree can be considered as a success. Now traffic is a keyed table. Keyed tables indexing is a bit different; that's why if we want to see the first values of the table, we need to use the sublist method. print(kx.q.sublist(3,traffic)) date traffic_station| traffic_load ---------------------------------------------| ------------ 2022.12.01D00:00:00.000000000 1001 | 0 2022.12.01D00:00:00.000000000 1002 | 0 2022.12.01D00:00:00.000000000 1003 | 0 &amp;nbsp;&amp;nbsp;&amp;nbsp;Further Information on Using NumPy and pandas For individuals who are still acclimatizing to the kdb+/q ecosystem, a partial adoption of NumPy's functionality remains accessible. Specifically universal functions. By using this type of function, the average q function that was employed in the previous query can be rephrased as follows: &gt;&gt;&gt; import numpy as np &gt;&gt;&gt; &gt;&gt;&gt; def npmean(arr): &gt;&gt;&gt; return np.add.reduce(arr) / len(arr) &gt;&gt;&gt; &gt;&gt;&gt; print(npmean(traffic[&quot;load&quot;])) 5.4 While the ability to reuse NumPy functions inside q is really nice and can be of great help during a migration like the one we are exemplifying, we found that we were not able to use this NumPy function on our kx.q.qsql() query. After executing the previous code, our query would look something like this: &gt;&gt;&gt; kx.q[&quot;npmean&quot;] = npmean &gt;&gt;&gt; traffic = kx.q.qsql.select(traffic, columns = {'traffic_load': 'npmean carga'}, by = {&quot;date&quot;:'fecha', &quot;traffic_station&quot;: 'id'}, where = &quot;error=`N&quot;) Notice the function called to perform the average of the traffic_load column is the one defined earlier. Even though we didn't get any errors, this resulted in our code running for over 20 minutes with no feedback until we eventually stopped it manually, so we can't recommend the usage NumPy functions inside a qSQL query like we did. We suspect it may have something to do with q's avg function (and all of q's functions) being optimised for this kind of usages and NumPy's implementation not being ready to deal with how kdb+/q implements its tables. It may also have something to do with the group by clause, which creates a keyed table on q, but we can't confirm it as of now. On the other hand, pandas can seamlessly interface with PyKX objects through the pandas API. This can be effortlessly achieved by importing NumPy and pandas and toggling a designated flag. We can try to replicate the previous select: &gt;&gt;&gt; import os &gt;&gt;&gt; os.environ['PYKX_ENABLE_PANDAS_API'] = 'true' &gt;&gt;&gt; import numpy as np &gt;&gt;&gt; import pandas as pd &gt;&gt;&gt; &gt;&gt;&gt; print(traffic.iloc[traffic[&quot;error&quot;] == &quot;N&quot;][[&quot;date&quot;, &quot;traffic_station&quot;,&quot;load&quot;]].head()) fecha id carga ---------------------------------------- 2022.12.01D00:00:00.000000000 1001 0 2022.12.01D00:15:00.000000000 1001 0 2022.12.01D00:30:00.000000000 1001 0 2022.12.01D00:45:00.000000000 1001 0 2022.12.01D01:00:00.000000000 1001 0 However, it's worth noting that the pandas API is currently under development, hence not all of pandas functions have been fully incorporated yet. And unfortunately, groupby is one of them. We hope that in the future we can migrate our pandas code to PyKX without any changes. 🔍 Version 2.0.0 of PyKX brings significant improvements in this regard, making the pandas API a viable option for such migrations. Regrettably, at the time when the post was created, these essential functions were not yet available. But now we have functions like groupby and flags/imports are no longer needed. Weather This table, serving as the traffic table, will also be imported into the Python environment. Consequently, it becomes accessible as a Python object, albeit not within q scopes. weather = kx.q.read.csv(&amp;#39;../dic_meteo22.csv&amp;#39;, types=&amp;#39;I&amp;#39;*4 + &amp;#39;*&amp;#39;*4 + &amp;#39;FS&amp;#39;*24, delimiter=&amp;#39;;&amp;#39;) To display a table in markdown format, we can transfer it to pandas: weather[:3].pd() PROVINCIA MUNICIPIO ESTACION MAGNITUD PUNTO_MUESTREO ANO MES DIA H01 V01 ... H20 V20 H21 V21 H22 V22 H23 V23 H24 V24 0 28 79 108 81 b'28079108_81_98' b'2022' b'12' b'22' 270.0 N ... 218.0 V 228.0 V 227.83 V 213.67 V 233.83 V 1 28 79 108 82 b'28079108_82_98' b'2022' b'12' b'22' 9.0 N ... 10.0 V 10.0 V 9.00 V 9.00 V 8.00 V 2 28 79 108 83 b'28079108_83_98' b'2022' b'12' b'22' 94.7 N ... 86.7 V 91.4 V 93.80 V 96.30 V 98.70 V &amp;nbsp;&amp;nbsp;&amp;nbsp;Further Information on Python/Q transformations Objects from q can be converted to pandas with .pd(), to PyArrow with .pa(), to NumPy with .np() and to Python with .py() methods. This flexibility empowers Python developers, especially those new to PyKX, to seamlessly tap into the capabilities of kdb+ databases while acquainting themselves with q. As is evident, these objects are not currently within the q memory space. Let's proceed to explore how we can access and use q features on these objects. First, we will examine the straightforward xcol function, which affords us the ability to rename columns: weather = kx.q.xcol({&amp;#39;ANO&amp;#39;: &amp;#39;year&amp;#39;, &amp;#39;MES&amp;#39;: &amp;#39;month&amp;#39;, &amp;#39;DIA&amp;#39;: &amp;#39;day&amp;#39;, &amp;#39;ESTACION&amp;#39;:&amp;#39;weather_station&amp;#39;, &amp;#39;MAGNITUD&amp;#39;:&amp;#39;magnitude&amp;#39;}, weather) &amp;nbsp;&amp;nbsp;&amp;nbsp;Further Information on using q functions in PyKX A plethora of q functions can be accessed via the pykx.q interface. The attributes mirrored by these functions closely resemble the parameters anticipated by the corresponding q functions, with Python data structures being employed in lieu of q structures. It is important to note that these functions are compiled and thoroughly elucidated within the PyKX documentation &gt;&gt;&gt; kx.q.distinct(['A', 'B', 'B', 'B' ,'C']) `A`B`C For those who want to dig deeper into kdb+/q and gain experience, you can use q functions and pass PyKX objects as arguments: &gt;&gt;&gt; kx.q(&quot;distinct&quot;, ['A', 'B', 'B', 'B' ,'C']) `A`B`C It's important to emphasize that in the preceding function, a Python object is being passed to a q function. When Python objects have a direct equivalent in q, like dictionaries, they can be directly employed as attributes for PyKX functions. Beneath the surface, PyKX adeptly manages the conversion to q data structures. Moreover, the application of q iterations could be another avenue of exploration. You can even create functions and use them with PyKX or Python objects using Lambda functions (as we have done thus far) or by applying a composition of functions to the Python object: &gt;&gt;&gt; kx.q.count.each(kx.q.group(['A', 'B', 'B', 'B' ,'C'])) A| 1 B| 3 C| 1 With the following code we have removed several columns that are not relevant to the analysis. weather = kx.q.qsql.delete(weather, [&amp;#39;PUNTO_MUESTREO&amp;#39;, &amp;#39;PROVINCIA&amp;#39;, &amp;#39;MUNICIPIO&amp;#39;]) The next step involves merging the year, month, and day columns into a single unified date column. To initiate this process, we begin by accessing these three individual columns. This can be accomplished through indexing: print(weather[&amp;quot;year&amp;quot;, &amp;quot;month&amp;quot;, &amp;quot;day&amp;quot;]) &quot;2022&quot; &quot;2022&quot; &quot;2022&quot; &quot;2022&quot; &quot;2022&quot; &quot;2022&quot; &quot;2022&quot; &quot;2022&quot; &quot;2022&quot; &quot;2022&quot; &quot;2022&quot; .. &quot;12&quot; &quot;12&quot; &quot;12&quot; &quot;12&quot; &quot;12&quot; &quot;12&quot; &quot;12&quot; &quot;12&quot; &quot;12&quot; &quot;12&quot; &quot;12&quot; .. &quot;22&quot; &quot;22&quot; &quot;22&quot; &quot;22&quot; &quot;22&quot; &quot;22&quot; &quot;22&quot; &quot;01&quot; &quot;02&quot; &quot;03&quot; &quot;04&quot; .. We observe that the outcome consists of three lists, each containing data corresponding to the sample size. The objective is to form a single list of the sample size, wherein the three date elements are combined: print(kx.q.flip(weather[&amp;quot;year&amp;quot;, &amp;quot;month&amp;quot;, &amp;quot;day&amp;quot;])[:3]) &quot;2022&quot; &quot;12&quot; &quot;22&quot; &quot;2022&quot; &quot;12&quot; &quot;22&quot; &quot;2022&quot; &quot;12&quot; &quot;22&quot; We appear to be approaching the desired outcome. Currently, we possess a list of sample size, wherein each position contains a sub-list comprising three elements: the day, the month, and the year. To consolidate each sub-list into a singular, unified element, the each iterator can be used: print(kx.q.each(kx.q.raze, kx.q.flip(weather[&amp;quot;year&amp;quot;, &amp;quot;month&amp;quot;, &amp;quot;day&amp;quot;]))[:3]) &quot;20221222&quot; &quot;20221222&quot; &quot;20221222&quot; The final step entails converting the resultant data from string format to a date format. However, it's worth noting that certain functions, particularly the overloaded glyphs, have yet to be implemented. For example cast ($), take (#), concat (,)... So we are forced to abandon the pythonic way of calling q functions and perform this casting writing kdb+/q code using the pykx.q() method: date = kx.q(&amp;#39;&amp;quot;D&amp;quot;$&amp;#39;,(kx.q.each(kx.q.raze, kx.q.flip(weather[&amp;quot;year&amp;quot;, &amp;quot;month&amp;quot;, &amp;quot;day&amp;quot;])))) print(date[:3]) 2022.12.22 2022.12.22 2022.12.22 Finally, we add this column to our table: weather_ = kx.q.qsql.update(weather, columns = {&amp;#39;date&amp;#39;: date}) &amp;nbsp;&amp;nbsp;&amp;nbsp;pandas Alternative: Time Join In pandas, we achieved this by executing this operation on our table: &gt;&gt;&gt; pd.to_datetime(weather[[&quot;year&quot;, &quot;month&quot;, &quot;day&quot;]]) It seems to be less complicated thanks to having a function that does exactly what we need, whereas in q we had to implement this function ourselves. Shortly after, some team members started using q code instead of PyKX functions in the pythonic way, as they found the resulting code to be sleeker and more concise. As their familiarity with q grew, they put forth a suggestion to create a function entirely written in q. weather = kx.q.qsql.update(weather, columns = {&amp;#39;date&amp;#39;:&amp;#39;&amp;quot;D&amp;quot;$ raze each flip(year;month;day)&amp;#39;}) Once again, both solutions are entirely compatible and can even be combined. It's at the programmer's discretion to opt for either approach. Now, the three columns that have already been incorporated into the date can be eliminated: weather = kx.q.qsql.delete(weather, [&amp;#39;year&amp;#39;, &amp;#39;month&amp;#39;, &amp;#39;day&amp;#39;]) The current state of the weather table is as follows: weather[:3].pd() weather_station magnitude H01 V01 H02 V02 H03 V03 H04 V04 ... V20 H21 V21 H22 V22 H23 V23 H24 V24 date 0 108 81 270.0 N 252.0 N 216.0 N 242.0 N ... V 228.0 V 227.83 V 213.67 V 233.83 V 2022-12-22 1 108 82 9.0 N 8.0 N 9.0 N 8.0 N ... V 10.0 V 9.00 V 9.00 V 8.00 V 2022-12-22 2 108 83 94.7 N 97.6 N 96.6 N 97.5 N ... V 91.4 V 93.80 V 96.30 V 98.70 V 2022-12-22 Now, let's shift our focus towards deconstructing the H* and V* queries into multiple rows, while simultaneously introducing a time column to prevent information gaps. In q, the conventional approach would involve leveraging functional qSQL to extract columns conforming to the aforementioned patterns. However, we will capitalize on the advantage that PyKX offers by incorporating q code via strings to sidestep this method: def functionalSearch(cols, pattern, func): xcols = cols[kx.q.where(kx.q.like(cols, pattern))] xstring = func.format(kx.q.sv(b&amp;quot;;&amp;quot;, kx.q.string(xcols)).py().decode(&amp;quot;utf-8&amp;quot;)) return xcols, xstring The function above accepts a list of columns, a designated pattern for searching, and a q function represented as a string. This function takes the columns found following the specified pattern in qSQL format (where columns are accessed by their names, not symbols) as an argument. When applied to all columns commencing with &quot;H&quot;, it yields these columns as a vector of symbols, alongside a string representation of these columns in qSQL format: cols = kx.q.cols(weather) found_columns, qsql_function = functionalSearch(cols, b&amp;#39;H*&amp;#39;, &amp;quot;{}&amp;quot;) print(&amp;quot;Columns found: &amp;quot;, found_columns) print(&amp;quot;qSQL function: &amp;quot;, qsql_function) Columns found: `H01`H02`H03`H04`H05`H06`H07`H08`H09`H10`H11`H12`H13`H14`H15`H16`H17`H18`H19`.. qSQL function: H01;H02;H03;H04;H05;H06;H07;H08;H09;H10;H11;H12;H13;H14;H15;H16;H17;H18;H19;H20;H21;H22;H23;H24 This capability is remarkably powerful, as it enables the utilization of qSQL alongside variables, obviating the need for functional forms which can often prove intricate for individuals new to kdb+/q development. Now, let's apply the above methodology to the columns commencing with H, which correspond to the measurement values, and to the columns commencing with V, which indicate the validity of the measurements. The function employed to transform the measurement column into rows is flip: hcols, value = functionalSearch(cols, b&amp;#39;H*&amp;#39;, &amp;quot;flip({})&amp;quot;) vcols, valid = functionalSearch(cols, b&amp;#39;V*&amp;#39;, &amp;quot;flip({})&amp;quot;) Our next step involves feeding our internally constructed functions, represented as strings, into the qSQL update function. This is done in conjunction with the repetition of the 24-hour sequence to match the initial number of rows: weather = kx.q.qsql.update(weather, columns = {&amp;#39;hour&amp;#39;: &amp;#39;count[i]#enlist 01:00*til 24&amp;#39;, &amp;#39;values&amp;#39;: value, &amp;#39;valid&amp;#39;: valid}) To remove columns beginning with H or V, we can employ the same approach as earlier to circumvent the need for functional qSQL: weather = kx.q.qsql.delete(weather, columns = kx.q.raze(hcols,vcols).py()) Let's see the result: weather[:3].pd() weather_station magnitude date hour values valid 0 108 81 2022-12-22 [0 minutes, 60 minutes, 120 minutes, 180 minut... [270.0, 252.0, 216.0, 242.0, 239.0, 246.0, 233... [N, N, N, N, N, N, N, N, N, N, V, V, V, V, V, ... 1 108 82 2022-12-22 [0 minutes, 60 minutes, 120 minutes, 180 minut... [9.0, 8.0, 9.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, ... [N, N, N, N, N, N, N, N, N, N, V, V, V, V, V, ... 2 108 83 2022-12-22 [0 minutes, 60 minutes, 120 minutes, 180 minut... [94.7, 97.6, 96.6, 97.5, 97.5, 98.2, 98.8, 98.... [N, N, N, N, N, N, N, N, N, N, V, V, V, V, V, ... Finally, the remaining task involves expanding the table so that each element within the lists corresponds to a distinct row: weather = kx.q.ungroup(weather) We can further streamline the table by eliminating rows that lack validity and merging the date with the time: weather = kx.q.qsql.select(weather, where = &amp;#39;valid=`V&amp;#39;) weather = kx.q.qsql.update(weather, columns = {&amp;#39;date&amp;#39;: &amp;#39;date+hour&amp;#39;}) weather = kx.q.qsql.delete(weather, columns = [&amp;quot;valid&amp;quot;, &amp;quot;hour&amp;quot;]) weather[:3].pd() weather_station magnitude date values 0 108 81 2022-12-22 10:00:00 263.00 1 108 81 2022-12-22 11:00:00 247.83 2 108 81 2022-12-22 12:00:00 215.83 The magnitude column plays a pivotal role in attributing meaning to the value. As outlined by the dataset creators, the diverse magnitudes align with the elements encapsulated within the following dictionary: magnitude = {80:&amp;quot;ultraviolet&amp;quot;, 81:&amp;quot;wind&amp;quot;, 82:&amp;quot;direction&amp;quot;, 83:&amp;quot;temperature&amp;quot;, 86:&amp;quot;humidity&amp;quot;, 87:&amp;quot;pressure&amp;quot;, 88:&amp;quot;solar&amp;quot;, 89:&amp;quot;rainfall&amp;quot;} We just have to change the key by the value of the dictionary. weather = kx.q(&amp;#39;{update magnitude: x magnitude from y}&amp;#39;, magnitude, weather) Finally, all we have to do is separate the different weather conditions into different columns: weather = kx.q(&amp;#39;{exec (value x)#magnitude!values by date,weather_station from y}&amp;#39;,magnitude,weather) The exec query provides us with the capability to transform a dictionary, stored within a column, into multiple columns. In this transformation, the keys become the column names, and the values constitute the data within those respective columns. This proves particularly beneficial when dealing with a dictionary that represents the weather conditions of each entry, linked with their respective values. By implementing this approach and subsequently grouping the data, we effectively disseminate the weather conditions across distinct columns for each weather entry and weather station. &amp;nbsp;&amp;nbsp;&amp;nbsp;pandas Alternative: Weather Cleaning This turned out to be a complex migration, since on pandas this &quot;flipping&quot; functionality is provided by melt: &gt;&gt;&gt; weather_hour = weather.melt(id_vars=[&quot;weather_station&quot;, &quot;magnitud&quot;, &quot;date&quot;], value_vars=[x for x in weather.columns if re.match(&quot;^H&quot;, x)], var_name=&quot;hour&quot;) &gt;&gt;&gt; &gt;&gt;&gt; weather_valid = weather.melt(value_vars=[x for x in weather.columns if re.match(&quot;^V&quot;, x)], var_name=&quot;valid&quot;) As for the subsequent operations, those turned more alike to the original pandas implementation: &gt;&gt;&gt; weather= weather_hour[weather_valid[&quot;value&quot;] == &quot;V&quot;].reset_index() &gt;&gt;&gt; &gt;&gt;&gt; weather[&quot;hour&quot;] = weather[&quot;hour&quot;].str[1:] &gt;&gt;&gt; weather[&quot;hour&quot;] = pd.to_timedelta(weather['hour'].astype(int)-1, unit='h') &gt;&gt;&gt; weather[&quot;date&quot;] = weather[&quot;date&quot;] + weather[&quot;hour&quot;] &gt;&gt;&gt; &gt;&gt;&gt; weather_values = weather.assign(MAGNITUD = weather[&quot;magnitud&quot;].map({80:&quot;ultraviolet&quot;, 81:&quot;wind&quot;, 82:&quot;direction&quot;, 83:&quot;temperature&quot;, 86:&quot;humidity&quot;, 87:&quot;pressure&quot;, 88:&quot;solar&quot;, 89:&quot;rainfall&quot;})) \ .MAGNITUD.str.get_dummies() \ .multiply(weather[&quot;value&quot;], axis=&quot;index&quot;) &gt;&gt;&gt; &gt;&gt;&gt; weather = pd.concat([weather, weather_values], axis=1) &gt;&gt;&gt; weather = weather.drop([&quot;index&quot;, &quot;hour&quot;, &quot;magnitud&quot;, &quot;value&quot;], axis=1) &gt;&gt;&gt; weather = weather.groupby([&quot;date&quot;, &quot;weather_station&quot;]).sum().reset_index() All in all, this table proved to be quite tricky with the migration, but nothing unmanageable. The rest of the migration was far simpler. Overall, we noticed again a 10x decrease in execution time, which we consider something remarkable. pandas Time PyKX Time Cleaning Weather 247 ms ± 10.4 ms 26.7 ms ± 683 µs Location Both traffic and weather station tables will be loaded into the q memory space: kx.q[&amp;quot;weather_station&amp;quot;] = kx.q(&amp;quot;.Q.id&amp;quot;, kx.q.read.csv(&amp;#39;../Estaciones_control_datos_meteorologicos.csv&amp;#39;, types=&amp;quot; IFF&amp;quot;, delimiter=&amp;quot;;&amp;quot;, as_table=True)) kx.q[&amp;quot;traffic_station&amp;quot;] = kx.q.read.csv(&amp;#39;../pmed_ubicacion_12-2022.csv&amp;#39;, types = &amp;quot;SII**FFFF&amp;quot;, delimiter = &amp;quot;;&amp;quot;, as_table=True) We are now able to access these objects within q functions without the necessity of passing them as PyKX or Python objects. To illustrate, let's proceed to modify the column names in both tables in order to establish a uniform naming convention: kx.q(&amp;quot;weather_station:(`CDIGO_CORTO`LONGITUD`LATITUD!`weather_station`longitude`latitude) xcol weather_station&amp;quot;) _=kx.q(&amp;quot;traffic_station:(`id`longitud`latitud!`traffic_station`longitude`latitude) xcol traffic_station&amp;quot;) &amp;nbsp;&amp;nbsp;&amp;nbsp;Further Information on Using Q memory space If you feel more comfortable programming in q, you have the option to operate within the q memory space. PyKX objects can be seamlessly transferred into the q memory space, where you can manipulate them as if you were operating within a q ecosystem, employing the following code: kx.q[&quot;table&quot;]. Once you've completed your operations, you can effortlessly bring them back to the Python memory space by returning them using q code: kx.q(&quot;table&quot;) Our objective is to merge these two tables. Currently, there appears to be no identifier that readily facilitates a conventional join. Nevertheless, it's worth noting that both the weather and traffic stations are situated by coordinates. We can exploit the spatial proximity between stations designated for measuring traffic and weather to facilitate the join. To compute the distance between two sets of coordinates, the Harvesine distance as previously discussed, can be employed. It's important to acknowledge that while this distance function is readily available in Python, it is not natively accessible within q. pip install haversine One potential approach would involve re-implementing the Haversine distance function in q. However, this might become impractical for more complex libraries. Alternatively, although slower, we could transmit our q objects to Python and work with them there. Nonetheless, it's strongly recommended to avoid switching objects between q and Python. However, the data we had to move between memory spaces wasn't very large (and we were careful about this) and we didn't see any noticeable drop in performance. The features we've elucidated earlier, allowing us to transition between Python and q objects, empower us to temporarily reuse Python code. This is particularly pertinent given the scale of tables we are currently dealing with. To incorporate our q objects into this function, we can use certain PyKX tools to convert them into Python objects: from haversine import haversine_vector, Unit dist = kx.toq( haversine_vector(kx.q(&amp;#39;`longitude`latitude # weather_station&amp;#39;).pd(), kx.q(&amp;#39;`longitude`latitude # traffic_station&amp;#39;).pd(), Unit.KILOMETERS, comb=True)) We've reached a point where we have a matrix detailing the distance in kilometers for every combination of traffic and weather stations. Our upcoming task is to pinpoint pairs of station identifiers that exhibit the minimum distance: ids = kx.q.each(kx.q(&amp;#39;{x?min x}&amp;#39;), dist) distance_table = kx.q(&amp;#39;{traffic_station ^ weather_station[x]}&amp;#39; , ids) distance_table = kx.q.qsql.delete(distance_table, columns = [&amp;#39;tipo_elem&amp;#39;,&amp;#39;distrito&amp;#39;,&amp;#39;cod_cent&amp;#39;,&amp;#39;nombre&amp;#39;,&amp;#39;utm_x&amp;#39;,&amp;#39;utm_y&amp;#39;,&amp;#39;longitude&amp;#39;, &amp;#39;latitude&amp;#39;]) With this we have a mapping that relates every traffic station to its nearest weather station: distance_table[:3].pd() traffic_station weather_station 0 3840 109 1 3841 109 2 3842 8 Final Table Integrating the three tables is a relatively straightforward process. The distances table can be seamlessly merged with either of the other two using a simple left join. However, when joining the traffic and weather tables, an asof join (aj) is necessary due to their disparate time intervals. To conclude, two columns, time and day of the week, should be appended to furnish the model with the data's inherent seasonality: complete = kx.q.lj(traffic, kx.q.xkey(&amp;#39;traffic_station&amp;#39;, distance_table)) complete = kx.q.aj(kx.toq([&amp;#39;date&amp;#39;,&amp;#39;weather_station&amp;#39;]), complete, weather) complete = kx.q.qsql.update(kx.q(&amp;quot;0^&amp;quot;,complete), {&amp;quot;hour&amp;quot;:&amp;quot;`hh$date&amp;quot;, &amp;quot;weekday&amp;quot;:&amp;#39;(&amp;quot;d&amp;quot;$date)mod 7&amp;#39;}) Let's look at this last table: kx.q.sublist(3,complete).pd() traffic_load weather_station ultraviolet wind direction temperature humidity pressure solar rainfall hour weekday date traffic_station 2022-12-01 1001 0.0 24 0.0 0.54 239.0 6.0 84.0 946.0 1.0 0.0 0 5 1002 0.0 24 0.0 0.54 239.0 6.0 84.0 946.0 1.0 0.0 0 5 1003 0.0 24 0.0 0.54 239.0 6.0 84.0 946.0 1.0 0.0 0 5 1006 0.0 24 0.0 0.54 239.0 6.0 84.0 946.0 1.0 0.0 0 5 1009 0.0 110 0.0 0.35 2.0 7.9 79.0 937.0 1.0 0.0 0 5 &amp;nbsp;&amp;nbsp;&amp;nbsp;pandas Alternative: Final table This is another bottleneck we encountered on our profiling. On pandas, the code looked kind of similar, with a simple join and an asof join: &gt;&gt;&gt; complete = traffic.merge(distance_table, on=[&quot;traffic_station&quot;], how=&quot;inner&quot;) &gt;&gt;&gt; complete = pd.merge_asof(complete.sort_values([&quot;date&quot;]), weather, on='date', by=[&quot;weather_station&quot;]) However we once again noticed a 10x reduction in execution time: pandas Time PyKX Time Join Final Table 7.1 s ± 168 ms 686 ms ± 24.1 ms This improvement is most likely due to performance benefits when using kdb, as it's optimized for time series data and the asof join, which is where most of this performance gain came from. Model For the model's input, we chose to cherry-pick only the essential columns. Moreover, we apply normalization to the rainfall column using a straightforward MinMax scaler. This function can be included within the q memory space, ready for use whenever necessary: kx.q(&amp;quot;minMaxScale:{[l] {(x-y)%(z-y)}[;min l;max l]l}&amp;quot;) final = kx.q.qsql.select(complete, columns = {&amp;quot;date&amp;quot;: &amp;quot;date&amp;quot;, &amp;quot;traffic_station&amp;quot;:&amp;quot;traffic_station&amp;quot;, &amp;quot;hour&amp;quot;:&amp;quot;hour&amp;quot;, &amp;quot;weekday&amp;quot;: &amp;quot;weekday&amp;quot;, &amp;quot;traffic_load&amp;quot;: &amp;quot;traffic_load%100&amp;quot;, &amp;quot;rainfall&amp;quot;:&amp;quot;minMaxScale rainfall&amp;quot;} ) Throughout this transition from pandas, the primary challenge emerged while migrating the time_window function, given its reliance on loops. Our approach involved first comprehending the input data, defining the desired output, and then formulating an idiomatic q implementation rather than a direct 1:1 migration. This method proved more time-efficient. In this scenario, our input consisted of a table, and our desired output was a list of matrices for each station. To facilitate this process, we devised multiple functions that proved invaluable: sliding window: given a matrix, x, divides it into chunks of length y: _=kx.q(&amp;quot;&amp;quot;&amp;quot;sw:{({y#z _x}[x;y;]&amp;#39;)til count b:y _x}&amp;quot;&amp;quot;&amp;quot;) get target: For a given matrix, x, it takes the target located in the column z and the first lines are eliminated to match with the chunks length y: _=kx.q(&amp;quot;&amp;quot;&amp;quot;gt:{y _(flip x)[z]}&amp;quot;&amp;quot;&amp;quot;) # gets target (in position z) to Matrix: Transform the table x to a matrix: _=kx.q(&amp;quot;&amp;quot;&amp;quot;toMatrix:{({[t;i]value t[i]}[x;]&amp;#39;)til count x:flip x}&amp;quot;&amp;quot;&amp;quot;) # table to matrix prepareData: This function is designed to create the training and testing datasets. It begins by selecting the necessary columns (columns) from the table, grouped by traffic station. For each traffic station, it retains ntest rows for testing purposes. The data is divided into chunks of length chunkLen. Finally, the function constructs a list of dictionaries for training data and training targets (the load column), as well as test data and test targets. To start, regardless of whether we require the training or testing output, we must retrieve either the last ntest records or up to the last ntest records. Given the necessity of performing this operation for the designated columns, a functional statement emerged as the most suitable approach. Once we've molded the data to align with our requirements, the subsequent step involves constructing the list of matrices. Achieving this entails employing a sliding window approach. In order to return a list of matrices, rather than a list of tables, we used the toMatrix function, which facilitates the transformation of a table into a matrix. Additionally, we useed the sw (sliding window) function to apply the sliding window concept to a singular large matrix. In terms of the y data, we enlisted the gt (get target) function. This function retrieves the target data (traffic load), with the exclusion of the first chunkLen+1 entries. _=kx.q(&amp;quot;&amp;quot;&amp;quot; prepareData:{[data; ntest; chunkLen; columns; locTarget] train:(toMatrix&amp;#39;)?[data;();`traffic_station;columns!({(y;(-;(count;x);z);x)}[;_;ntest]&amp;#39;)columns]; test:(toMatrix&amp;#39;)?[data;();`traffic_station;columns!({(y;(-;(count;x);z);x)}[;#;ntest]&amp;#39;)columns]; (((sw[;chunkLen]&amp;#39;)test;(gt[;chunkLen;locTarget]&amp;#39;)test);((sw[;chunkLen]&amp;#39;)train;(gt[;chunkLen;locTarget]&amp;#39;)train)) } &amp;quot;&amp;quot;&amp;quot;) Lets test this function in action with only one station: import numpy as np station_id = 4010 station = kx.q.qsql.select(final, where=[&amp;quot;traffic_station=&amp;quot;+str(station_id)]) data = kx.q(&amp;quot;prepareData&amp;quot;, station, 500, 5, kx.SymbolVector([&amp;#39;rainfall&amp;#39;, &amp;#39;traffic_load&amp;#39;, &amp;#39;hour&amp;#39;, &amp;#39;weekday&amp;#39;]), 1) X_train, y_train = np.array(data[0][0][station_id].py()), np.array(data[0][1][station_id].py()) X_test, y_test = np.array(data[1][0][station_id].py()), np.array(data[1][1][station_id].py()) &amp;nbsp;&amp;nbsp;&amp;nbsp;pandas Alternative: Model Ingestion This is the last bottleneck we ran into while doing our profiling. We used the Python Sklearn MinMax scaler for this. &gt;&gt;&gt; from sklearn.preprocessing import MinMaxScaler &gt;&gt;&gt; final_table[&quot;load&quot;]/=100 &gt;&gt;&gt; final_table[&quot;rainfall&quot;] = MinMaxScaler().fit_transform(final_table[&quot;rainfall&quot;]) We also created a custom function to make those 5-step back chunks for a particular station: &gt;&gt;&gt; # Table Index: Load -&gt; 2, Rainfall -&gt; 7, Hour -&gt; 11, Weekday -&gt; 12 &gt;&gt;&gt; &gt;&gt;&gt; # Assign to each traffic station an array with the target column and the training information &gt;&gt;&gt; &gt;&gt;&gt; train = final_table.groupby('traffic_station').apply(lambda x: np.array(x[:500])[:,[2,7,11,12]].astype(float)) &gt;&gt;&gt; test = final_table.groupby('traffic_station').apply(lambda x: np.array(x[500:])[:,[2,7,11,12]].astype(float)) &gt;&gt;&gt; &gt;&gt;&gt; # Crete 5 step back chunks &gt;&gt;&gt; def time_window(traffic_station, dataset, look_back=5): &gt;&gt;&gt; data_X, data_y= [], [] &gt;&gt;&gt; station_data = dataset[traffic_station] &gt;&gt;&gt; for i in range(len(station_data)-look_back-1): &gt;&gt;&gt; data_X.append(station_data[i:(i+look_back)]) &gt;&gt;&gt; data_y.append(station_data[i+look_back+1, 2]) &gt;&gt;&gt; return np.array(data_X), np.array(data_y) &gt;&gt;&gt; &gt;&gt;&gt; train_X, train_y = create_dataset(train) &gt;&gt;&gt; test_X, test_y = create_dataset(test) In this final test, we once again notice a huge time improvement: pandas Time PyKX Time Model Ingestion Preprocess 3.2 s ± 54.2 ms 178 ms ± 8.01 ms That wraps up our migration to PyKX. Next, we proceed to confirm that the model is working as intended with the data we acquired through PyKX. Firstly, we install Tensorflow: pip install tensorflow And now we create and train a simple LSTM model: from keras.models import Sequential from keras.layers import Dense,LSTM model = Sequential() model.add(LSTM(units = 50, return_sequences=False, input_shape=[None,4])) model.add(Dense(units = 1)) model.compile(loss=&amp;#39;mae&amp;#39;, optimizer=&amp;#39;adam&amp;#39;) def fit(train_X, train_y, test_X, test_y): return model.fit(train_X, train_y, epochs=50, batch_size=8, validation_data=(test_X, test_y), verbose=0, shuffle=False) def predict(data): return model.predict(data, verbose=0) Now we can observe the loss curves for both training and validation over epochs. import matplotlib.pyplot as plt history = fit(X_train,y_train,X_test,y_test) plt.plot(history.history[&amp;#39;loss&amp;#39;], label=&amp;#39;train&amp;#39;) plt.plot(history.history[&amp;#39;val_loss&amp;#39;], label=&amp;#39;validation&amp;#39;) plt.title(&amp;quot;Train and Validation Loss Curves&amp;quot;) plt.xlabel(&amp;quot;Epochs&amp;quot;) plt.ylabel(&amp;quot;Loss&amp;quot;) plt.legend() plt.show() And finally, we can see the performance of the model in the following graph: plt.plot(y_test, label=&amp;#39;test real&amp;#39;) plt.plot(range(200,495), model.predict(X_test[200:], verbose=0).flatten(), label=&amp;#39;test predict&amp;#39;) plt.title(&amp;quot;Real test vs Predicted test&amp;quot;) plt.xlabel(&amp;quot;Time(15 min)&amp;quot;) plt.ylabel(&amp;quot;Load&amp;quot;) plt.legend(loc=&amp;quot;upper right&amp;quot;) plt.show() Performance gains As discussed earlier, all 4 bottlenecks were solved by migrating to the kdb+/q environment taking advantage of PyKX. Overall, the final picture looks like this: pandas Time PyKX Time Cleaning Weather 247 ms ± 10.4 ms 26.7 ms ± 683 µs Cleaning Traffic 25.5 s ± 1.29 s 1.65 s ± 248 ms Join Final Table 7.1 s ± 168 ms 686 ms ± 24.1 ms Model Ingestion Preprocess 3.2 s ± 54.2 ms 178 ms ± 8.01 ms So we got a 10x decrease across the board. We went from a total of 36 seconds spent on these bottlenecks down to just shy of 4 seconds, which is really impressive on itself. If a migration like this one was on the horizon, we would strongly suggest profiling the code to see where it struggles the most and try to think of a way to migrate those parts alone to PyKX. Then, as a second step, we recommend to port the rest of the code to PyKX in order to circumvent the overhead that moving data between memory spaces inherently adds to the process. 🔍 You can find on Github the resulting PyKX-enhanced pythonic code. pykx.q migration After gaining proficiency in the q language, the team progressively shifted towards utilizing kx.q() extensively, drawn by its brevity. Yet, this approach introduced a level of monotony due to the requirement of employing strings. As a remedy, a decision was made to transition into a q environment. However, as highlighted in the previous chapter, certain Python code proved challenging to migrate to q. Consequently, the team chose to remain within PyKX, this time operating within a q environment. pykx.q facilitates the execution of Python code within a q environment, thereby presenting new avenues for addressing existing codebases. This flexibility enables the incorporation and utilization of Python libraries, both those installed on the system and those available as .py files. In our scenario, we harness both of these options. We emphasize the potential provided by these opportunities to integrate Python code within pykx.q, while also providing a link to the project's q script for readers seeking further insights. 🔍 You can find on Github the resulting PyKX-enhanced kdb+/q code. Our initial step involves executing the haversine_vector function for calculating coordinate distances. Given its unavailability in q, we opted to employ pykx.q to seamlessly integrate this library directly into our q code. This was achieved through the following lines: .pykx.pyexec&amp;quot;from haversine import haversine_vector, Unit&amp;quot;; &amp;nbsp;&amp;nbsp;&amp;nbsp;Further Information on Python and Q Contextdas In PyKX.q, the python and q contexts coexists too. The utilization of .pykx.pyexec permits the execution of Python code within the q environment. When you're in the q context, you can work with python objects using the resources provided by pykx.q.These incluede indexing, function declaration, and library importation. However, consistent with the recommendation of the previous chapter, it's generally better to stick with q objects for as long as you can. Objects from the Python memory can be retrieved using pykx.get and transmitted using pykx.set. The Python data type to be employed in the transformation can be specified using .pykx.setdefault. This function expects two pandas DataFrames as input, so we need to change the default conversion type from NumPy to pandas: .pykx.setdefault&amp;quot;pd&amp;quot;; Having done this, we can &quot;move&quot; our input variables to the Python memory space using .pykx.set .pykx.set[`a;`longitude`latitude#a]; .pykx.set[`b;`longitude`latitude#b]; And finally execute our function: (.pykx.eval&amp;quot;haversine_vector(a, b, Unit.KILOMETERS, comb=True)&amp;quot;)` Notice the backtick at the end, this is for converting back to a q type. The other way we can run Python code is to load a .py (renamed to .p) file using \l. This could be done as follows: system&amp;quot;l kerasmodel.p&amp;quot;; Here we have included the functions fit and predict previously defined in last section. We can load them and use them like this: modelfit:.pykx.get`fit; modelfit[train[0][3403];train[1][3403];test[0][3403];test[1][3403]]; modelpredict:.pykx.get`predict; res:modelpredict[train[0][3403]]; In terms of performance, we noticed a slight decrease in execution time comparing to using PyKX: pandas Time PyKX Time q Time Cleaning Weather 247 ms ± 10.4 ms 26.7 ms ± 683 µs 22.3 ms ± 224 µs Cleaning Traffic 25.5 s ± 1.29 s 1.65 s ± 248 ms 1.627 s ± 124 ms Join Final Table 7.1 s ± 168 ms 686 ms ± 24.1 ms 543 ms ± 10.1 ms Model Ingestion Preprocess 3.2 s ± 54.2 ms 178 ms ± 8.01 ms 153 ms ± 3.12 ms These little timing shifts might happen because of changes in memory or processor activity, but it's not really noticeable as far as we could see. Final thoughts Overall this project turned out smoother than expected thanks to PyKX. It allowed us to get a foothold on the kdb+/q ecosystem before making the full transition to using q code, which on itself it's impressive. We achieved our goals of reducing execution time, as we saw throughout this post, and learned a lot about the kdb+/q ecosystem and its technologies. It wasn't all smooth and sail though. For instance, we hit a fundamental obstacle when using the pandas API. In an ideal world, the transition from pandas to PyKX using this API would be as simple as importing PyKX, enabling a flag and getting the input tables as PyKX objects. However, since we relied on operations such as group_by and melt, it ended up being unfeasible since these operations were not yet implemented and we would have to manually code them, which would take a long time on itself. We should note, however, that this feature is still on beta, so we look forward to future improvements in this regard since it would make migrations like this one much simpler once it becomes a drop-in replacement for pandas calls. In summary, with the experience we gained we dare to recommend you following these steps as a PyKX migration guide: Migrate the original data to a kdb+/q environment or PyKX objects. Profile the original code to locate bottlenecks. This allows us to put the focus on the heavier parts of our process. Once located, migrate those parts alone to PyKX. You will take a performance hit when moving data from memory spaces, but it's important to know the potential gains that are possible, so measure the migrated bottlenecks alone to see the difference. If your tables are not that large, you may be able to get away with it as-is, not needing to do a full migration. If that's the case then great! You are done. However, if you notice that the performance hit when moving data between memory spaces is actually hindering the process, consider a full migration to PyKX. If a full migration to PyKX is needed, then first take a look at the pandas API. By the time you read this, it may have already improved compatibility and could be a drop-in replacement for pandas. If it's not the case you will need to familiarise yourself with PyKX and get your hands dirty as we had to. We hope this post could serve as a guide of sorts for those that want to familiarise themselves with PyKX and the kdb+/q ecosystem since it brings a lot to the table. In the end we were able to achieve a full 1:1 migration to PyKX and even to q with pykx.q, which is impressive given the differences between the languages and their philosophy all while notably cutting execution time. Below you will find some additional references to continue learning PyKX. Have fun with PyKX! Acknowledgments We would like to express our gratitude to the KX team for their valuable advice and feedback. Special thanks to Ferenc Bodon for suggesting several improvements. Bibliography Vidas M, Tubić V, Ivanović I, Subotić M. Sustainability (Basel) 2022; 14(9): e4985, http://dx.doi.org/10.3390/su14094985 Y. Yao et al., &quot;Analyzing the Effects of Rainfall on Urban Traffic-Congestion Bottlenecks,&quot; in IEEE Journal of Selected Topics in Applied Earth Observations and Remote Sensing, vol. 13, pp. 504-512, 2020, http://dx.doi.org/10.1109/JSTARS.2020.2966591 Essien, A., Petrounias, I., Sampaio, P., &amp;amp; Sampaio, S. (2018). The Impact of Rainfall and Temperature on Peak and Off-Peak Urban Traffic. In Database and Expert Systems Applications : 28th International Conference, DEXA 2018, Regensburg, Germany. (pp. 399-407). (Lecture Notes in Computer Science). Springer Nature. https://doi.org/10.1007/978-3-319-98812-2_36 A. Morrison and N. Crone, Accelerating Python Workflows using PyKX, June 2023, KX Developers blog, https://kx.com/blog/accelerating-python-workflows-using-pykx/ Reuben Taylor. An Introduction to PyKX https://kx.com/videos/an-introduction-to-pykx/ June, 2023 Paul Walsh PyKX Boosts Trade Analytics https://www.treliant.com/knowledge-center/pykx-boosts-trade-analytics/ June 26, 2023</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/relojes-blandos.jpg" /><media:content medium="image" url="http://localhost:4000/img/relojes-blandos.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">All roads lead to PyKX</title><link href="http://localhost:4000/2023/07/31/all-roads-lead-to-pykx.html" rel="alternate" type="text/html" title="All roads lead to PyKX" /><published>2023-07-31T00:00:00+02:00</published><updated>2023-07-31T00:00:00+02:00</updated><id>http://localhost:4000/2023/07/31/all-roads-lead-to-pykx</id><content type="html" xml:base="http://localhost:4000/2023/07/31/all-roads-lead-to-pykx.html">&lt;h1 id=&quot;all-roads-lead-to-kdb-a-python-to-production-tale&quot;&gt;All Roads Lead to Kdb: A Python to Production tale&lt;/h1&gt;

&lt;p&gt;Introducing Emma Monad, the main character of our story and CTO of Mad Flow, a large and fictional company dedicated to improving the quality of life in Madrid. Emma was facing the real-world challenge of tackling the issue of heavy traffic in the city. However, she found herself grappling with an outdated, ad-hoc constructed, somewhat
inflexible, Mad Flow infrastructure stack. It was a code base that incorporated various modules developed over time, by in-house data science, engineering and developer teams with the help of occasional interns from the nearby university. The application was predominantly built in Python, the most popular programming language of data science over the last decade.&lt;/p&gt;

&lt;p&gt;However, there were problems with the infrastructure. While open and customizable, it suffered with chaotic organization and frequent performance issues, meaning it was slow and unwieldy when incorporating new traffic data-sets or building new insights quickly. This combined to hinder their ability to define and progress effective transport solutions for the city. Emma wanted to take the greatness of the Mad Flow code base, unlock its true potential, and help fulfil its and their mission of transforming Madrid into a more pleasant, efficient and environmentally friendly city.&lt;/p&gt;

&lt;p&gt;Emma thus wanted more agile data management and effective production-ready analytics easily deployed. She had heard, via some occasional consultants to her organization, about a popular and seemingly blindingly fast time-series database and analytics platform called kdb. Nevertheless, that was not for her she felt. Her team’s
comfort was in Python, the language that Mad Flow was predominantly written in, and it was simply impractical to build in anything else, so Python it was. However, at a local PyData Meetup Emma attended, a data scientist acquaintance told her over drinks about PyKX, an open-source library allowing Python to remain the guiding language, but harnessing the power of kdb at runtime. She decided to give it a try, and as time proved, PyKX just worked, and was indispensable in guiding the team from taking a predominantly ad-hoc research data and analytics codebase into a production powerhouse.&lt;/p&gt;

&lt;p&gt;The rest of this story tells you how and why.&lt;/p&gt;

&lt;h2 id=&quot;chapter-1-i-just-want-to-stay-in-python&quot;&gt;Chapter 1: I just want to stay in Python&lt;/h2&gt;

&lt;p&gt;Setting up kdb to ingest the traffic data, Emma feared, might require several weeks. Somewhat apprehensively, Emma set expectations with her team accordingly. However, there she was, with a skilled Python team that had no prior experience in writing even a simple “Hello World” in Q (which, by the way, is 0N!”Hello World!”), and a Python REPL waiting for instructions. She tried to conceal her fear, and she typed the very first line of PyKX code in the Python shell:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pykx&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A sense of calm washed over her as she saw that everything was going well.&lt;/p&gt;

&lt;p&gt;Madrid has many traffic devices scattered throughout the city, so her first task was to retrieve their information, available in several .csv files, into the new platform. According to the PyKX documentation, the  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pykx.read&lt;/code&gt; attribute seemed to be her best option:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;tdevices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;devices.csv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;JFFJJSSS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delimiter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as_table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Her team had extensive familiarity with Pandas notation, so she decided to try some Pandas instructions to retrieve a few columns from the table. It worked effortlessly, or at least it seemed so at first.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tdevices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'district'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'latitude'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'longitude'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pykx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pykx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'
4         4         1         4         4        4         1         7       ..
3840      3841      3842      3843      3844     3845      3846      3847    ..
40.4305   40.43052  40.42213  40.42143  40.43378 40.42351  40.42816  40.42879..
-3.688323 -3.687256 -3.691727 -3.691929 -3.68847 -3.690991 -3.698403 -3.69455..
'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;“Yikes!” It was so close, but it didn’t look like a dataframe. “Where are my columns?” she thought.&lt;/p&gt;

&lt;p&gt;That wouldn’t impress her colleagues, for whom familiar columns mattered. If this was to be a barrier, then it would likely be even harder to run the required analytics algorithms on the proposed new platform. But the documentation suggested the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pd&lt;/code&gt;command which just worked:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tdevices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'district'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'longitude'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'latitude'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;district&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;longitude&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;latitude&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;            &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;3840&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.688323&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;40.430502&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;            &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;3841&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.687256&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;40.430524&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;            &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;3842&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.691727&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;40.422132&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4741&lt;/span&gt;        &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;6933&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.672497&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;40.484118&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4742&lt;/span&gt;        &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;7129&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.672500&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;40.484181&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4743&lt;/span&gt;        &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;7015&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.672308&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;40.485002&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4744&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Et voilà! Emma simply had to repeat the process to load the remaining dataframes used by the selected algorithm, and she could execute the program smoothly, in its very original form. She had intentionally choose an algorithm that produced output in the form of familiar CSV file standards because that was what she and her team knew, but her PyData and kdb-knowledgeable fellow attendee had told her that kdb data stores were so much more efficient. For now, though, she’d stay with csv. Nonetheless, this marked a significant milestone. Emma had already felt that some of the initial promises were delivered!  However, she was well aware of the long road ahead of her if she was to bring along her team and make Mad Flow the agile production analytics platform she wanted it to be.&lt;/p&gt;

&lt;h2 id=&quot;chapter-2-from-zero-to-hero&quot;&gt;Chapter 2: From Zero to Hero&lt;/h2&gt;

&lt;p&gt;Several weeks passed, and, having onboarded a couple of data scientist interns, she finally found time to work with them and conduct more research on PyKX. “Do as little work as necessary,” she murmured. “I just want my team to work with what they’re comfortable with, but have kdb do the heavy lifting!” Emma repeated these mantras from the PyKX user guide to herself whenever she was tempted to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pd&lt;/code&gt;. Indeed, she was now well aware that in order to fully harness the platform’s potential, she should minimize data transfers between the two realms, and delegate as much work as possible to the kdb infrastructure.&lt;/p&gt;

&lt;p&gt;The key to achieving these goals lay in leveraging the PyKX object API, which allowed a Python-first approach. This API made it easy to embed q/kdb within Python, enabling the direct use of efficient q functions in Python code. Additionally, it provided convenient re-implementations of Pythonic APIs, like the Pandas APIs, eliminating the need for conversions to Pandas in many cases. If feasible, this would enhance the development experience, reduce the chances of errors, and, the team hoped, significantly improve performance.&lt;/p&gt;

&lt;p&gt;She first tried with the PyKX Pandas API re-implementation, which could be actrivated through the following environment variable:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'PYKX_ENABLE_PANDAS_API'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'true'&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, she tried the exact same Pandas expression as in the previous section:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tdevices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'district'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'latitude'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'longitude'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pykx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pykx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'
district id   latitude  longitude
--------------------------------
4        3840 40.4305  -3.688323
4        3841 40.43052 -3.687256
1        3842 40.42213 -3.691727
4        3843 40.42143 -3.691929
4        3844 40.43378 -3.68847 
...
'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Et voilà! There were the columns, and she didn’t need to convert q tables to Pandas dataframes! “Do as little work as necessary?” Nailed it! And this approach worked for many other methods of the Pandas API as well, such as filtering, dropping, and renaming columns.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tdevices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tdevices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tdevices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;elem_type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;URB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tdevices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tdevices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;elem_type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;district&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cod_cent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;utm_x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;utm_y&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tdevices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tdevices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;longitude&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;long&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;latitude&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;traffic_station&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While this approach allowed Emma to stay in her beloved Python and avoid costly conversions, the PyKX object API offered other alternatives to query q tables that were worth exploring. Firstly, she had heard that kdb supported querying through plain-old ANSI SQL, and this possibility was enabled through PyKX as well! This time, she decided to use the &lt;em&gt;weather&lt;/em&gt; dataset to test this feature:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weather&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'./abr_meteo23.csv'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'IIII****'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'FS'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delimiter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;';'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as_table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once loaded, she issued a simple SQL query:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'select STATION, count(distinct(MAGNITUDE)) from $1 group by STATION'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;pykx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pykx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'
STATION  MAGNITUDE
------------------
4        1
8        2
16       2
...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That was nice, but she had also heard about qSQL, a collection of query templates resembling SQL, with enhanced expressiveness when dealing with ordered data. qSQL was also available through PyKX by means of a Pythonic interface:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qsql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'MAGNITUDE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'count distinct MAGNITUDE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;STATION&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pykx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KeyedTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pykx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'
STATION | MAGNITUDE
--------| --------
4       | 1
8       | 2
16      | 2
...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The pythonic interface proved quite convenient, and it was actually extended to many functions from the &lt;a href=&quot;https://code.kx.com/pykx/1.6/api/q/q.html&quot;&gt;q reference card&lt;/a&gt;. However, she noticed the absence of equivalent attributes for operators like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cast&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drop&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exec&lt;/code&gt;, among others. So, she needed to explore alternative methods to be able to express arbitrary q expressions. Yet it proved remarkably straightforward! For instance, the previous qSQL query may also be implemented as follows:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{select count distinct MAGNITUDE by STATION from x}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pykx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KeyedTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pykx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'
ESTACION| MAGNITUD
--------| --------
4       | 1
8       | 2
16      | 2
...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As an experienced programmer, she was well aware that using strings to represent expressions might not be the most optimal approach. It could lead to errors, vulnerabilities, and a lack of support from the IDE. So, she would recommend to her teams the Pythonic style of the Pandas, SQL and qSQL APIs whenever possible.&lt;/p&gt;

&lt;h2 id=&quot;chapter-3-putting-the-world-upside-down&quot;&gt;Chapter 3: Putting the World Upside Down&lt;/h2&gt;

&lt;p&gt;Eventually, Emma’s growing appreciation for and excitement in learning about the q/kdb language encouraged her to increasingly try to adopt it directly. However, her colleagues and new hires all knew – and loved – Python as did she, and her codebase contained many useful reusable Python functions. Fortunately, it was straightforward to execute and eval Python code from within her q session.&lt;/p&gt;

&lt;p&gt;Emma started to think of PyKX as a gift specially made for her by the Three Wise Men. It truly offered the best of both worlds, the flexibility and familiarity of Python and the sheer power and efficiency of q/kdb.&lt;/p&gt;

&lt;p&gt;She made her first attempt using a custom-made Python function called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cdist&lt;/code&gt;, which she had no immediate need to migrate away from Python. From her q console, she typed the expected commands to import the necessary libraries:&lt;/p&gt;

&lt;div class=&quot;language-q highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;q)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;l pykx.q&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;q)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.pykx.pyexec&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import numpy as np&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;q)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.pykx.pyexec&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;from scipy.spatial.distance import cdist&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cdist&lt;/code&gt; required several arguments, and Emma simply created new Python variables that referenced q native tables &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pykx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`xa1;a[`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;longitude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pykx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`xa2;a[`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;latitude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pykx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`yb1;b[`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LONGITUDE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pykx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`yb2;b[`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LATITUDE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Calling the function now simply involved evaluating the corresponding Python code and converting the resulting data back to q (using the backtick `):&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;distance_matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pykx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cdist(np.dstack((yb1,yb2))[0], np.dstack((xa1,xa2))[0])&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Alongside her own Python codebase, Mad Flow leveraged highly valuable and popular libraries from the Python ecosystem, such as sci-kit learn (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sklearn&lt;/code&gt;) for statistical and machine learning. “Perhaps the q ecosystem also offers similar ML libraries?” she rightly thought. However, her teams familiarity with – and trust in - sklearn was irresistible, so they simply wanted to reuse their existing Python scripts, like the following, without modifications:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sklearn.linear_model&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LinearRegression&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;humidity&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;precipitation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pressure&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;solar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;temperature&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;wind&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_numpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;load&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_numpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ravel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LinearRegression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This time, though, she took a different approach to invoke the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;model&lt;/code&gt; function. She retrieved it into a PyKX object within the q space using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pykx.get&lt;/code&gt; and utilized the PyKX function-call interface:&lt;/p&gt;

&lt;div class=&quot;language-q highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;modelfunc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.pykx.get&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;`model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modelfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;As a CTO managing a talented yet pressured team, Emma was particularly aware of the trade-offs that introducing new technologies posed to Mad Flow. On one hand, state-of-the-art technologies promise enormous performance, efficiency, and infrastructure cost reductions. On the other hand, team culture and the overwhelming comfort and appreciation of community tools, such as Python, could hinder these advantages if
technologists just want to stick with their preferred tools. Emma therefore especially appreciated PyKX as a vehicle to bring production capabilities into a Python-friendly organization, and those who influenced the codebase from the Python community at large. Her teams couldn’t have been happier with the result. They could maintain and enhance their programming environment of choice, but swiftly transition onerous tasks to q/kdb.&lt;/p&gt;

&lt;p&gt;Thus PyKX allowed Emma to avoid the “with me or against me” mentality that comes with change. There was no unpopular abandonment of Python, far from it. Instead Python took on new meaning as it became the vehicle to steer more analytics into production and make those already in production much more perform. In fact, she soon appointed three of their top architects, Félix, Jesús, and Eloy, as team leads for three different teams responsible for various roles within the Mad Flow ecosystem utilizing the new infrastructure. These appointments align with the three different use cases for the PyKX library described in this post.&lt;/p&gt;

&lt;p&gt;Stay tuned for the follow-up to this post, where Félix, Jesús, and Eloy will elaborate on the use case of heavy traffic and the utilization of PyKX!&lt;/p&gt;

&lt;h3 id=&quot;acknowledgments&quot;&gt;Acknowledgments&lt;/h3&gt;

&lt;p&gt;This post was greatly enhanced thanks to the edits and comments from Steve Wilcokson and Conor McCarthy from KX. Óscar Nydza, Juan M. Serrano, and Marcos Vázquez from Habla Computing did their best to finalize the draft left by Jesús before he started to enjoy his paternity leave to take care of Félix, Jesús, and Eloy.&lt;/p&gt;

&lt;h3 id=&quot;dedication&quot;&gt;Dedication&lt;/h3&gt;

&lt;p&gt;This post is dedicated to Eloy and the three newborns at Habla: Emma, Félix, and Jesús.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Post Picture: Project for “Destino”, Salvador Dalí (1946)&lt;/em&gt;&lt;/p&gt;</content><author><name>Jesús López-González</name></author><summary type="html">All Roads Lead to Kdb: A Python to Production tale Introducing Emma Monad, the main character of our story and CTO of Mad Flow, a large and fictional company dedicated to improving the quality of life in Madrid. Emma was facing the real-world challenge of tackling the issue of heavy traffic in the city. However, she found herself grappling with an outdated, ad-hoc constructed, somewhat inflexible, Mad Flow infrastructure stack. It was a code base that incorporated various modules developed over time, by in-house data science, engineering and developer teams with the help of occasional interns from the nearby university. The application was predominantly built in Python, the most popular programming language of data science over the last decade. However, there were problems with the infrastructure. While open and customizable, it suffered with chaotic organization and frequent performance issues, meaning it was slow and unwieldy when incorporating new traffic data-sets or building new insights quickly. This combined to hinder their ability to define and progress effective transport solutions for the city. Emma wanted to take the greatness of the Mad Flow code base, unlock its true potential, and help fulfil its and their mission of transforming Madrid into a more pleasant, efficient and environmentally friendly city. Emma thus wanted more agile data management and effective production-ready analytics easily deployed. She had heard, via some occasional consultants to her organization, about a popular and seemingly blindingly fast time-series database and analytics platform called kdb. Nevertheless, that was not for her she felt. Her team’s comfort was in Python, the language that Mad Flow was predominantly written in, and it was simply impractical to build in anything else, so Python it was. However, at a local PyData Meetup Emma attended, a data scientist acquaintance told her over drinks about PyKX, an open-source library allowing Python to remain the guiding language, but harnessing the power of kdb at runtime. She decided to give it a try, and as time proved, PyKX just worked, and was indispensable in guiding the team from taking a predominantly ad-hoc research data and analytics codebase into a production powerhouse. The rest of this story tells you how and why. Chapter 1: I just want to stay in Python Setting up kdb to ingest the traffic data, Emma feared, might require several weeks. Somewhat apprehensively, Emma set expectations with her team accordingly. However, there she was, with a skilled Python team that had no prior experience in writing even a simple “Hello World” in Q (which, by the way, is 0N!”Hello World!”), and a Python REPL waiting for instructions. She tried to conceal her fear, and she typed the very first line of PyKX code in the Python shell: &amp;gt;&amp;gt;&amp;gt; import pykx as kx A sense of calm washed over her as she saw that everything was going well. Madrid has many traffic devices scattered throughout the city, so her first task was to retrieve their information, available in several .csv files, into the new platform. According to the PyKX documentation, the pykx.read attribute seemed to be her best option: tdevices = kx.q.read.csv(&quot;devices.csv&quot;, types = &quot;JFFJJSSS&quot;, delimiter=&quot;;&quot;, as_table=True) Her team had extensive familiarity with Pandas notation, so she decided to try some Pandas instructions to retrieve a few columns from the table. It worked effortlessly, or at least it seemed so at first. &amp;gt;&amp;gt;&amp;gt; tdevices[['district', 'id', 'latitude', 'longitude']] pykx.List(pykx.q(' 4 4 1 4 4 4 1 7 .. 3840 3841 3842 3843 3844 3845 3846 3847 .. 40.4305 40.43052 40.42213 40.42143 40.43378 40.42351 40.42816 40.42879.. -3.688323 -3.687256 -3.691727 -3.691929 -3.68847 -3.690991 -3.698403 -3.69455.. ')) “Yikes!” It was so close, but it didn’t look like a dataframe. “Where are my columns?” she thought. That wouldn’t impress her colleagues, for whom familiar columns mattered. If this was to be a barrier, then it would likely be even harder to run the required analytics algorithms on the proposed new platform. But the documentation suggested the pdcommand which just worked: &amp;gt;&amp;gt;&amp;gt; tdevices.pd()[['district', 'id', 'longitude', 'latitude']] district id longitude latitude 0 4 3840 -3.688323 40.430502 1 4 3841 -3.687256 40.430524 2 1 3842 -3.691727 40.422132 ... ... ... ... ... 4741 16 6933 -3.672497 40.484118 4742 16 7129 -3.672500 40.484181 4743 16 7015 -3.672308 40.485002 [4744 rows x 4 columns] Et voilà! Emma simply had to repeat the process to load the remaining dataframes used by the selected algorithm, and she could execute the program smoothly, in its very original form. She had intentionally choose an algorithm that produced output in the form of familiar CSV file standards because that was what she and her team knew, but her PyData and kdb-knowledgeable fellow attendee had told her that kdb data stores were so much more efficient. For now, though, she’d stay with csv. Nonetheless, this marked a significant milestone. Emma had already felt that some of the initial promises were delivered! However, she was well aware of the long road ahead of her if she was to bring along her team and make Mad Flow the agile production analytics platform she wanted it to be. Chapter 2: From Zero to Hero Several weeks passed, and, having onboarded a couple of data scientist interns, she finally found time to work with them and conduct more research on PyKX. “Do as little work as necessary,” she murmured. “I just want my team to work with what they’re comfortable with, but have kdb do the heavy lifting!” Emma repeated these mantras from the PyKX user guide to herself whenever she was tempted to use pd. Indeed, she was now well aware that in order to fully harness the platform’s potential, she should minimize data transfers between the two realms, and delegate as much work as possible to the kdb infrastructure. The key to achieving these goals lay in leveraging the PyKX object API, which allowed a Python-first approach. This API made it easy to embed q/kdb within Python, enabling the direct use of efficient q functions in Python code. Additionally, it provided convenient re-implementations of Pythonic APIs, like the Pandas APIs, eliminating the need for conversions to Pandas in many cases. If feasible, this would enhance the development experience, reduce the chances of errors, and, the team hoped, significantly improve performance. She first tried with the PyKX Pandas API re-implementation, which could be actrivated through the following environment variable: &amp;gt;&amp;gt;&amp;gt; import os &amp;gt;&amp;gt;&amp;gt; os.environ['PYKX_ENABLE_PANDAS_API'] = 'true' Then, she tried the exact same Pandas expression as in the previous section: &amp;gt;&amp;gt;&amp;gt; tdevices[['district', 'id', 'latitude', 'longitude']] pykx.Table(pykx.q(' district id latitude longitude -------------------------------- 4 3840 40.4305 -3.688323 4 3841 40.43052 -3.687256 1 3842 40.42213 -3.691727 4 3843 40.42143 -3.691929 4 3844 40.43378 -3.68847 ... ')) Et voilà! There were the columns, and she didn’t need to convert q tables to Pandas dataframes! “Do as little work as necessary?” Nailed it! And this approach worked for many other methods of the Pandas API as well, such as filtering, dropping, and renaming columns. &amp;gt;&amp;gt;&amp;gt; tdevices = tdevices[tdevices[&quot;elem_type&quot;] == &quot;URB&quot;] &amp;gt;&amp;gt;&amp;gt; tdevices = tdevices.drop([&quot;elem_type&quot;,&quot;district&quot;, &quot;cod_cent&quot;, &quot;name&quot;, &quot;utm_x&quot;, &quot;utm_y&quot;], axis=1) &amp;gt;&amp;gt;&amp;gt; tdevices = tdevices.rename(columns={&quot;longitude&quot;:&quot;long&quot;, &quot;latitude&quot;:&quot;lat&quot;,&quot;id&quot;:&quot;traffic_station&quot;}) While this approach allowed Emma to stay in her beloved Python and avoid costly conversions, the PyKX object API offered other alternatives to query q tables that were worth exploring. Firstly, she had heard that kdb supported querying through plain-old ANSI SQL, and this possibility was enabled through PyKX as well! This time, she decided to use the weather dataset to test this feature: &amp;gt;&amp;gt;&amp;gt; weather = kx.q.read.csv('./abr_meteo23.csv', types='IIII****' + 'FS'*24, delimiter=';', as_table=True) Once loaded, she issued a simple SQL query: &amp;gt;&amp;gt;&amp;gt; kx.q.sql('select STATION, count(distinct(MAGNITUDE)) from $1 group by STATION', weather) pykx.Table(pykx.q(' STATION MAGNITUDE ------------------ 4 1 8 2 16 2 ... That was nice, but she had also heard about qSQL, a collection of query templates resembling SQL, with enhanced expressiveness when dealing with ordered data. qSQL was also available through PyKX by means of a Pythonic interface: &amp;gt;&amp;gt;&amp;gt; kx.q.qsql.select(weather, columns = {'MAGNITUDE': 'count distinct MAGNITUDE'}, by=[&quot;STATION&quot;]) pykx.KeyedTable(pykx.q(' STATION | MAGNITUDE --------| -------- 4 | 1 8 | 2 16 | 2 ... The pythonic interface proved quite convenient, and it was actually extended to many functions from the q reference card. However, she noticed the absence of equivalent attributes for operators like cast, drop, and exec, among others. So, she needed to explore alternative methods to be able to express arbitrary q expressions. Yet it proved remarkably straightforward! For instance, the previous qSQL query may also be implemented as follows: &amp;gt;&amp;gt;&amp;gt; kx.q(&quot;{select count distinct MAGNITUDE by STATION from x}&quot;, weather) pykx.KeyedTable(pykx.q(' ESTACION| MAGNITUD --------| -------- 4 | 1 8 | 2 16 | 2 ... As an experienced programmer, she was well aware that using strings to represent expressions might not be the most optimal approach. It could lead to errors, vulnerabilities, and a lack of support from the IDE. So, she would recommend to her teams the Pythonic style of the Pandas, SQL and qSQL APIs whenever possible. Chapter 3: Putting the World Upside Down Eventually, Emma’s growing appreciation for and excitement in learning about the q/kdb language encouraged her to increasingly try to adopt it directly. However, her colleagues and new hires all knew – and loved – Python as did she, and her codebase contained many useful reusable Python functions. Fortunately, it was straightforward to execute and eval Python code from within her q session. Emma started to think of PyKX as a gift specially made for her by the Three Wise Men. It truly offered the best of both worlds, the flexibility and familiarity of Python and the sheer power and efficiency of q/kdb. She made her first attempt using a custom-made Python function called cdist, which she had no immediate need to migrate away from Python. From her q console, she typed the expected commands to import the necessary libraries: q) system&quot;l pykx.q&quot;; q) .pykx.pyexec&quot;import numpy as np&quot;; q) .pykx.pyexec&quot;from scipy.spatial.distance import cdist&quot;; The function cdist required several arguments, and Emma simply created new Python variables that referenced q native tables a and b: .pykx.set[`xa1;a[`longitude]]; .pykx.set[`xa2;a[`latitude]]; .pykx.set[`yb1;b[`LONGITUDE]]; .pykx.set[`yb2;b[`LATITUDE]]; Calling the function now simply involved evaluating the corresponding Python code and converting the resulting data back to q (using the backtick `): distance_matrix:flip(.pykx.eval&quot;cdist(np.dstack((yb1,yb2))[0], np.dstack((xa1,xa2))[0])&quot;)`; Alongside her own Python codebase, Mad Flow leveraged highly valuable and popular libraries from the Python ecosystem, such as sci-kit learn (sklearn) for statistical and machine learning. “Perhaps the q ecosystem also offers similar ML libraries?” she rightly thought. However, her teams familiarity with – and trust in - sklearn was irresistible, so they simply wanted to reuse their existing Python scripts, like the following, without modifications: from sklearn.linear_model import LinearRegression def model(table): X = table[[&quot;address&quot;, &quot;humidity&quot;, &quot;precipitation&quot;, &quot;pressure&quot;, &quot;solar&quot;, &quot;temperature&quot;, &quot;wind&quot; ]].to_numpy() y = table[&quot;load&quot;].to_numpy().ravel() reg = LinearRegression().fit(X, y) return reg.score(X, y) This time, though, she took a different approach to invoke the model function. She retrieved it into a PyKX object within the q space using pykx.get and utilized the PyKX function-call interface: modelfunc:.pykx.get`model; res:modelfunc[data]; print res`; Conclusions As a CTO managing a talented yet pressured team, Emma was particularly aware of the trade-offs that introducing new technologies posed to Mad Flow. On one hand, state-of-the-art technologies promise enormous performance, efficiency, and infrastructure cost reductions. On the other hand, team culture and the overwhelming comfort and appreciation of community tools, such as Python, could hinder these advantages if technologists just want to stick with their preferred tools. Emma therefore especially appreciated PyKX as a vehicle to bring production capabilities into a Python-friendly organization, and those who influenced the codebase from the Python community at large. Her teams couldn’t have been happier with the result. They could maintain and enhance their programming environment of choice, but swiftly transition onerous tasks to q/kdb. Thus PyKX allowed Emma to avoid the “with me or against me” mentality that comes with change. There was no unpopular abandonment of Python, far from it. Instead Python took on new meaning as it became the vehicle to steer more analytics into production and make those already in production much more perform. In fact, she soon appointed three of their top architects, Félix, Jesús, and Eloy, as team leads for three different teams responsible for various roles within the Mad Flow ecosystem utilizing the new infrastructure. These appointments align with the three different use cases for the PyKX library described in this post. Stay tuned for the follow-up to this post, where Félix, Jesús, and Eloy will elaborate on the use case of heavy traffic and the utilization of PyKX! Acknowledgments This post was greatly enhanced thanks to the edits and comments from Steve Wilcokson and Conor McCarthy from KX. Óscar Nydza, Juan M. Serrano, and Marcos Vázquez from Habla Computing did their best to finalize the draft left by Jesús before he started to enjoy his paternity leave to take care of Félix, Jesús, and Eloy. Dedication This post is dedicated to Eloy and the three newborns at Habla: Emma, Félix, and Jesús. Post Picture: Project for “Destino”, Salvador Dalí (1946)</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/destino.jpg" /><media:content medium="image" url="http://localhost:4000/img/destino.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Q: The Tool of Functional Thought. Part I</title><link href="http://localhost:4000/2021/04/19/q-as-an-impure-functional-language.html" rel="alternate" type="text/html" title="Q: The Tool of Functional Thought. Part I" /><published>2021-04-19T00:00:00+02:00</published><updated>2021-04-19T00:00:00+02:00</updated><id>http://localhost:4000/2021/04/19/q-as-an-impure-functional-language</id><content type="html" xml:base="http://localhost:4000/2021/04/19/q-as-an-impure-functional-language.html">&lt;p&gt;Q was implemented by &lt;a href=&quot;https://queue.acm.org/detail.cfm?id=1531242&quot;&gt;Arthur
Whitney&lt;/a&gt; (Kx Systems), having its
first appearence in 2003. It relies on the shoulders of Kenneth E. Iverson and
his (Turing awarded) work on &lt;em&gt;A Programming Language&lt;/em&gt; (APL) that started more
than six decades ago. Iverson emphasises the &lt;a href=&quot;https://dl.acm.org/doi/pdf/10.1145/358896.358899&quot;&gt;importance of
notation&lt;/a&gt; to concentrate on
more advanced problems, and finds in programming languages the idoneous setting
to make math notation universal, executable and unambiguous. In accordance with
such spirit, most of the APL primitives are still available on q.&lt;/p&gt;

&lt;p&gt;We cannot find a better overview for q as the one contained in the first pages
of &lt;a href=&quot;https://www.q-tips.net&quot;&gt;Q Tips&lt;/a&gt;: &lt;em&gt;“Q is an interpreted, dynamic,
event-driven, functional, array programming language.”&lt;/em&gt;. That long definition
lets us infer why learning q becomes such a challenge. Letting the eternal war
between interpreted/compiled and dynamic/static aside (compiled and static
always win, right? :), this article focuses on the &lt;em&gt;functional&lt;/em&gt; feature, where
we functional programmers can benefit from, since we have walked this road
before.&lt;/p&gt;

&lt;p&gt;Although there is an emerging interest on &lt;a href=&quot;https://www.efinancialcareers.co.uk/news/2017/05/kdbq-banking-alternatives&quot;&gt;taking q and kdb beyond financial
services&lt;/a&gt;,
we won’t be so original here and will use a trading indicator as an example. In
this sense, we’ll try to keep it very easy.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Most of the q/kdb+ tutorials and code snippets revolve around trading
examples, so it is sometimes helpful to have an specialist nearby.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Our indicator simply consists on calculating the max price of an instrument
(for instance: AAPL, AMZN, etc.) in the last year. We’ll assume that the
instrument prices are organized as a kind of table containing all the working
days (Monday-Friday) within the last year. In turn, each of them contains a
price update for every second within the working hours (in particular, from
09:00 to 17:30). We split the problem in three steps, where each of them
corresponds to the following post sections:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Calculating the max of two numbers&lt;/li&gt;
  &lt;li&gt;Calculating the max price within a day&lt;/li&gt;
  &lt;li&gt;Calculating the max price within a whole year&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first one is just a first contact with the language, where q operators and
types basics are introduced. The second one serves us as an excuse to show the
date api, lists, lambda expressions and &lt;em&gt;iterators&lt;/em&gt; (which are essentially
higher order functions over collections). Finally, the last section presents
dictionaries and more iterators, where we briefly suggest connections with
functors and monads.&lt;/p&gt;

&lt;p&gt;Throughout these posts, we will show q and scala snippets side by side. We want
to remark that our intention isn’t to provide a comparison of these languages,
though, but rather support our explanations by means of snippets from a more
conventional functional language such as Scala, for merely didactic purposes. We
encourage you to &lt;a href=&quot;https://code.kx.com/q/learn/install/&quot;&gt;install q&lt;/a&gt; and type the
expressions below on your own.&lt;/p&gt;

&lt;h1 id=&quot;calculating-the-max-of-two-numbers&quot;&gt;Calculating the max of two numbers&lt;/h1&gt;

&lt;p&gt;The q language allows us to calculate the max of two numbers by means of the
operator &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;|&lt;/code&gt;. We show how to use it in the following snippet, extracted from a
q REPL session, where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;q)&lt;/code&gt; acts as the default prompt:&lt;/p&gt;
&lt;div class=&quot;language-q highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;q)&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Scala also has a REPL as part of its ecosystem, where the default prompt is
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scala&amp;gt; &lt;/code&gt;. We could translate the very same logic into Scala using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max&lt;/code&gt;
method from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Integer&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;res0&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;We could move &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;|&lt;/code&gt; to its prefix notation, using a familiar syntax for
Haskellers, where we place the operator symbol in parentheses:&lt;/p&gt;
  &lt;div class=&quot;language-q highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;q)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
  &lt;p&gt;As can be seen, the arguments are separated by semicolons and surrounded by
square brackets. As we’ll see later, q supplies many flavours of syntactic
sugar while invoking functions beyond these ones, but we just wanted to remark
that the operator &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;|&lt;/code&gt; could behave as any other function. This notion will
become relevant later on.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the previous snippets, we’ve just produced an output and we’ve let the REPL
to show it, but we could have assigned a name to the resulting value. The q
notation to introduce a variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; is as follows:&lt;/p&gt;
&lt;div class=&quot;language-q highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;q)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;q)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Which we translate into Scala by means of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var&lt;/code&gt; instead of a&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;val&lt;/code&gt;, since q
variables can be reassigned:&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;res2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Although q embraces immutability for a wide range of situations, it is clearly
not a pure functional language. It neither puts the same level of pressure on
avoiding mutable state as the one exhibited by Scala.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A remarkably interesting q feature is that variables can be introduced at any
point. For instance the expression &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x:3|y:2&lt;/code&gt; introduces &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; &lt;em&gt;on the fly&lt;/em&gt; and
just returns its value to keep going. We’d need two different statements to do
that in Scala, as in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var y = 2; var x = 3 max y&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another important aspect from the previous snippets are the variable types. We
can see that the Scala version indicates that the type of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Int&lt;/code&gt;, although
we could have removed it and let the type inferencer work for us. In the case of
q, which is a dynamic language, we could use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; primitive to find it:&lt;/p&gt;
&lt;div class=&quot;language-q highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;q)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Where you hoping to find something more familiar? Welcome to q! The number 7
indicates that the value of this type is a long; the negative symbol sugggests
an atomic value, i.e. not a list of longs; and the final &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;h&lt;/code&gt; just manifests that
the value that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; returns has &lt;em&gt;short&lt;/em&gt; as type. You can find the complete
relation between numbers and types in &lt;a href=&quot;https://code.kx.com/q/basics/datatypes/&quot;&gt;this
section&lt;/a&gt; from the official
documentation.&lt;/p&gt;

&lt;h1 id=&quot;calculating-the-max-price-within-a-day&quot;&gt;Calculating the max price within a day&lt;/h1&gt;

&lt;p&gt;Instead of assuming a predefined input list to play with, we find it convenient
to show how to generate a list of random prices. Once generated, we’ll move on
to the actual calculation of the max value within it. Finally, we’ll introduce a
variation of the problem, where we’ll calculate the max value as long as it
doesn’t exceed a given limit.&lt;/p&gt;

&lt;h2 id=&quot;generating-random-prices-for-a-working-day&quot;&gt;Generating random prices for a working day&lt;/h2&gt;

&lt;p&gt;As mentioned before, we assume that the input includes a price update for every
single second between the range that goes from 09:00 to 17:30. How many seconds
are there in such interval?&lt;/p&gt;
&lt;div class=&quot;language-q highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;q)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;ld&quot;&gt;17:30:00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ld&quot;&gt;09:00:00&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;30600&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;Have you noticed the lack of space characters within q expressions? Q is
really committed to shortness and encourages the programmer to limit them.
This subtle difference has a considerable impact while reading q code,
although eventually, you get used to it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We clumsily adapt the previous expression into Scala using the &lt;em&gt;duration&lt;/em&gt;
interface:&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.concurrent.duration._&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;17.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hours&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;30.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minutes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;9.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hours&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;toSeconds&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30600&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;There are several aspects to discuss here, but we start emphasising that q
primitives for dates and times are just superb. Creating, operating and casting
different units of times is a clean, elegant and intuitive task. In the example
above, we just create the opening and closing seconds and then we subtract them.
We use the resulting output to calculate the number of seconds in the interval.
The most striking feature of the q snippet is perhaps the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;7h$&lt;/code&gt; at the
beginning, which somehow corresponds to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toSeconds&lt;/code&gt; invocation from the
Scala definition. In this sense, we use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$&lt;/code&gt; operator to cast an expression
to another type. As you already know, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;7&lt;/code&gt; is associated to the &lt;em&gt;long&lt;/em&gt; type, so
we are casting the subtraction result to its numeric form.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;At first sight, we could infer that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x$y-z&lt;/code&gt; interprets the subtraction before
the casting due to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt; having a higher precedence. But this is not the case.
In fact, no q operator has higher precedende than another, since it will
always interpret expressions from right to left. For instance, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2*3+1&lt;/code&gt; returns
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;8&lt;/code&gt;. If you combine this right-biased interpretation with the fact that it is
possible to introduce variable names at any point of an expression, you can
find yourself spending a non-negligible amount of time trying to understand
why the following expression does return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4&lt;/code&gt;:&lt;/p&gt;
  &lt;div class=&quot;language-q highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;q)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;q)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
  &lt;p&gt;Notice that the second line rewrites &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; at the very beginning, remember, at
the rightmost expression. We show the Scala analogous to remark this aspect:&lt;/p&gt;
  &lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;res3&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
  &lt;p&gt;Again, this way of interpreting code is yet another hurdle that makes q
difficult to read for newbies, but eventually, you get used to it (again
:smile:). Before moving on, we want to clarify that q programmers can change
associativity by using parenthesis, for instance: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(2*3)+1&lt;/code&gt;, although it’s
more idiomatic to avoid them and reorder the code, if possible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once we know the number of random prices that the intraday list will contain,
which we assigned to the variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt;, it is time to generate them. To do so, we
simply use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt; operator:&lt;/p&gt;
&lt;div class=&quot;language-q highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;q)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1000f&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;231.8545&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;102.0847&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;974.3216&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;673.6161&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;404.1387&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;626.0377&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;211.9141&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;604.1371&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;52.77&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now, we show what we have considered its Scala counterpart by means of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;util.Random.nextFloat&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;prices&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextFloat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;618.7332&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;216.10922&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;481.55737&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;257.13562&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;95.020&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The previous snippets generate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; float numbers in the range that goes from
zero to one thousand.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that the generation of random numbers by means of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt; is quite easy but
impure, since this operation isn’t referentially transparent. In fact, there
is a &lt;a href=&quot;https://code.kx.com/q/basics/syscmds/#s-random-seed&quot;&gt;global seed&lt;/a&gt; which
is mutated when random values are demanded. We avoid introducing the &lt;a href=&quot;https://livebook.manning.com/book/functional-programming-in-scala/chapter-6/&quot;&gt;pure
approach embracing
seeds&lt;/a&gt;
in Scala, to keep the comparison more direct.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A nice feature from both q and Scala is that most of the time the output
reflects the very same code that we need to build such value. For instance, we
can generate a list of floats using the very same notation:&lt;/p&gt;
&lt;div class=&quot;language-q highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;q)&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;231.8545&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;102.0847&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;974.3216&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;231.8545&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;102.0847&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;974.3216&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;whose associated type is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;9h&lt;/code&gt;, meaning a list of floats, and that we adapt to
Scala as follows:&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;231.8545f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;102.0847f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;974.3216f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;res4&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;231.8545&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;102.0847&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;974.3216&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Having generated a completely crazy list of intraday prices that nobody should
invest in, we will finally proceed to calculate its higher value.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We recommend the &lt;em&gt;Q Tips&lt;/em&gt; book to find a more realistic generation of random
prices, which goes beyond the scope of this post.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;finding-the-max-value&quot;&gt;Finding the max value&lt;/h2&gt;

&lt;p&gt;As functional programmers, we would find the greatest value by &lt;em&gt;folding&lt;/em&gt; the
list. In q, the analogous for this function is the so-called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;over&lt;/code&gt; &lt;em&gt;iterator&lt;/em&gt;
(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The notion of &lt;em&gt;iterator&lt;/em&gt; in Scala refers to a different concept, namely
generators. Indeed, we should understand &lt;a href=&quot;https://code.kx.com/q/ref/iterators/&quot;&gt;q
iterators&lt;/a&gt; as a catalogue of
higher-order functions over collections such as lists.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This operator takes the reducing function and the list itself as input
arguments, so we could get the highest price by passing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;|&lt;/code&gt; operator as
reducer:&lt;/p&gt;
&lt;div class=&quot;language-q highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;q)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prices&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;999.9987&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We can get the analogous behaviour in Scala by using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce&lt;/code&gt; method and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max&lt;/code&gt; as reducer:&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;res5&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;999.99884&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Obviously, they don’t lead to the very same output since each version produces
its own random numbers, but they are close enough!&lt;/p&gt;

&lt;p&gt;As a pure and total functional programmer you might be missing the part of the
algebra that corresponds to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nil&lt;/code&gt; (or empty list) case. In fact, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;over&lt;/code&gt;
would return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;()&lt;/code&gt; when we pass an empty list as second argument. This value
represents the empty list and I guess we could map it as a kind of Scala’s
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;()&lt;/code&gt;, which corresponds to the unique instance for the &lt;em&gt;Unit&lt;/em&gt; type. So, to a
certain extent, we could consider that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(+/)&lt;/code&gt; returns either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;()&lt;/code&gt; or the
greatest value, the dynamic poor man’s type for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Either[Unit, Float]&lt;/code&gt;,
&lt;a href=&quot;https://bartoszmilewski.com/2015/01/13/simple-algebraic-data-types/&quot;&gt;isomorphic to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Option&lt;/code&gt;
type&lt;/a&gt;. The
Scala version simply raises an exception when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce&lt;/code&gt; is invoked from an empty
list. To make things safer, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;over&lt;/code&gt; can take an additional argument to take the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nil&lt;/code&gt; case into account as well, as we show in the following snippet:&lt;/p&gt;
&lt;div class=&quot;language-q highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;q)&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prices&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;999.9987&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;which would produce &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; when prices correspond to an empty list. From the Scala
viewpoint, we can use the pure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fold&lt;/code&gt; method instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce&lt;/code&gt; (which is
actually implemented as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foldLeft&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;fold&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;res6&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;999.99884&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;One of the fundamental pillars of APL is the &lt;em&gt;suggestivity&lt;/em&gt; of notation,
where Iverson emphasises the importance of inferring new behaviours from
existing expressions. In this sense, we could guess that by passing the
operator &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt; that calculates the minumum of two values as an argument for
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;over&lt;/code&gt;, we should be able to obtain the lowest price:&lt;/p&gt;
  &lt;div class=&quot;language-q highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;q)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prices&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;0.0008079223&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
  &lt;p&gt;The same suggestivity applies to Scala, where we can pass the min function as
an argument to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reduce&lt;/code&gt;:&lt;/p&gt;
  &lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;res7&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.02861023&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, we must say that calculating the maximum value from a given list is so
common, that q supplies &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max&lt;/code&gt; as an alias for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;|/&lt;/code&gt;, as in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max prices&lt;/code&gt;. Scala
does also supply the analogous alternative, as in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prices.max&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;finding-the-max-value-with-an-upper-bound&quot;&gt;Finding the max value with an upper bound&lt;/h2&gt;

&lt;p&gt;Calculating the maximum and minimum prices is ok, but we could be interested in
implementing more sophisticated indicators. For instance, calculating the higher
price that doesn’t exceed a given limit. At this point, one may wonder if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;over&lt;/code&gt;
is restricted to native predefined operators or if we could pass our own
operator as argument in order to implement that logic. Q, being a functional
language, provides support for lambda expressions, as we show next:&lt;/p&gt;
&lt;div class=&quot;language-q highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;q)&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;500f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prices&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;499.9798&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We rely on the Scala adaptation to explain what is going on:&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;fold&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;500f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;res8&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;499.98163&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As you can see, we replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;|&lt;/code&gt; with the lambda expression that implements the
desired logic: getting the max of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; as long as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; is lower than
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;500f&lt;/code&gt;. The q lambda expression is surrounded by curly braces, where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[x;y]&lt;/code&gt;
correspond to the input parameters, using a consistent notation with regard to
the argument passing style. The rest of the expression (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$[y&amp;lt;500f;x|y;x]&lt;/code&gt;) acts
as the body, where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$&lt;/code&gt; operator is therefore the analogous for an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt;
statement.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;So far, we’ve seen that the character &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$&lt;/code&gt; serves as the casting operator and
as the &lt;em&gt;if&lt;/em&gt; statement. These kind of symbol overloading is very frequent and
turns out to be a major barrier to start reading q code from experienced
programmers. I guess that the same barrier applies for Scala newbies trying to
understand the many uses of the underscore symbol (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s worth mentioning that when the parameter block is omitted, q will
understand names &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z&lt;/code&gt; as the first, second and third parameters,
respectively. It’s quite similar to the Scala &lt;em&gt;placeholder&lt;/em&gt; syntax (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_ + _&lt;/code&gt;),
without the limitation of having to use each parameter exactly once. On its
part, q has the limitation of lacking additional names for functions with a
number of parameters greater than three. We apply this idea in the following
definition, where we parameterize the hardcoded limit as an additional argument
and assign the resulting function a name:&lt;/p&gt;
&lt;div class=&quot;language-q highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;q)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The Scala counterpart would be:&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lim&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Unfortunately, we can exploit Scala placeholder syntax here.&lt;/p&gt;

&lt;p&gt;Once we have defined the new name to get the maximum value which is in turn
lower than a given limit, we can modularise the previous logic:&lt;/p&gt;
&lt;div class=&quot;language-q highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;q)&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[;;&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;500f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;	&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;499.9798&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We can adapt this code into Scala as follows:&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;fold&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;500f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;res10&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;499.88913&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As you have probably guessed by the Scala definition, what q achieves in
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lim[;;500f]&lt;/code&gt; is to fix the third argument to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;500f&lt;/code&gt; and return a function that
still expects the first and second ones, as determined by the lack of arguments
for such positions. In q, this technique is known as &lt;em&gt;projection&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Q deploys both the currified and non-currified versions of every function. In
this sense, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lim&lt;/code&gt; can be invoked both as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lim[1;2;3]&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lim[1][2][3]&lt;/code&gt;. If
we combine this currying notion with projection, the flexibility of function
invocacion becomes astonishing. To illustrate it, we show further
alternatives for the very same invocation:&lt;/p&gt;
  &lt;div class=&quot;language-q highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;lim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[;;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before moving on to the next section, we’d like to clarify that the &lt;em&gt;limit&lt;/em&gt;
logic could benefit from a different implementation. In fact, we think that the
following code is more idiomatic in q:&lt;/p&gt;
&lt;div class=&quot;language-q highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;q)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;500f&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;499.9798&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The previous code could be adapted into Scala as follows:&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;500f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;max&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;res11&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;499.88913&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;However, the q approach is radically different in the shadows, as the next post
will show.&lt;/p&gt;

&lt;h1 id=&quot;calculating-the-max-price-within-a-whole-year&quot;&gt;Calculating the max price within a whole year&lt;/h1&gt;

&lt;p&gt;Again, we find it interesting to generate the random prices from scratch. In
fact, instead of simply using a longer list of prices, we’ll produce a list of
prices associated to every working day, to keep data tidier. Once generated,
we’ll move on to the actual calculation of the max value within the brand new
structure.&lt;/p&gt;

&lt;h2 id=&quot;generating-a-whole-year-of-random-prices&quot;&gt;Generating a whole year of random prices&lt;/h2&gt;

&lt;p&gt;First of all, we’ll use the techniques that we’ve been learning on the previous
section to make the existing functions more reusable. For example, we adapt the
generation of the prices for a day as follows:&lt;/p&gt;
&lt;div class=&quot;language-q highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;q)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rnd_prices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As usual, we adapt the snippet into Scala:&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rnd_prices&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Duration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;nf&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;toSeconds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextFloat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As you can see, we’ve just parameterized the starting time, ending time and
higher price as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z&lt;/code&gt;, respectively. This function will be reused to
generate different random prices for each working day.&lt;/p&gt;

&lt;p&gt;Before moving on, we need to identify the working days within a range of dates.
We do so by means of the next function:&lt;/p&gt;
&lt;div class=&quot;language-q highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;q)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;working_days&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dates&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;til&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This time we avoid showing the Scala counterpart, since it would be far more
complex and doesn’t add value from a didactic perspective. Anyway, the previous
function just keeps working days, those whose modulo 7 is greater than 1. To
understand why, we need to take into account that q dates start counting on
2000.01.01, which happened to be Saturday. We supply the starting and ending
dates that allow us to collect the working days from 2020 (such a wonderful
year, huh?):&lt;/p&gt;
&lt;div class=&quot;language-q highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;q)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;working_days&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ld&quot;&gt;2020.01.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;ld&quot;&gt;2021.01.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We’ll assume that such list was generated in Scala somehow:&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;wds&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, it’s time to associate the random prices for each working day. We do so by
means of the following expression, where two new features are introduced:&lt;/p&gt;
&lt;div class=&quot;language-q highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;q)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rnd_prices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ld&quot;&gt;09:00:00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;ld&quot;&gt;17:30:00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1000f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wds&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;q)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prices&lt;/span&gt;
&lt;span class=&quot;ld&quot;&gt;2020.01.01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;447.9321&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;687.9944&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;491.4469&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;426.7794&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;650.8995&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;147.1279&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;440.327&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;37.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;ld&quot;&gt;2020.01.02&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;601.4124&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;818.0695&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;549.0516&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;985.867&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;387.0052&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;315.4341&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;338.4381&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;40.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;ld&quot;&gt;2020.01.03&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;811.1749&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;237.0332&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;220.7359&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;435.7565&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;190.276&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;35.80185&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;491.0418&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;82.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;ld&quot;&gt;2020.01.06&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;780.8859&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.676414&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;286.5235&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;149.7137&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;568.0527&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;916.0366&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;66.16259&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;46.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It’s adapted into Scala as follows:&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Date&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;nv&quot;&gt;wds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;wds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rnd_prices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;9.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hours&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;17.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hours&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;30.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1000f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;toMap&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Date&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2020.01&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;01&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;977.59784&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;185.63521&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;586.2779&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;221.09216&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;775.3352&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;645.992&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;206.07281&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;427.91003&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;166.2563&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;639.81836&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;717.57886&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;842.7385&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;189.36241&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;755.4852&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;229.79778&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;548.248&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;472.32468&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;383.4009&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;920.29846&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;211.65651&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;132.54398&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;514.35223&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;135.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;On the one hand, we remark the iterator &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;each&lt;/code&gt;. It corresponds to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt;
invocation on the Scala snippet (that we functional programmers associate to
functors). In fact, they both allow us to apply a function over each element at
the collection. The mapper ignores the existing value, since the objective here
is to replace the date with the random prices.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Scala version could avoid the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zip&lt;/code&gt; invocation and reuse &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; for putting
dates and lists together:&lt;/p&gt;
  &lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Date&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;nv&quot;&gt;wds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rnd_prices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;9.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hours&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;17.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hours&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;30.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minutes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1000f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;toMap&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
  &lt;p&gt;However, we think that the original version has a better correspondence with
the q one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On the other hand, we must focus on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!&lt;/code&gt; operator as well, since it’s
introducing a major abstraction from q: &lt;em&gt;dictionaries&lt;/em&gt;. Although the inner
implementation details may be completely different, I find it fair to compare
dictionaries with maps. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!&lt;/code&gt; operator is adapted as a combination of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zip&lt;/code&gt;,
to place keys with values together, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toMap&lt;/code&gt;, to turn the list of pairs into
an actual map. By using it, we end up with a collection where each working day
has a list of prices associated.&lt;/p&gt;

&lt;h2 id=&quot;finding-the-max-value-1&quot;&gt;Finding the max value&lt;/h2&gt;

&lt;p&gt;Given the generated prices, we think that there are two main approaches to
calculate the higher price:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Calculate the maximum price for each day and then calculate the maximum one
among them&lt;/li&gt;
  &lt;li&gt;Put all the prices together and just calculate the maximum one&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first approach is carried out in the next code:&lt;/p&gt;
&lt;div class=&quot;language-q highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;q)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;ow&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prices&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;999.9998&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;that we can translate into Scala this way:&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;mapValues&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;_2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;res12&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;999.9997&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As suggested by the Scala expression, when we use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;each&lt;/code&gt; iterator over a
dictionary, we are actually applying the mapper over the values, keeping the
keys as is. Once we’ve calculated the max value associated to each day, we can
invoke &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max&lt;/code&gt; directly over the resulting collection. In the Scala case, we need
to pick the value as a final step, since the involved key is also returned.&lt;/p&gt;

&lt;p&gt;The second approach is implemented as follows:&lt;/p&gt;
&lt;div class=&quot;language-q highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;q)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;raze&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prices&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;999.9998&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It is adapted into Scala using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flatten&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;prices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;flatten&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;max&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Indeed, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;raze&lt;/code&gt; just flattens the dictionaries of lists, and roughly corresponds
to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;join&lt;/code&gt; monadic operation. If we take into account that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;,&lt;/code&gt; is the list
concatenation operator, it should be straightforward to understand the
implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;raze&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-q highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;q)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;raze&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;,/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Indeed, it just uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;over&lt;/code&gt; iterator using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;,&lt;/code&gt; as reducer.&lt;/p&gt;

&lt;p&gt;At this point we must say that the first approach is preferable, since it’s more
modular and therefore parallelizable. In fact, there’s a variant of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;each&lt;/code&gt; which
is referred to as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;peach&lt;/code&gt; that we could use to exploit such aspect. However, we
wanted to show the second approach since it’s almost mandatory for a functional
programming-related post to make &lt;a href=&quot;https://mvanier.livejournal.com/3917.html&quot;&gt;&lt;em&gt;yet another
monad&lt;/em&gt;&lt;/a&gt; reference, isn’t it?&lt;/p&gt;

&lt;h1 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Q enjoys the common traits of functional languages: lambdas, higher-order
functions, etc. with some nice features like projection.&lt;/li&gt;
  &lt;li&gt;Q is not for the purest minds, given that side effects are the norm in certain
situations, such as the generation of random numbers or the reassignment of
variables.&lt;/li&gt;
  &lt;li&gt;Although we acknowledge that q notation isn’t for everyone, we find it very
beautiful and extremely concise (even when we let the insane lack of space
characters and operator overloading aside).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before concluding, we must warn you that this post is far from reflecting the
real power of q. You should wait to our next post on array processing to see it!
It takes a while to experience the Zen, but you’ll get a really powerful &lt;em&gt;tool
of thought&lt;/em&gt; as a reward.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Post Picture: Trilogía del desierto. Espejismo, Salvador Dalí (1946)&lt;/em&gt;&lt;/p&gt;</content><author><name>Jesús López-González</name></author><summary type="html">Q was implemented by Arthur Whitney (Kx Systems), having its first appearence in 2003. It relies on the shoulders of Kenneth E. Iverson and his (Turing awarded) work on A Programming Language (APL) that started more than six decades ago. Iverson emphasises the importance of notation to concentrate on more advanced problems, and finds in programming languages the idoneous setting to make math notation universal, executable and unambiguous. In accordance with such spirit, most of the APL primitives are still available on q.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/trilogia-espejismo.jpg" /><media:content medium="image" url="http://localhost:4000/img/trilogia-espejismo.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Q: The Tool of Functional Thought</title><link href="http://localhost:4000/2021/04/18/q-the-tool-of-functional-thought.html" rel="alternate" type="text/html" title="Q: The Tool of Functional Thought" /><published>2021-04-18T00:00:00+02:00</published><updated>2021-04-18T00:00:00+02:00</updated><id>http://localhost:4000/2021/04/18/q-the-tool-of-functional-thought</id><content type="html" xml:base="http://localhost:4000/2021/04/18/q-the-tool-of-functional-thought.html">&lt;h1 id=&quot;about-this-series&quot;&gt;About this series&lt;/h1&gt;

&lt;p&gt;This series of posts describes our experience while learning
&lt;a href=&quot;https://code.kx.com/q/learn/startingkdb/language/&quot;&gt;&lt;em&gt;q&lt;/em&gt;&lt;/a&gt; and &lt;em&gt;kdb+&lt;/em&gt; by Kx
Systems. According to &lt;a href=&quot;https://en.wikipedia.org/wiki/Kdb%2B&quot;&gt;the wikipedia&lt;/a&gt;,&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;“kdb+ is a high-performance column-store database that was designed to
process and store large amounts of data… created with financial
institutions in mind… At the core of kdb+ is the built-in programming
language, q, a concise, expressive query array language, and dialect of the
language APL”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Although q is also a functional programming language, it has many features that
make it different from other conventional languages such as Haskell, OCaml,
etc. Given this situation, we’ll try to provide an overview of q basics,
connecting the missing pieces to our previous knowledge on functional
programming, using Scala and Spark to guide the explanations. We hope it also
works in the opposite direction, so q programmers can also benefit from this
introduction, which will be divided into the following posts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hablapps.com/blog/2021/04/19/q-as-an-impure-functional-language.html&quot;&gt;Q as an (impure) functional language&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Q as an array processing language&lt;/li&gt;
  &lt;li&gt;Q as a query language for kdb+&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first post introduces q as a functional language, showing the main q
features that are already familiar to the conventional functional programmer
which could be used from the very first day. The second post will put focus on
q as an array processing language, which is probably the main source of q
weirdness, so we’ll try to connect it to existing theory on the functional
paradigm. Finally, the last post will introduce q and kdb+ as a query language
and a column-oriented database, respectively, to make the data engineer happy.&lt;/p&gt;

&lt;h2 id=&quot;why-q&quot;&gt;Why q?&lt;/h2&gt;

&lt;p&gt;Each day, we set aside a time to experiment with new technologies, and we are
especially interested on functional languages. A colleague from the Scala
community pointed us towards q. The following items summarise the alleged
language benefits why we decided to give it a go:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Q is fast, sooo fast&lt;/li&gt;
  &lt;li&gt;Q is a functional query language&lt;/li&gt;
  &lt;li&gt;Q is a well-founded language that relies on APL&lt;/li&gt;
  &lt;li&gt;Q is highly demanded in the financial industry&lt;/li&gt;
  &lt;li&gt;Q is quite a challenge&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After a few months of reading q material and coding, we can confirm that none
of the previous items is a myth. Although we feel that we still have a long way
to master q/kdb, we are confident that we have now a good perspective on how
hard it is to learn this language. In fact, reflecting this experience is
perhaps the major contribution of this series of posts. Having said so, &lt;a href=&quot;https://www.hablapps.com/blog/2021/04/19/q-as-an-impure-functional-language.html&quot;&gt;we’re
ready to go now!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Post Picture: Momento de Transición, Salvador Dalí (1934)&lt;/em&gt;&lt;/p&gt;</content><author><name>Jesús López-González</name></author><summary type="html">About this series</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/momento-de-transicion.jpg" /><media:content medium="image" url="http://localhost:4000/img/momento-de-transicion.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Todo lo que quieres saber y nunca te atreviste a preguntar del pattern matching. Parte II.</title><link href="http://localhost:4000/2021/02/15/Pattern-matching-experto.html" rel="alternate" type="text/html" title="Todo lo que quieres saber y nunca te atreviste a preguntar del pattern matching. Parte II." /><published>2021-02-15T00:00:00+01:00</published><updated>2021-02-15T00:00:00+01:00</updated><id>http://localhost:4000/2021/02/15/Pattern-matching-experto</id><content type="html" xml:base="http://localhost:4000/2021/02/15/Pattern-matching-experto.html">&lt;h2 id=&quot;repositorio&quot;&gt;Repositorio&lt;/h2&gt;
&lt;p&gt;Si prefieres leer este post en formato notebook, lo tienes disponible en &lt;a href=&quot;https://github.com/alfonsorr/pattern-matching-post&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Si quieres comentar este post, hacer alguna pregunta o sugerencia, puedes usar nuestro &lt;a href=&quot;https://github.com/hablapps/blog/discussions/4&quot;&gt;foro del post&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;conocimientos-avanzados-de-pattern-matching&quot;&gt;Conocimientos avanzados de pattern matching&lt;/h2&gt;
&lt;p&gt;En el anterior post ya vimos todas las posibilidades que nos ofrece el pattern matching para realizar nuestras condiciones. Ahora verás como puedes llevar esta herramienta a un nivel superior&lt;/p&gt;

&lt;h2 id=&quot;bricomanía-crea-tus-propios-extractores&quot;&gt;Bricomanía: crea tus propios extractores&lt;/h2&gt;
&lt;p&gt;Ya vimos que los extractores nos permiten descomponer el elemento que pasamos al &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match&lt;/code&gt; sacando información interna.&lt;/p&gt;

&lt;p&gt;¿Y cómo puede ser esto posible? ¿Cuándo se que algo se puede descomponer o no? Muy sencillo, tenemos que ver si existe en una clase u objeto un método llamado &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unapply&lt;/code&gt;. Este es el truco que usa scala para poder descomponer algo. Scala tiene ya preparado este método en el objeto de compañía para todos sus tipos básicos (tuplas, listas o toda case class que creas).&lt;/p&gt;

&lt;h3 id=&quot;extractores-básicos&quot;&gt;Extractores básicos&lt;/h3&gt;

&lt;p&gt;Lo primero a tener en cuenta son los elementos que entran en el método, en este caso siempre tiene que ser uno y del tipo que queremos descomponer, y lo que devolverá siempre ha de ser un Option, que será del tipo extraido.&lt;/p&gt;

&lt;p&gt;Veamos un ejemplo primero, en el que queremos comprobar si un string se puede transformar a un integer. El problema es que el método &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toInteger&lt;/code&gt; que scala nos provee lanza excepciones, por lo que no es seguro usarlo desde un pattern matching. Sin embargo, nosotros podemos crear una clase que lo permita.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ValidIntString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// creamos el objeto que permitirá extraer el string si es valido&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unapply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// esperamos descomponer un string, y poder sacar un integer si es posible&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;toInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Si logra ejecutar sin excepciones, devolverá un some con el valor&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// en caso que no fuera integer, lanzaría excepción, por lo que devolvemos None&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;defined &lt;span style=&quot;color:green&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color:cyan&quot;&gt;ValidIntString&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Ahora podemos usar nuestro flamante nuevo extractor&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;123&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ValidIntString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;es un integer con valor $n&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;no es integer&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ValidIntString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;es un integer con valor $n&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;no es integer&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;res36_0&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“es un integer con valor 123”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res36_1&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“no es integer”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Funciona perfectamente, pero ¿y si quisiera devolver más de un elemento, como por ejemplo hacen en la tupla que vimos antes? Simplemente tenemos que devolver una tupla. Por ejemplo si el valor se puede transformar en integer queremos devolver una tupla que contenga ese valor y su doble.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ValidIntStringWithDouble&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// creamos el objeto que permitirá extraer el string si es valido&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unapply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// esperamos descomponer un string, y poder sacar una tupla de integes si es posible&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;toInt&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Si logra ejecutar sin excepciones, devolverá un Some con el valor&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// en caso que no fuera integer, lanzaría excepción, por lo que devolvemos None&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;defined &lt;span style=&quot;color:green&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color:cyan&quot;&gt;ValidIntStringWithDouble&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;123&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ValidIntStringWithDouble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;es un integer con valor $n y su doble $n2&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;no es integer&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ValidIntStringWithDouble&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;es un integer con valor $n y su doble $n2&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;no es integer&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;res38_0&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“es un integer con valor 123 y su doble 246”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res38_1&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“no es integer”&lt;/span&gt;&lt;/p&gt;

&lt;h5 id=&quot;extractores-variádico&quot;&gt;Extractores variádico&lt;/h5&gt;

&lt;p&gt;Si necesitamos un número indeterminado de elementos a devolver podemos hacer uso de la variante variádico unapplySeq, en la que devolveremos una secuencia de elementos. Cuando se hace la extracción en el match, se tiene en cuenta el número de elementos que se le pasan como argumento.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SplitDecimals&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// creamos el objeto que permitirá extraer el string si es valido&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unapplySeq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// esperamos descomponer un string, y devolver un número indefinido de parámetros.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;toFloat&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hasDecimals&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// si es par tendrá 2 elementos la lista, si es impar solo uno&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasDecimals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;toInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;toInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Al ser par devolvemos 2 elementos&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
          &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;toInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Al ser impar devolvemos solo uno&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// en caso que no fuera integer, lanzaría excepción, por lo que devolvemos None&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;defined &lt;span style=&quot;color:green&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color:cyan&quot;&gt;SplitDecimals&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;&quot;123.0000&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SplitDecimals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tiene decimales: $n1 . $n2&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SplitDecimals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;es entero y tenemos $n1 solo&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;no es numerico&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&quot;123.56454&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SplitDecimals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tiene decimales: $n1 . $n2&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SplitDecimals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;es entero y tenemos $n1 solo&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;no es numerico&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SplitDecimals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tiene decimales: $n1 y $n2&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SplitDecimals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;es entero y tenemos $n1 solo&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;no es numerico&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;res40_0&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“es entero y tenemos 123 solo”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res40_1&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“tiene decimales: 123 . 564537”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res40_2&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“no es numerico”&lt;/span&gt;&lt;/p&gt;

&lt;h4 id=&quot;extractores-booleanos&quot;&gt;Extractores Booleanos&lt;/h4&gt;

&lt;p&gt;Por último, scala permite otro tipo de extractor en el que no interesa extraer un elemento si no ver si cumple una propiedad. Al igual que hacemos en la parte de refinado, en la que podemos comprobar si cumple una condición declarándolo explicitamente. Tambien podríamos encapsular esa lógica para darle un nombre legible. Para hacer esto también tenemos que crear un extractor con el método unapply, pero en vez de devolver un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Option&lt;/code&gt;, solo tenemos que devolver un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Boolean&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IsEaven&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unapply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;defined &lt;span style=&quot;color:green&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color:cyan&quot;&gt;IsEaven&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;54&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IsEaven&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;el valor es par&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;el valor es impar&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IsEaven&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;el valor es par&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;el valor es impar&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;res42_0&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“el valor es par”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res42_1&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“el valor es impar”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Y aunque en ejemplos anteriores siempre usamos &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object&lt;/code&gt;para crear nuestro extractor, también podemos hacer un extractor que requiera parámetros usando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt;. Por requermientos de la sintaxis tenemos que instanciarlo antes, para no confundir los parámetros del extractor con las comparaciones que queremos hacer.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GreaterThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unapply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;defined &lt;span style=&quot;color:green&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:cyan&quot;&gt;GreaterThan&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mayor45&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GreaterThan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;54&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mayor45&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;el valor es mayor que 45&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;el valor es menor o igual&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mayor45&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;el valor es mayor que 45&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;el valor es menor o igual&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;mayor45&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;GreaterThan&lt;/span&gt; = &lt;span style=&quot;color:yellow&quot;&gt;GreaterThan&lt;/span&gt;(&lt;span style=&quot;color:green&quot;&gt;45&lt;/span&gt;)
&lt;span style=&quot;color:cyan&quot;&gt;res44_1&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“el valor es mayor que 45”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res44_2&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“el valor es menor o igual”&lt;/span&gt;&lt;/p&gt;

&lt;h4 id=&quot;usos-de-extractores-ya-implementados-en-scala&quot;&gt;Usos de extractores ya implementados en scala&lt;/h4&gt;

&lt;p&gt;Con estos ejemplos podemos ver que los extractores no solo sirven para facilitarnos acceder a los elementos, si no que también nos permiten hacer validaciones. Por ejemplo, en scala se usa para permitir el uso de regex en pattern matching y poder extraer los elementos (o grupos) que capturamos.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fecha&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(\d{4})-(\d{2})-(\d{2})&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;r&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&quot;2004-01-20&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fecha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;año: $year, mes: $month, dia: $day&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;no es una fecha&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fecha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;año: $year, mes: $month, dia: $day&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;no es una fecha&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;fecha&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;scala&lt;/span&gt;.&lt;span style=&quot;color:green&quot;&gt;util&lt;/span&gt;.&lt;span style=&quot;color:green&quot;&gt;matching&lt;/span&gt;.&lt;span style=&quot;color:green&quot;&gt;Regex&lt;/span&gt; = (\d{4})-(\d{2})-(\d{2})
&lt;span style=&quot;color:cyan&quot;&gt;res45_1&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“a\u00f1o: 2004, mes: 01, dia: 20”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res45_2&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“no es una fecha”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Otro caso es poder matchear las listas, esperando un número específico de elementos&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tiene solo un elemento $n1&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tiene dos elementos $n1, $n2&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tiene tres elementos $n1, $n2, $n3&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tiene demasiados elementos, exactamente  ${l.size}&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tiene solo un elemento $n1&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tiene dos elementos $n1, $n2&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tiene tres elementos $n1, $n2, $n3&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tiene demasiados elementos, exactamente  ${l.size}&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tiene solo un elemento $n1&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tiene dos elementos $n1, $n2&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tiene tres elementos $n1, $n2, $n3&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tiene demasiados elementos, exactamente  ${l.size}&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;res46_0&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“tiene tres elementos 1, 2, 3”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res46_1&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“tiene solo un elemento 1”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res46_2&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“tiene demasiados elementos, exactamente  4”&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;obtener-el-elemento-original-y-poder-aplicar-un-patrón&quot;&gt;Obtener el elemento original y poder aplicar un patrón.&lt;/h3&gt;

&lt;p&gt;El uso de extractores es muy común, pero podemos llegar al caso en el que nos interesaría poder tener el valor original en la condición además de una extracción. Para esto podemos hacer uso del símbolo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@&lt;/code&gt;, con el que podemos asignar el valor original a un valor y a continuación del símbolo descomponerlo con un patrón.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fecha&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(\d{4})-(\d{2})-(\d{2})&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;r&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&quot;2004-01-20&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fecha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;año: $year, mes: $month, dia: $day original $d&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;no es una fecha&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;fecha&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;scala&lt;/span&gt;.&lt;span style=&quot;color:green&quot;&gt;util&lt;/span&gt;.&lt;span style=&quot;color:green&quot;&gt;matching&lt;/span&gt;.&lt;span style=&quot;color:green&quot;&gt;Regex&lt;/span&gt; = (\d{4})-(\d{2})-(\d{2})&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res47_1&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“a\u00f1o: 2004, mes: 01, dia: 20 original 2004-01-20”&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;ahora-todo-a-la-vez&quot;&gt;¡Ahora todo a la vez!&lt;/h2&gt;

&lt;p&gt;Haciendo uso de todo lo visto hasta ahora y a modo de recordatorio, se pueden realizar comparativas complejas en muy poco código:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fecha&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(\d{4})-(\d{2})-(\d{2})&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// regex para fechas con guion 2020-01-01&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;anio19xx&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raw&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;19(\d{2})&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// regex para números de 4 cifras que comienzan por 19xx y extrae el xx&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;anioEspecial&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2001&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;queDiaEs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dateStr&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dateStr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// comparación con un valor tras la extracción&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fecha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;`anioEspecial`&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mi año especial :D&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// comparación con literal tras extracción&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fecha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;01&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;01&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;feliz año nuevo!&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// asignación del valor original y comparación en la extracción&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fecha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;02&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;29&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;es año bisiesto $d&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// varios posibles casos de un elemento extraido&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fecha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1800&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1700&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;eso es muy viejo&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// refinamiento tras extracción&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fecha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;reverse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;month&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;la fecha es capicua $year$month$day&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// extracción de un elemento obtenido por una extracción&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fecha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;anio19xx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year19&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$day del $month del año $year19&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fecha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;año: $year, mes: $month, dia: $day&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;no es una fecha&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;fecha&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;scala&lt;/span&gt;.&lt;span style=&quot;color:green&quot;&gt;util&lt;/span&gt;.&lt;span style=&quot;color:green&quot;&gt;matching&lt;/span&gt;.&lt;span style=&quot;color:green&quot;&gt;Regex&lt;/span&gt; = (\d{4})-(\d{2})-(\d{2})
&lt;span style=&quot;color:cyan&quot;&gt;anio19xx&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;scala&lt;/span&gt;.&lt;span style=&quot;color:green&quot;&gt;util&lt;/span&gt;.&lt;span style=&quot;color:green&quot;&gt;matching&lt;/span&gt;.&lt;span style=&quot;color:green&quot;&gt;Regex&lt;/span&gt; = 19(\d{2})
&lt;span style=&quot;color:cyan&quot;&gt;anioEspecial&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“2001”&lt;/span&gt;&lt;br /&gt;
defined &lt;span style=&quot;color:green&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color:cyan&quot;&gt;queDiaEs&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;queDiaEs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2001-03-01&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;queDiaEs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2021-01-01&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;queDiaEs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2020-02-29&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;queDiaEs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1800-03-29&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;queDiaEs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1700-03-29&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;queDiaEs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2020-02-02&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;queDiaEs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1995-02-03&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;queDiaEs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2021-31-10&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;queDiaEs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2021&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;res49_0&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“mi a\u00f1o especial :D”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res49_1&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“feliz a\u00f1o nuevo!”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res49_2&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“es a\u00f1o bisiesto 2020-02-29”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res49_3&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“eso es muy viejo”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res49_4&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“eso es muy viejo”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res49_5&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“la fecha es capicua 20200202”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res49_6&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“03 del 02 del a\u00f1o 95”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res49_7&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“a\u00f1o: 2021, mes: 31, dia: 10”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res49_8&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“no es una fecha”&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;un-error-que-todos-cometemos&quot;&gt;Un error que todos cometemos&lt;/h3&gt;

&lt;p&gt;Vimos al comienzo que el compilador nos daba un mensaje de advertencia cuando teníamos casos que no eran alcanzables, pero planteo otra duda. ¿Qué ocurre si tenemos un caso que no está contemplado?&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tengoDato&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tenemos el valor 0&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// solo contemplamos Some con el valor 0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;no tenemos valor&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;Compilador&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cmd50.sc:2: match may not be exhaustive.  
It would fail on the following input: Some((x: Int forSome x not in 0))  
o match {  
^
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;defined &lt;span style=&quot;color:green&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color:cyan&quot;&gt;tengoDato&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Ya vemos en este caso que solo con la definición ya nos advierte el compilador de que algo falta. Pero si aun así hacemos caso omiso, al ejecutar:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;tengoDato&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala.MatchError: Some(1) (of class scala.Some)  
    ammonite.$sess.cmd50$Helper.tengoDato(cmd50.sc:2)  
    ammonite.$sess.cmd51$Helper.&amp;lt;init&amp;gt;(cmd51.sc:1)  
    ammonite.$sess.cmd51$.&amp;lt;init&amp;gt;(cmd51.sc:7)  
    ammonite.$sess.cmd51$.&amp;lt;clinit&amp;gt;(cmd51.sc:-1)  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Obtenemos un error en la ejecución de tipo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scala.MatchError&lt;/code&gt;. Y ya hemos dicho que esto en scala hay que evitarlo siempre que sea posible.&lt;/p&gt;

&lt;p&gt;Como bien sabrás, scala está muy orientado a que se programe según el paradigma funcional, lo que nos lleva a las funciones puras. Si no conocías el concepto de función pura, podemos resumirlo como que a todo elemento que entra en una función, tiene que devolver un valor. Pero una excepción no es un valor.&lt;/p&gt;

&lt;p&gt;Hay que tener en cuenta que esta comprobación de exhausividad solo funciona si trabajamos con ADT’s. Si realizamos este match en un tipo primitivo como son &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt; o &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Int&lt;/code&gt;, el compilador no va a poder darnos estas advertencias.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;noExhaustivo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tenemos el valor 0&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tenemos el valor 1&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;defined &lt;span style=&quot;color:green&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color:cyan&quot;&gt;noExhaustivo&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;noExhaustivo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;noExhaustivo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;noExhaustivo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scala.MatchError: 2 (of class java.lang.Integer)  
    ammonite.$sess.cmd52$Helper.noExhaustivo(cmd52.sc:2)  
    ammonite.$sess.cmd53$Helper.&amp;lt;init&amp;gt;(cmd53.sc:3)  
    ammonite.$sess.cmd53$.&amp;lt;init&amp;gt;(cmd53.sc:7)  
    ammonite.$sess.cmd53$.&amp;lt;clinit&amp;gt;(cmd53.sc:-1)  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Por este motivo siempre es recomendable poner un caso por defecto (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case _ =&amp;gt; &lt;/code&gt;) que lo evite si estamos haciendo match sobre un elemento primitivo o clases que no sean ADTs.&lt;/p&gt;

&lt;h3 id=&quot;un-truco-si-eres-nuevo-o-no-te-fias-ni-de-ti-mismo&quot;&gt;Un truco si eres nuevo (o no te fias ni de ti mismo)&lt;/h3&gt;

&lt;p&gt;El compilador de scala sabe que un pattern matching es un posible foco de excepciones, por lo que en muchos casos, si ve que no se contemplan todos los casos de entrada, o lo que es lo mismo, no es exhaustivo, nos dará un advertencia a nivel de warning.&lt;/p&gt;

&lt;p&gt;Yo te doy un consejo, es buena practica hacer que una build falle si hay algún mensaje. Solo tienes que añadir la siguiente opción en tu proyecto sbt:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scalacOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-Xfatal-warnings&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;o si eres de los que trabaja con maven, en el plugin de scala añade junto a tus opciones:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;args&amp;gt;&lt;/span&gt;  
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;arg&amp;gt;&lt;/span&gt;-Xfatal-warnings&lt;span class=&quot;nt&quot;&gt;&amp;lt;/arg&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/args&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Con esto ya tenemos todas las herramientas necesarias para convertirnos en un ninja del patter matching. Podemos hacer una gran y compleja lógica de una manera muy legible y mantenible y teniendo al compilador supervisor.&lt;/p&gt;

&lt;h2 id=&quot;funciones-parciales&quot;&gt;Funciones parciales&lt;/h2&gt;

&lt;p&gt;Siempre que se ha hablado de pattern matching hemos hecho mucho hincapié en que ha de ser una función pura, es decir, contemplar todos los casos de entrada y que den respuesta a cada uno de ellos. Sin embargo algunas veces fuera del &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match&lt;/code&gt; solo queremos contemplar una parte de los casos. Esto en scala se llaman funciones parciales y tienen un &lt;a href=&quot;https://www.scala-lang.org/api/current/scala/PartialFunction.html&quot;&gt;interfaz&lt;/a&gt; ya creado para este propósito y que sigue la siguiente estructura:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PartialFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;-A&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;+B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isDefinedAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;El método &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apply&lt;/code&gt; es un método que no es necesario llamar de forma explícita, si no que se llama directamente solo pasándole los parámetros. En este caso sería el equivalente a la parte derecha tras la flecha (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=&amp;gt;&lt;/code&gt;) del pattern matching y, como podrás imaginar, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isDefinedAt&lt;/code&gt; es el método que representa la condición. Si está definido para el valor a comprobar devuelve verdadero y ejecutaríamos el método apply.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isEven&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PartialFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PartialFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isDefinedAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; is even&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;isEven&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;PartialFunction&lt;/span&gt;[&lt;span style=&quot;color:green&quot;&gt;Int&lt;/span&gt;, &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt;] = &lt;function1&gt;&lt;/function1&gt;&lt;/p&gt;

&lt;p&gt;Esto no quiere decir que nosotros tengamos que crear una instancia de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PartialFunction&lt;/code&gt; de forma explícita, porque para eso tenemos la sintaxis que usabamos anteriormente.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isEven&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PartialFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; is even&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;isEven&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;PartialFunction&lt;/span&gt;[&lt;span style=&quot;color:green&quot;&gt;Int&lt;/span&gt;, &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt;] = &lt;function1&gt;&lt;/function1&gt;&lt;/p&gt;

&lt;p&gt;Con esto, vemos uno de los grandes secretos del pattern matching. En el fondo solo es azúcar sintáctico que el compilador traduce al interfaz &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PartialFunction&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;¿Y qué usos podemos hacer de las funciones parciales? Pues podemos aplicarlas cuando necesitamos saber dos cosas: sobre qué podemos aplicar esta función, y si es el caso, qué queremos hacer con ellas. Por ejemplo el método &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collect&lt;/code&gt; de las colecciones, con el que seleccionamos solo los que pasan la criba y los transformados como se indica:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEven&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;res56&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;List&lt;/span&gt;[&lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt;] = &lt;span style=&quot;color:yellow&quot;&gt;List&lt;/span&gt;(&lt;span style=&quot;color:green&quot;&gt;“2 is even”&lt;/span&gt;, &lt;span style=&quot;color:green&quot;&gt;“4 is even”&lt;/span&gt;)&lt;/p&gt;

&lt;p&gt;Otra de las particularidades de las funciones parciales es que se pueden combinar para contemplar más casos.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isEven&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PartialFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; is even&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isOdd&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PartialFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; is odd&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pf&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PartialFunction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isEven&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;orElse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isOdd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;isEven&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;PartialFunction&lt;/span&gt;[&lt;span style=&quot;color:green&quot;&gt;Int&lt;/span&gt;, &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt;] = &lt;function1&gt;
&lt;span style=&quot;color:cyan&quot;&gt;isOdd&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;PartialFunction&lt;/span&gt;[&lt;span style=&quot;color:green&quot;&gt;Int&lt;/span&gt;, &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt;] = &lt;function1&gt;
&lt;span style=&quot;color:cyan&quot;&gt;pf&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;PartialFunction&lt;/span&gt;[&lt;span style=&quot;color:green&quot;&gt;Int&lt;/span&gt;, &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt;] = &lt;function1&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res57_3&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;List&lt;/span&gt;[&lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt;] = &lt;span style=&quot;color:yellow&quot;&gt;List&lt;/span&gt;(&lt;span style=&quot;color:green&quot;&gt;&quot;1 is odd&quot;&lt;/span&gt;, &lt;span style=&quot;color:green&quot;&gt;&quot;2 is even&quot;&lt;/span&gt;, &lt;span style=&quot;color:green&quot;&gt;&quot;3 is odd&quot;&lt;/span&gt;, &lt;span style=&quot;color:green&quot;&gt;&quot;4 is even&quot;&lt;/span&gt;)&lt;/function1&gt;&lt;/function1&gt;&lt;/function1&gt;&lt;/p&gt;

&lt;p&gt;En este caso, somos nosotros los que tenemos que asegurar que es exhaustivo.&lt;/p&gt;

&lt;h2 id=&quot;aplicación-de-pattern-matching-en-lambdas&quot;&gt;Aplicación de pattern matching en lambdas&lt;/h2&gt;

&lt;p&gt;Muchas veces cuando queremos hacer un pattern matching es creando una lambda, por ejemplo en un método map.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;optval&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;optval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;es 1&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;es el número 2&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;es otro número&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;optval&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;Some&lt;/span&gt;[&lt;span style=&quot;color:green&quot;&gt;Int&lt;/span&gt;] = &lt;span style=&quot;color:yellow&quot;&gt;Some&lt;/span&gt;(&lt;span style=&quot;color:green&quot;&gt;4&lt;/span&gt;)
&lt;span style=&quot;color:cyan&quot;&gt;res58_1&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;Option&lt;/span&gt;[&lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt;] = &lt;span style=&quot;color:yellow&quot;&gt;Some&lt;/span&gt;(&lt;span style=&quot;color:green&quot;&gt;“es otro n\u00famero”&lt;/span&gt;)&lt;/p&gt;

&lt;p&gt;Como hemos visto en el ejemplo anterior, si la lógica que queremos en esa lambda solo se compone de un pattern matching, podemos simplificar el código. Scala permite realizar un pattern matching con los parámetros pasados a la lambda cambiando el inicio &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x =&amp;gt; x match {&lt;/code&gt; por las llaves que tienen los casos directamente:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;optval&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;optval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;es 1&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;es el número 2&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;es otro número&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;optval&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;Some&lt;/span&gt;[&lt;span style=&quot;color:green&quot;&gt;Int&lt;/span&gt;] = &lt;span style=&quot;color:yellow&quot;&gt;Some&lt;/span&gt;(&lt;span style=&quot;color:green&quot;&gt;4&lt;/span&gt;)
&lt;span style=&quot;color:cyan&quot;&gt;res59_1&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;Option&lt;/span&gt;[&lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt;] = &lt;span style=&quot;color:yellow&quot;&gt;Some&lt;/span&gt;(&lt;span style=&quot;color:green&quot;&gt;“es otro n\u00famero”&lt;/span&gt;)&lt;/p&gt;

&lt;p&gt;Y tranquilo, si lo que esperas ha de ser una función completa o pura, ya te avisará el compilador si es exhaustivo o no (en los casos que vimos previamente).&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// tenemos advertencia de compilación y además error en la ejecución&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;Compilador&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cmd60.sc:3: match may not be exhaustive.
It would fail on the following input: None
val res60_1 = foo.map{
                     ^
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    scala.MatchError: None (of class scala.None$)  
      ammonite.$sess.cmd60$Helper.$anonfun$res60_1$1(cmd60.sc:3)  
      ammonite.$sess.cmd60$Helper.$anonfun$res60_1$1$adapted(cmd60.sc:3)  
      scala.collection.immutable.List.map(List.scala:297)  
      ammonite.$sess.cmd60$Helper.&amp;lt;init&amp;gt;(cmd60.sc:3)  
      ammonite.$sess.cmd60$.&amp;lt;init&amp;gt;(cmd60.sc:7)  
      ammonite.$sess.cmd60$.&amp;lt;clinit&amp;gt;(cmd60.sc:-1)  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Y si ve que espera una función parcial, ahí eres tú el responsable de que esté bien creado. El compilador no puede hacer todo por tí.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// al ser parcial, no tiene responsabilidad el compilador&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;foo&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;List&lt;/span&gt;[&lt;span style=&quot;color:green&quot;&gt;Option&lt;/span&gt;[&lt;span style=&quot;color:green&quot;&gt;Int&lt;/span&gt;]] = &lt;span style=&quot;color:yellow&quot;&gt;List&lt;/span&gt;(&lt;span style=&quot;color:yellow&quot;&gt;Some&lt;/span&gt;(&lt;span style=&quot;color:green&quot;&gt;4&lt;/span&gt;), &lt;span style=&quot;color:green&quot;&gt;None&lt;/span&gt;, &lt;span style=&quot;color:yellow&quot;&gt;Some&lt;/span&gt;(&lt;span style=&quot;color:green&quot;&gt;1&lt;/span&gt;))
&lt;span style=&quot;color:cyan&quot;&gt;res61_1&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;List&lt;/span&gt;[&lt;span style=&quot;color:green&quot;&gt;Int&lt;/span&gt;] = &lt;span style=&quot;color:yellow&quot;&gt;List&lt;/span&gt;(&lt;span style=&quot;color:green&quot;&gt;5&lt;/span&gt;, &lt;span style=&quot;color:green&quot;&gt;5&lt;/span&gt;)&lt;/p&gt;

&lt;h2 id=&quot;scala-3&quot;&gt;Scala 3&lt;/h2&gt;

&lt;p&gt;Ahora toca mirar al futuro próximo. En pocos meses tras la fecha de este post saldrá una nueva versión de scala denominada dotty o scala 3. En esta se ha reescrito el compilador y van a tener muchas novedades. Respecto al pattern matching, no va a haber grandes cambios. Todo lo que se ha visto para indicar la condición se mantiene tal cual. Pero sí merece la pena destacar unos puntos y ya de paso los escribimos con la sintaxis nueva que nos permite scala 3, omitiendo llaves y cambiandolas por &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;match-como-función&quot;&gt;Match como ‘función’&lt;/h3&gt;
&lt;p&gt;Un pequeño cambio respecto a la palabra &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match&lt;/code&gt;: sigue siendo una palabra reservada, pero ahora se puede usar como llamada a un método, es decir, usando punto respecto al valor. Eso si, tras &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match&lt;/code&gt; se pueden eliminar las llaves, sin necesidad de poner &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mf&quot;&gt;45.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;es 1&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;es el número 2&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;es otro número&quot;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://scastie.scala-lang.org/alfonsorr/qeozSdkzTvOTseiCc0OmnA&quot;&gt;link para ejemplo interactivo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Esta forma trata de permitirnos cambiar la prioridad para procesar el pattern matching, permitiéndonos integrarlo fácilmente con otros elementos, por ejemplo:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;match&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;then&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;valor 5&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;otro valor&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://scastie.scala-lang.org/alfonsorr/A4nNc65pSTuvrtWvSkFfaA/8&quot;&gt;link para ejemplo interactivo&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;extractores-irrefutables&quot;&gt;Extractores ‘irrefutables’&lt;/h3&gt;

&lt;p&gt;Otra de las mejoras que se tiene en scala 3 es la creación de extractores. Una limitación que tienen actualmente los extractores de scala 2 es la obligación de devolver los elementos extraidos en un Option, excepto para el caso del extractor Booleano, lo que representa que esa extracción puede no ir bien. Esto impide crear extractores que sabemos que siempre irán correctamente, o como lo llaman en la documentación, ‘irrefutables’. Como por ejemplo el siguiente.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PreviousAndNextNumber&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unapply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PreviousAndNextNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;valor valido&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;valor invalido&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://scastie.scala-lang.org/alfonsorr/Z0kg5fykTh6hE6c2g8GGvQ/1&quot;&gt;link para ejemplo interactivo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Como se ve, en este extractor se devuelve un elemento &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Option[Int]&lt;/code&gt; pero nunca va a haber posibilidad de que devolvamos &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;None&lt;/code&gt;. Esto en scala 3 se ha mejorado, permitiendo el uso de extractores que no solo devuelvan &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Option&lt;/code&gt;, sino también &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Product&lt;/code&gt;. Recordad que a este último pertenecen tuplas y todas las &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case class&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PreviousAndNextNumber&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unapply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PreviousAndNextNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;valor valido&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;valor invalido&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PreviousAndNextNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://scastie.scala-lang.org/alfonsorr/IYjlD9BWT9S1z6xRipQpIA/9&quot;&gt;link para ejemplo interactivo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Esto permite el uso de extractores en las asignaciones, cosa que no se suele usar mucho en scala 2 si no sabemos con exactitud si puede lanzar excepciones en caso de no ser válida la condición.&lt;/p&gt;

&lt;p&gt;Y como último apunte ya que hablamos de extractores, se permitirá su uso en los &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for comprehesion&lt;/code&gt;, pero eso es tema para otro post ;)&lt;/p&gt;

&lt;h2 id=&quot;resumen-final&quot;&gt;Resumen final&lt;/h2&gt;
&lt;p&gt;Conociendo que hacen los métodos unapply, o las funciones parciales podemos aplicar la herramienta adecuada en cada momento. Siempre con la intención de hacer un código legible y mantenible.
En scala el &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pattern matching&lt;/code&gt; siempre ha sido una de sus caracteristicas estrella, y ha madurado mucho. Tanto que en nuevas versiones solo tiene algunas mejoras para poder reutilizar algunos de sus elementos en más lugares.&lt;/p&gt;</content><author><name>Alfonso Roa</name></author><summary type="html">Repositorio Si prefieres leer este post en formato notebook, lo tienes disponible en github.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/pattern.jpg" /><media:content medium="image" url="http://localhost:4000/img/pattern.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Todo lo que quieres saber y nunca te atreviste a preguntar del pattern matching. Parte I.</title><link href="http://localhost:4000/2021/02/08/Pattern-matching-basico.html" rel="alternate" type="text/html" title="Todo lo que quieres saber y nunca te atreviste a preguntar del pattern matching. Parte I." /><published>2021-02-08T00:00:00+01:00</published><updated>2021-02-08T00:00:00+01:00</updated><id>http://localhost:4000/2021/02/08/Pattern-matching-basico</id><content type="html" xml:base="http://localhost:4000/2021/02/08/Pattern-matching-basico.html">&lt;h2 id=&quot;repositorio&quot;&gt;Repositorio&lt;/h2&gt;
&lt;p&gt;Si prefieres leer este post en formato notebook, lo tienes disponible en &lt;a href=&quot;https://github.com/alfonsorr/pattern-matching-post&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Si quieres comentar este post, hacer alguna pregunta o sugerencia, puedes usar nuestro &lt;a href=&quot;https://github.com/hablapps/blog/discussions/3&quot;&gt;foro del post&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;que-es-el-pattern-matching&quot;&gt;¿Que es el pattern matching?&lt;/h2&gt;

&lt;p&gt;Una estructura de control, pensada para comprobar si un elemento cumple ciertas condiciones. Si no la conocías antes es similar en sintaxis a un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt;, pero nos permite mayor precisión.
Para usarlo solo necesitamos poner a continuación del elemento sobre el que queremos aplicarlo la palabra reservada &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match&lt;/code&gt; e indicar cada uno de los casos que nos interesan.&lt;/p&gt;

&lt;p&gt;Comencemos con uno ejemplo sencillo:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stringExample&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stringExample&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;saludos&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;adios&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hasta pronto&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;???&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;stringExample&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“hola”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res3_1&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“saludos”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Vamos a describir que está ocurriendo aquí: tenemos nuestro valor asignado y empezamos el matcheado. En este caso, queremos comprobar si el valor a procesar es igual al string “hola”. En caso de ser correcto, se ejecutará el codigo de su parte derecha, si no, pasará al siguiente caso y repetirá lo misma comprobación hasta que uno coincida. Podéis ver que el último caso, se representa solo con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_&lt;/code&gt;, esta es la forma en scala de indicar “cualquier otro caso”. De esta forma, si ninguno de los anteriores ha sido satisfactorio, sabemos que siempre ejecutará la parte derecha de este código.&lt;/p&gt;

&lt;p&gt;Esta es la principal diferencia respecto a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switch&lt;/code&gt;. El patter matching únicamente ejecutará el primer trozo de código que satisfaga la condición, por lo que el orden que indiquemos importa.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stringExample&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stringExample&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;???&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;saludos&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;adios&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hasta pronto&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;Compilador&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cmd4.sc:3: patterns after a variable pattern cannot match (SLS 8.1.1)  
    case _ =&amp;gt; &quot;???&quot;  
            ^cmd4.sc:4: unreachable code due to variable pattern on line 3  
    case &quot;hola&quot; =&amp;gt; &quot;saludos&quot;  
                    ^cmd4.sc:5: unreachable code due to variable pattern on line 3  
    case &quot;adios&quot; =&amp;gt; &quot;hasta pronto&quot;  
                    ^cmd4.sc:4: unreachable code  
    case &quot;hola&quot; =&amp;gt; &quot;saludos&quot;  
                    ^
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;stringExample&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“hola”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res4_1&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;”???”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;En este ejemplo pusimos en primer caso el comodín &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_&lt;/code&gt;, por lo que cualquier valor al ser comparado ejecutará el código de la derecha. El resto de casos son inaccesibles, lo que hará que nos muestre un error de compilación &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;patterns after a variable pattern cannot match&lt;/code&gt; que nos indica que tenemos código inalcanzable. Todos los casos que hay tras el &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case _&lt;/code&gt; se podrían borrar. Esto nos da una pista de que nuestro pattern matching podría estar mal o que podemos prescindir de casos inalcanzables.&lt;/p&gt;

&lt;h2 id=&quot;pero-esto-es-solo-la-punta-del-iceberg&quot;&gt;Pero esto es solo la punta del iceberg.&lt;/h2&gt;

&lt;p&gt;Como hemos visto, pattern matching no solo podemos hacer condiciones de igualdad, si no que podemos hacer una variada cantidad de acciones.&lt;/p&gt;
&lt;h3 id=&quot;comparar-con-múltiples-casos&quot;&gt;Comparar con múltiples casos.&lt;/h3&gt;

&lt;p&gt;En caso de tener múltiples valores que pueden satisfacer un mismo caso, podemos representarlo separandolos con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;|&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stringExample1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stringExample1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;holi&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;saludos&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;adios&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hasta pronto&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;???&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stringExample2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;holi&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stringExample2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;holi&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;saludos&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;adios&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hasta pronto&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;???&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;stringExample1&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“hola”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res5_1&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“saludos”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;stringExample2&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“holi”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res5_3&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“saludos”&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;asignación-a-un-valor&quot;&gt;Asignación a un valor&lt;/h2&gt;

&lt;p&gt;En caso de cumplir la condición, muchas veces necesitamos recoger el valor extraído para poder procesarlo.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stringExample&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ya estoy&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stringExample&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;saludos&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;adios&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hasta pronto&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;el valor $x no está contemplado&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;stringExample&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“ya estoy”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res6_1&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“el valor ya estoy no est\u00e1 contemplado”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Podemos ver, que hemos cambiado nuestro comodín &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_&lt;/code&gt; por &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt;, lo que permite que se pueda usar en la parte derecha y podemos garantizar que si llegamos a este caso nuestro valor nunca contendrá los valores &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;hola&quot;&lt;/code&gt; y &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;adios&lt;/code&gt;”. Realmente el comodín no indica “en cualquier otro caso”, es una asignación igual que con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt;. La diferencia es que &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_&lt;/code&gt; no puede ser llamada desde la parte derecha.&lt;/p&gt;

&lt;p&gt;Aquí quiero hacer otro inciso, y es la forma en la que puedes nombrar al valor donde vamos a asignar el elemento sobre el que hacemos el matching, ya que scala tiene unas reglas.&lt;/p&gt;

&lt;p&gt;Pongamos el siguiente ejemplo, en el que asignamos el valor a un nombre ya existente.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;soy x&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stringExample&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ya estoy&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stringExample&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;saludos&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;adios&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hasta pronto&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;el valor $x no está contemplado&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;x&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“soy x”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;stringExample&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“ya estoy”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res7_2&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“el valor ya estoy no est\u00e1 contemplado”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;En este caso, el valor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; de dentro del &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match&lt;/code&gt; impedirá en el contexto de la derecha que se pueda acceder al valor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; externo. Esto se llama ocultamiento de valor o “variable shadowing”, y puede llevar a confusión en algunos casos. Desgraciadamente, el compilador de scala, NO nos dará una advertencia en caso de que ocurra esto.&lt;/p&gt;

&lt;p&gt;¿Y si yo quisiera comparar un caso con el contenido de un valor que tengo definido fuera del &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;match&lt;/code&gt;? En el pattern matching se puede, pero siguiendo unas reglas, ya que, como hemos visto, un valor con el que nos gustaría comparar puede convertirse en una nueva asignación. Entonces ¿cómo podría crear un caso si es igual a mi valor externo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt;? Indicando que este nombre de valor no es para asignarlo, si no compararlo, rodeando el valor con comillas &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;`x`&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;soy x&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stringExample&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;soy x&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stringExample&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;saludos&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;adios&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hasta pronto&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;`x`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;es el valor que tenía en x&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ninguno de los anteriores&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;x&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“soy x”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;stringExample&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“soy x”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res8_2&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“es el valor que ten\u00eda en x”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Y si no te fías de que esto sea así, pongamos un ejemplo que no coincida.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;soy x&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stringExample2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;no soy x&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stringExample2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;saludos&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;adios&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hasta pronto&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;`x`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;es el valor que tenía en x&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ninguno de los anteriores&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;x&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“soy x”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;stringExample2&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“no soy x”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res9_2&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“ninguno de los anteriores”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Otra forma más sencilla es seguir &lt;a href=&quot;https://docs.scala-lang.org/style/naming-conventions.html#constants-values-variable-and-methods&quot;&gt;la guia de estilo de scala&lt;/a&gt;. En ella se indica que los valores constantes definidos a nivel de clase han de empezar con mayúscula, lo que reconoce que no es un valor a asignar.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;soy x&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stringExample&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;soy x&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stringExample&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;saludos&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;adios&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hasta pronto&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;es el valor que tenía en x&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ninguno de los anteriores&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;X&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“soy x”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;stringExample&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“soy x”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res10_2&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“es el valor que ten\u00eda en x”&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;soy x&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stringExample2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;no soy x&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stringExample2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;saludos&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;adios&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hasta pronto&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;es el valor que tenía en x&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ninguno de los anteriores&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;X&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“soy x”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;stringExample2&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“no soy x”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res11_2&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“ninguno de los anteriores”&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;refinar-la-condición&quot;&gt;Refinar la condición.&lt;/h3&gt;

&lt;p&gt;Ahora que sabemos asignar el valor dentro de un caso podemos llegar a otra de las ventajas del pattern matching como es el poder refinar la condición sin tener que ser siempre por igualdad, como hemos hecho hasta el momento. Pongamos el ejemplo donde quisieramos tratar los strings que comiencen por &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;h&lt;/code&gt; de manera distinta, excepto el caso que tenemos ya, comparando con la palabra &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;hola&quot;&lt;/code&gt;. Con los conocimientos que tenemos actualmente, nuestro código quedaría algo tal que así:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stringExample2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;habana&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stringExample2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;saludos&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;adios&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hasta pronto&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'h'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;comienza por h&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ninguno de los anteriores&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;stringExample2&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“habana”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res12_1&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“comienza por h”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Pero la utilidad del pattern matching es la de aplanar todos los posibles casos y no empezar a anidar casos más complejos, por lo que podemos hacer uso de la asignación del valor y hacer filtrado de casos de la siguiente manera:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stringExample2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;habana&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;stringExample2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;saludos&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;adios&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hasta pronto&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'h'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;comienza por h&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ninguno de los anteriores&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;stringExample2&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“habana”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res13_1&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“comienza por h”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;De esta manera, vemos claramente los 4 posibles casos estructurados con su condición primero, y no tenemos que rebuscar lógica escondida a lo largo de todo el código. Lo único a tener en cuenta es que este &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; no necesita paréntesis en la condición, a diferencia de la estructura de control en scala.&lt;/p&gt;

&lt;h3 id=&quot;comprobación-del-tipo-del-elemento-matcheado&quot;&gt;Comprobación del tipo del elemento matcheado.&lt;/h3&gt;

&lt;p&gt;Hasta ahora, ¿todo bien? Comencemos a trabajar con más tipos, además de nuestro querido &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;. ¿Cómo podríamos sacar casos distintos si es string, si es Integer, y un último para el resto? En principio sería algo tal que así:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;matchfun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;isInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;xString&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tengo el string $xString&quot;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;isInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;xInt&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tengo el integer $xInt&quot;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;es otro tipo&quot;&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;defined &lt;span style=&quot;color:green&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color:cyan&quot;&gt;matchfun&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;matchfun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;matchfun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;matchfun&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;12.4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;res15_0&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“tengo el string hola”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res15_1&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“tengo el integer 42”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res15_2&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“es otro tipo”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Esta forma genera mucho código repetitivo, por lo que la sintaxis del pattern matching nos da una forma más concisa de describirlo. Esta nos sirve no solo para saber si es de un tipo, también hará automáticamente el cambio de tipo para que trabajemos en nuestro contexto de la derecha.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;matchfun2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tengo el string $x&quot;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tengo el integer $x&quot;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;es otro tipo&quot;&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;defined &lt;span style=&quot;color:green&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color:cyan&quot;&gt;matchfun2&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;matchfun2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;matchfun2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;matchfun2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;12.4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;res17_0&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“tengo el string hola”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res17_1&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“tengo el integer 42”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res17_2&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“es otro tipo”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Esta forma es mucho más concisa y nos evita mancharnos las manos con funciones como &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;asInstanceOf&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;cuidado-con-las-comprobaciones-de-algunas-clases&quot;&gt;Cuidado con las comprobaciones de algunas clases&lt;/h4&gt;

&lt;p&gt;Una cosa que tenemos que tener en cuenta es que estas comprobaciones se hacen en tiempo de ejecución. La JVM tiene una limitación y es los tipos paramétricos no existen durante la ejecución. En otras palabras, que si quisieramos comparar y saber si es de tipo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List[String]&lt;/code&gt; o &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List[Int]&lt;/code&gt; no podríamos fácilmente, ya que la información sobre qué tipo de elemento contiene se pierde durante la ejecución:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;matchfun2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tengo una lista de string de longitud ${x.size}&quot;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tengo una lista de integer de longitud ${x.size}&quot;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;es otro tipo de lista&quot;&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;Compilador&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cmd18.sc:3: non-variable type argument String in type pattern List[String] (the underlying of List[String]) is unchecked since it is eliminated by erasure  
        case x: List[String] =&amp;gt; s&quot;tengo una lista de string de longitud ${x.size}&quot;  
                ^cmd18.sc:4: non-variable type argument Int in type pattern List[Int] (the underlying of List[Int]) is unchecked since it is eliminated by erasure  
        case x: List[Int] =&amp;gt; s&quot;tengo una lista de integer de longitud ${x.size}&quot;  
                ^cmd18.sc:4: unreachable code  
        case x: List[Int] =&amp;gt; s&quot;tengo una lista de integer de longitud ${x.size}&quot;  
                              ^
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;defined &lt;span style=&quot;color:green&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color:cyan&quot;&gt;matchfun2&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;matchfun2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;adios&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;matchfun2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;matchfun2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;4.2f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;res19_0&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“tengo una lista de string de longitud 2”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res19_1&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“tengo una lista de string de longitud 1”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res19_2&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“tengo una lista de string de longitud 1”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Como puedes comprobar, el pattern matching no puede ver más allá de que se trata de una lista y el tipo contenido nunca lo tiene en cuenta, por lo que siempre entrará en el primer caso. Se podría comprobar qué tipo de elemento contiene en el primer elemento, pero siempre tendremos el problema en listas vacías, ya que nos resultará imposible poder comprobarlo. Eso si, como todo posible punto de error, el compilador nos informará para que lo tengamos en cuenta con el siguiente warning &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List[String] is unchecked since it is eliminated by erasure&lt;/code&gt;, o traducido, “List[String] no está chequeado porque ha sido borrado”. Esto ocurre porque el compilador lo traducirá a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case x: List =&amp;gt; ...&lt;/code&gt; borrando el tipo de la lista. Como os podréis imaginar esto no ocurre solo con listas, si no con todos los tipos paramétricos.&lt;/p&gt;

&lt;h3 id=&quot;adts-en-pattern-matching&quot;&gt;ADT’s en pattern matching&lt;/h3&gt;

&lt;p&gt;Ya hemos visto que scala permite comprobar el tipo del elemento para poder realizar una acción para cada tipo. Es por esto que quiero pararme a comentar una particularidad de la programación funcional, que por supuesto se aplica en scala, y es el uso de los Tipos Algebráicos de Datos, Algebraic Data Types en inglés o ADT para que sea más corto. Esto es una representación de los datos que se basa en el producto y suma de tipos, por ejemplo un producto de String e integer sería la siguiente &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case class&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Usuario&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nombre&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edad&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;defined &lt;span style=&quot;color:green&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:cyan&quot;&gt;Usuario&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Y una  suma de tipos se puede representar de múltiples maneras, pero la más común es el uso de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sealed trait&lt;/code&gt; por ejemplo.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Trabajador&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Currito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nombre&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Trabajador&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jefe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nombre&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subordinados&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Trabajador&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Trabajador&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;defined &lt;span style=&quot;color:green&quot;&gt;trait&lt;/span&gt; &lt;span style=&quot;color:cyan&quot;&gt;Trabajador&lt;/span&gt;&lt;br /&gt;
defined &lt;span style=&quot;color:green&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:cyan&quot;&gt;Currito&lt;/span&gt;&lt;br /&gt;
defined &lt;span style=&quot;color:green&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:cyan&quot;&gt;Jefe&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;En este vemos una representación de lo que sería un trabajador: o es alguien con subordinados a su cargo, o es un currante sin nadie a su cargo. Al ser un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sealed trait&lt;/code&gt; solo permite estas dos posibilidiades de tipo de trabajador y no se puede extender en ningún otro lado. Esta forma de representación de datos es muy usada en scala, incluso en elementos que nos da el lenguaje, como sería Option, que tiene dos posibles elementos: Some, que indica que contiene un elemento, o None, que no contiene ninguno.&lt;/p&gt;

&lt;p&gt;Dada la particularidad de esta suma de tipos, el pattern matching suele ser una herramienta muy común y útil para poder actuar según el tipo de dato que podamos encontrarnos.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;quienEs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Trabajador&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Jefe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${j.nombre} es jefe de ${j.subordinados.size} empleados&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Currito&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${c.nombre} es un gran trabajador&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tengoDato&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tenemos el valor ${s.get}&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;no tenemos valor&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// en este caso, no comparamos por tipo, si no contra el objeto único que representa un Option vacío&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;defined &lt;span style=&quot;color:green&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color:cyan&quot;&gt;quienEs&lt;/span&gt;&lt;br /&gt;
defined &lt;span style=&quot;color:green&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color:cyan&quot;&gt;tengoDato&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;quienEs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Jefe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;JM&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Currito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Ar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Currito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;J&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))))&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;quienEs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Currito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Ar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;tengoDato&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;tengoDato&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;res23_0&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“JM es jefe de 2 empleados”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res23_1&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“Ar es un gran trabajador”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res23_2&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“tenemos el valor 23”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res23_3&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“no tenemos valor”&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;extractores&quot;&gt;Extractores&lt;/h3&gt;

&lt;p&gt;Pero no nos quedemos solo con las limitaciones, porque al fin llega uno de los elementos más potentes del pattern matching (y mi favorito), los extractores. Pongamos que ya somos mayorcitos y no trabajamos solo con tipos simples como String, Int, etc, si no que ya tenemos estructuras más complejas, por ejemplo una tupla. En esta tupla nos gustaría hacer varios casos, segun el contenido de esta. Con nuestro conocimiento actual, podríamos hacer algo tal que así:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tuplaMatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;_2&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hola con valor igual que 10&quot;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;_2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hola con valor mayor que 10&quot;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;_1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hola con valor menor a 10&quot;&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;la palabra es ${x._1} con valor ${x._2}&quot;&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;defined &lt;span style=&quot;color:green&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color:cyan&quot;&gt;tuplaMatch&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;tuplaMatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;tuplaMatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;tuplaMatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;tuplaMatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;adios&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;res25_0&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“hola con valor igual que 10”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res25_1&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“hola con valor mayor que 10”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res25_2&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“hola con valor menor a 10”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res25_3&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“la palabra es adios con valor 42”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;El código es correcto, pero hasta el momento la principal ventaja del pattern matching es una descripción muy gráfica de la lógica en la comprobación. Aquí es donde entra el uso de los extractores, con los que podemos comprobar o asignar los elementos internos de una manera mucho más parecida a la representación de la construcción de la clase.&lt;/p&gt;

&lt;p&gt;Por ejemplo, para crear una tupla la forma en la que lo hacemos es poniendo los elementos necesarios entre paréntesis y separados por una coma. En este caso a ser una tupla de dos elementos que se podría representar tal que así:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tupla&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;texto&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;tupla&lt;/span&gt;: (&lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt;, &lt;span style=&quot;color:green&quot;&gt;Int&lt;/span&gt;) = (&lt;span style=&quot;color:green&quot;&gt;“texto”&lt;/span&gt;, &lt;span style=&quot;color:green&quot;&gt;1&lt;/span&gt;)&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tuplaMatch2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nf&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hola con valor igual que 10&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// hacemos uso de comparación&lt;/span&gt;
     &lt;span class=&quot;nf&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hola con valor mayor que 10&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// hacemos uso de comparación y de asignación de un elemento interno&lt;/span&gt;
     &lt;span class=&quot;nf&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hola con valor menor a 10&quot;&lt;/span&gt;
     &lt;span class=&quot;nf&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;la palabra es ${x1} con valor ${x2}&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// asignamos ambos elementos de la tupla&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;defined &lt;span style=&quot;color:green&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color:cyan&quot;&gt;tuplaMatch2&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;tuplaMatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;tuplaMatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;tuplaMatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;tuplaMatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;adios&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;res28_0&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“hola con valor igual que 10”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res28_1&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“hola con valor mayor que 10”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res28_2&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“hola con valor menor a 10”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res28_3&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“la palabra es adios con valor 42”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Hay que tener en cuenta que el uso de extractores no es solo para pattern matching, también se pueden  usar en las asignaciones&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tupla&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;texto&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primero&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;segundo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tupla&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;tupla&lt;/span&gt;: (&lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt;, &lt;span style=&quot;color:green&quot;&gt;Int&lt;/span&gt;) = (&lt;span style=&quot;color:green&quot;&gt;“texto”&lt;/span&gt;, &lt;span style=&quot;color:green&quot;&gt;1&lt;/span&gt;)
&lt;span style=&quot;color:cyan&quot;&gt;primero&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“texto”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;segundo&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;Int&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;1&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Los extractores no solo permiten comparar por igualdad, o asignar los elementos internos, también permiten comprobar el tipo de los elementos internos.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tuplaAnyMatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dos strings primero: $x segundo: $y&quot;&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;solo el primero es string: $x&quot;&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;solo el segundo es string: $x&quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ninguno es string&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;defined &lt;span style=&quot;color:green&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color:cyan&quot;&gt;tuplaAnyMatch&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;tuplaAnyMatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;adios&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;tuplaAnyMatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hola&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;tuplaAnyMatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;adios&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;tuplaAnyMatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;res31_0&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“dos strings primero: hola segundo: adios”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res31_1&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“solo el primero es string: hola”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res31_2&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“solo el segundo es string: adios”&lt;/span&gt;&lt;br /&gt;
&lt;span style=&quot;color:cyan&quot;&gt;res31_3&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;String&lt;/span&gt; = &lt;span style=&quot;color:green&quot;&gt;“ninguno es string”&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Como habrás visto, los extractores son una herramienta muy potente que permite simplificar nuestro código. Esto es tan común, que cuando trabajamos con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case classes&lt;/code&gt; (elemento fundamental para crear ADT’s) scala nos crea extractores que siguen la misma estructura de los constructores.&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Trabajador&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Currito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nombre&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Trabajador&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jefe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nombre&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subordinados&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Trabajador&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Trabajador&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;defined &lt;span style=&quot;color:green&quot;&gt;trait&lt;/span&gt; &lt;span style=&quot;color:cyan&quot;&gt;Trabajador&lt;/span&gt;&lt;br /&gt;
defined &lt;span style=&quot;color:green&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:cyan&quot;&gt;Currito&lt;/span&gt;&lt;br /&gt;
defined &lt;span style=&quot;color:green&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color:cyan&quot;&gt;Jefe&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dibujaJerarquia&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Trabajador&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nivel&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blancos&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;  &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nivel&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Currito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${blancos}- $n 🧑‍🏭&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jefe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${blancos}- $n 😎&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;nv&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dibujaJerarquia&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nivel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;defined &lt;span style=&quot;color:green&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color:cyan&quot;&gt;dibujaJerarquia&lt;/span&gt;&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;empresa&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jefe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
         &lt;span class=&quot;nc&quot;&gt;Jefe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Currito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Currito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))),&lt;/span&gt;
         &lt;span class=&quot;nc&quot;&gt;Jefe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;E&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Currito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;F&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Currito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;G&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))),&lt;/span&gt;
         &lt;span class=&quot;nc&quot;&gt;Currito&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;H&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;dibujaJerarquia&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empresa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    - A 😎
      - B 😎
        - C 🧑‍🏭
        - D 🧑‍🏭
      - E 😎
        - F 🧑‍🏭
        - G 🧑‍🏭
      - H 🧑‍🏭
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;empresa&lt;/span&gt;: &lt;span style=&quot;color:green&quot;&gt;Jefe&lt;/span&gt; = &lt;span style=&quot;color:yellow&quot;&gt;Jefe&lt;/span&gt;(
&lt;span style=&quot;color:green&quot;&gt;“A”&lt;/span&gt;,
&lt;span style=&quot;color:yellow&quot;&gt;List&lt;/span&gt;(
&lt;span style=&quot;color:yellow&quot;&gt;Jefe&lt;/span&gt;(&lt;span style=&quot;color:green&quot;&gt;“B”&lt;/span&gt;, &lt;span style=&quot;color:yellow&quot;&gt;List&lt;/span&gt;(&lt;span style=&quot;color:yellow&quot;&gt;Currito&lt;/span&gt;(&lt;span style=&quot;color:green&quot;&gt;“C”&lt;/span&gt;), &lt;span style=&quot;color:yellow&quot;&gt;Currito&lt;/span&gt;(&lt;span style=&quot;color:green&quot;&gt;“D”&lt;/span&gt;))),
&lt;span style=&quot;color:yellow&quot;&gt;Jefe&lt;/span&gt;(&lt;span style=&quot;color:green&quot;&gt;“E”&lt;/span&gt;, &lt;span style=&quot;color:yellow&quot;&gt;List&lt;/span&gt;(&lt;span style=&quot;color:yellow&quot;&gt;Currito&lt;/span&gt;(&lt;span style=&quot;color:green&quot;&gt;“F”&lt;/span&gt;), &lt;span style=&quot;color:yellow&quot;&gt;Currito&lt;/span&gt;(&lt;span style=&quot;color:green&quot;&gt;“G”&lt;/span&gt;))),
&lt;span style=&quot;color:yellow&quot;&gt;Currito&lt;/span&gt;(&lt;span style=&quot;color:green&quot;&gt;“H”&lt;/span&gt;)
    )
)&lt;/p&gt;

&lt;h2 id=&quot;resumen-final&quot;&gt;Resumen final&lt;/h2&gt;
&lt;p&gt;Como habrás visto, el pattern matching es una herramienta que permite simplificar códigos muy complejos de una manera estructurada. No es algo que sea exclusivo de scala, ni siquiera es el primero en tenerlo (otros lenguajes ya han introducido herramientas similares) pero podrás ver que siempre va de la mano con el paradigma funcional. Una tendencia que cada vez vemos en más lenguajes.
En el siguiente post, podrás ver elementos avanzados para poder crear tus propios extractores,  como mejorar los posibles errores que puedan surgirte y más.&lt;/p&gt;</content><author><name>Alfonso Roa</name></author><summary type="html">Repositorio Si prefieres leer este post en formato notebook, lo tienes disponible en github.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/pattern.jpg" /><media:content medium="image" url="http://localhost:4000/img/pattern.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Shape-dependent computations in Scala … and Agda!</title><link href="http://localhost:4000/2018/10/24/shape-dependent-computations-in-scala-and-agda/" rel="alternate" type="text/html" title="Shape-dependent computations in Scala … and Agda!" /><published>2018-10-24T12:18:16+02:00</published><updated>2018-10-24T12:18:16+02:00</updated><id>http://localhost:4000/2018/10/24/shape-dependent-computations-in-scala-and-agda</id><content type="html" xml:base="http://localhost:4000/2018/10/24/shape-dependent-computations-in-scala-and-agda/">&lt;p&gt;In this post we will solve a little programming problem, mainly with the excuse of talking about dependent types. As usual, Scala will be our programming language of choice. However, this time we will also use &lt;a href=&quot;https://agda.readthedocs.io/en/latest/index.html&quot;&gt;Agda&lt;/a&gt;, a programming language which boasts full-fledged support for dependent types. The ultimate goal of this post is comparing both implementations and sharing our experiences with dependently typed programming.&lt;/p&gt;

&lt;p&gt;You can find all the code in this post in the following &lt;a href=&quot;https://github.com/hablapps/shapeaware&quot;&gt;Github repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s start with …&lt;/p&gt;

&lt;h2 id=&quot;our-little-problem&quot;&gt;Our little problem&lt;/h2&gt;

&lt;p&gt;Let’s consider the following type of (non-empty) binary trees, implemented in Scala as a common algebraic data type:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We want to implement two functions that allow us to get and update the leaves of a given tree. As a first attempt (there will be several attempts more before we reach the solution, be patient!), we may come about with the following signatures:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Leaves&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get&lt;/code&gt; function bears no problem: there may be one or several leaves in the input tree, and the resulting list can cope with that. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; function, however, while essentially being what we want, poses some problems. This method returns a function which updates the leaves of the tree given a list of new values for those nodes. Ideally, we would expect to receive a list with exactly as many values as leaves are there in the tree. But given this signature, this may not happen at all: we may receive less values or more. In the former case, we are forced to make a choice: either to return the original tree or throwing an exception (abandoning purity). In the latter, it would be fair to return the exceeding values, besides the updated tree. In sum, the following signature seems to be more compliant with the problem at hand:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Leaves&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Essentially, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; method now returns a stateful computation, i.e. a value of the famous &lt;a href=&quot;https://typelevel.org/cats/datatypes/state.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StateT&lt;/code&gt;&lt;/a&gt; monad. This computation is run by giving an initial list of values, and will finish with a value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;None&lt;/code&gt; (meaning that it couldn’t complete the computation) or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Some(l, t)&lt;/code&gt;, i.e. the updated tree &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t&lt;/code&gt; and the list of exceeding values &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l&lt;/code&gt; (possibly, empty). We won’t show the implementation of these methods, but you can find it in the &lt;a href=&quot;https://github.com/hablapps/shapeaware/blob/master/src/test/scala/code.scala#L26&quot;&gt;repository&lt;/a&gt; of this post.&lt;/p&gt;

&lt;p&gt;Ok, this is nice, but we are stubborn and keep insisting on finding a way to prevent the user to pass a wrong number of values to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; method. I mean, we want to program the signature in such a way that the compiler throws an error if the programmer tries to call our function with less or more values than needed. Is it that possible?&lt;/p&gt;

&lt;h2 id=&quot;solving-the-problem-with-dependent-types&quot;&gt;Solving the problem with dependent types&lt;/h2&gt;

&lt;p&gt;A possible signature that solves our problem is the following one:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;n_leaves&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n_leaves: Tree[A] =&amp;gt; Integer&lt;/code&gt; is a function that returns the number of leaves of the specified tree, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vec&lt;/code&gt; type represents lists of a fixed size. This signature gives the Scala compiler the required information to grant execution of the following call:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res11&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and block the following one instead, with a nice compiler error:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;mismatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;err&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;err&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;… wouldn’t this be beautiful?&lt;/p&gt;

&lt;p&gt;Alas, the above signature is not legal Scala 2.12. The problem is in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vec[? , ? : Nat]&lt;/code&gt; type constructor. As we said, it holds two parameters. There is no problem with the first one: type constructors in Scala do indeed receive types as arguments. Another way of saying this is that types in Scala can be parameterised with respect to types. And yet another way is saying that types in Scala can be made &lt;em&gt;dependent&lt;/em&gt; on types. But the second parameter of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vec&lt;/code&gt; constructor is not a type, it’s a &lt;em&gt;value&lt;/em&gt;! And we can’t parameterise types in Scala with respect to values, only to types.&lt;/p&gt;

&lt;p&gt;A type whose definition refers to values is called a &lt;em&gt;dependent type&lt;/em&gt;. Indeed, the type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List[A]&lt;/code&gt; in Scala also &lt;em&gt;depends&lt;/em&gt; on something, to wit the type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt;. So, in a sense, we may rightfully call it a dependent type as well. However, the “dependent” qualifier is conventionally reserved for types that are parameterised with respect to values.&lt;/p&gt;

&lt;p&gt;Can’t we solve our problem in Scala, then? Yes, we will see that we can indeed solve this problem in Scala, albeit in a different way. But before delving into the Scala solution, let’s see how we can solve this problem in a language with full-fledged dependent types, in line with the solution sketched at the beginning of this section.&lt;/p&gt;

&lt;h2 id=&quot;the-solution-in-agda&quot;&gt;The solution in Agda&lt;/h2&gt;

&lt;p&gt;First, we must define the tree data type:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module Trees where
data Tree (A : Set) : Set where
leaf : A -&amp;gt; Tree A
node : Tree A -&amp;gt; A -&amp;gt; Tree A -&amp;gt; Tree A
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This a common algebraic data type definition, with constructors &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;leaf&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;node&lt;/code&gt;. The definition is parameterised with respect to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt;, which is declared to be a regular type, i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set&lt;/code&gt;. The resulting type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tree A&lt;/code&gt; is also a regular type (i.e. not a type constructor, which would be declared as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set -&amp;gt; Set&lt;/code&gt;). Next, we have to define the following function:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;open import Data.Nat


n_leaves : {A : Set} -&amp;gt; Tree A -&amp;gt; ℕ
n_leaves (leaf _) = 1
n_leaves (node l _ r) = n_leaves l + n_leaves r
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n_leaves&lt;/code&gt; function returns the number of leaves held by a given tree (as a natural number ℕ declared in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Data.Nat&lt;/code&gt; module). The implementation is based on pattern matching, using the same underscore symbol that we use in Scala whenever we are not interested in some value.&lt;/p&gt;

&lt;p&gt;Let’s implement now the promised &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; functions, which will be part of a module named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Leaves&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module Leaves where


open import Data.Vec
open Trees


get : {A : Set} -&amp;gt; (s : Tree A) -&amp;gt; Vec A (n_leaves s) = ?
update : {A : Set} -&amp;gt; (s : Tree A) -&amp;gt; Vec A (n_leaves s) -&amp;gt; Tree A = ?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, we can now use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n_leaves s&lt;/code&gt; value in a type definition! Indeed, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vec (A : Set) (n : ℕ)&lt;/code&gt; type is a truly dependent type. It represents lists of values of a fixed size &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt;. Moreover, the size does not need to be a constant such as 1, 2, 3, etc. It can be the result of a function, as this example shows. The implications of this are huge, as we will soon realise.&lt;/p&gt;

&lt;p&gt;Let’s expand the definition of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get&lt;/code&gt; function:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;get : {A : Set} -&amp;gt; (s : Tree A) -&amp;gt; Vec A (n_leaves s)
get (leaf x) = x ∷ []
get (node l _ r) = get l ++ get r
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the tree is a leaf, we just return its value in a vector of length one. Otherwise, we collect recursively the leaves of the left and right subtrees and return their concatenation. What would happen if we implemented the first clause in the pattern matching as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get (leaf x) = []&lt;/code&gt; (i.e. if we attempted to return the empty vector for a leaf tree)? The compiler would complain with the following error:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0 != 1 of type .Agda.Builtin.Nat.Nat
when checking that the expression [] has type
Vec .A (n_leaves (leaf x))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This error says that 0, i.e. the length of the empty vector &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]&lt;/code&gt;, does not equal 1, i.e. the number of leaves of the input tree &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;leaf x&lt;/code&gt;. All this while attempting to check that the proposed output &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]&lt;/code&gt;, whose type is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vec A 0&lt;/code&gt;, has the required type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vec .A (n_leaves (leaf x))&lt;/code&gt;, i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vec A 1&lt;/code&gt;. Similarly, in the second clause, the compiler will care itself to check that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n_leaves l + n_leaves r&lt;/code&gt;, which is the resulting length of the vector concatenation &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get l :: get r&lt;/code&gt;, equals the value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n_leaves (node l _ r)&lt;/code&gt;, which according to the definition of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n_leaves&lt;/code&gt; function is indeed the case. In sum, we can’t cheat the compiler and return a vector with a number of values different to the number of leaves in the input tree. This property is hardwired in the signature of the function, thanks to the expressiveness of the Agda type system. And to be able to guarantee that, Agda needs to be able to perform computations on values at compile time.&lt;/p&gt;

&lt;p&gt;The implementation of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; function is similarly beautiful:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-agda&quot;&gt;update : {A : Set} -&amp;gt; (s : Tree A) -&amp;gt; Vec A (n_leaves s) -&amp;gt; Tree A
update (leaf _) (x ∷ []) = leaf x
update (node l x r) v = node updatedL x updatedR
  where
    updatedL = update l (take (n_leaves l) v)
    updatedR = update r (drop (n_leaves l) v)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that in the first clause of the pattern matching, we were able to deconstruct the input vector into the shape &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x ∷ []&lt;/code&gt;, without the compiler complaining about missing clauses for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;leaf&lt;/code&gt; constructor. This is because Agda knows (by evaluating the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n_leaves&lt;/code&gt; function) that any possible leaf tree has a number of leaves equals to one. In the second clause, the input vector has type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v : Vec A (n_leaves (node l x r))&lt;/code&gt;, which Agda knows to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v : Vec A (n_leaves l + n_leaves r)&lt;/code&gt; by partially evaluating the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n_leaves&lt;/code&gt; function. This is what makes the subsequent calls to update the left and right subtrees typesafe. Indeed, to update the left subtree &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l&lt;/code&gt; we need a vector with a number of elements equal to its number of leaves &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n_leaves l&lt;/code&gt;. This vector has to be a subvector of the input vector &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v&lt;/code&gt;, which Agda knows to have length &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n_leaves l + n_leaves r&lt;/code&gt; as we mentioned before. So, the expression &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;take (n_leaves l) v&lt;/code&gt; will compile without problems. Similarly, Agda knows that the length of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;drop (n_leaves l) v&lt;/code&gt; vector will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n_leaves r&lt;/code&gt; (by checking the definition of the concatenation function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;++&lt;/code&gt;), which is precisely what the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update r&lt;/code&gt; function needs.&lt;/p&gt;

&lt;p&gt;Let’s exercise these definitions in the following module:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-agda&quot;&gt;module TestLeaves where

open import Data.Nat
open import Data.Vec
open Trees
open LeavesAdHoc


t1 : Tree ℕ
t1 = node (node (leaf 1) 2 (leaf 3)) 4 (leaf 5)


l1 : Vec ℕ 3
l1 = Leaves.get t1


t2 : Tree ℕ
t2 = Leaves.update t1 (5 ∷ 3 ∷ 1 ∷ [])


// CHECK


open import Relation.Binary.PropositionalEquality


eq1 : l1 ≡ (1 ∷ 3 ∷ 5 ∷ [])
eq1 = refl


eq2 : t2 ≡ (node (node (leaf 5) 2 (leaf 3)) 4 (leaf 1))
eq2 = refl


-- WON'T COMPILE


{- Error: 3 != 4 of type ℕ
when checking that the expression get t1 has type Vec ℕ 4


l2 : Vec ℕ 4
l2 = Leaves.get t1
-}


{- Error: 0 != 2 of type ℕ
when checking that the expression [] has type Vec ℕ 2


t3 : Tree ℕ
t3 = Leaves.update t1 (5 ∷ [])
-}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l1&lt;/code&gt; variable represents the leaves of the sample tree &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t1&lt;/code&gt;, namely values 1, 3 and 5. Accordingly, the type of the variable is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vec ℕ 3&lt;/code&gt;. The variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t2&lt;/code&gt; is the result of updating the tree with a new collection of leaves. In both cases, we make reference to the functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; declared in the module &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Leaves&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The next lines &lt;em&gt;prove&lt;/em&gt; that the values of these variables are the expected ones, making use of the equality type constructor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_≡_&lt;/code&gt; and its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;refl&lt;/code&gt; constructor (note that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_≡_&lt;/code&gt; is parameterised with respect two values, so it’s a dependent type). The proof is plain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;refl&lt;/code&gt;exivity, i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x ≡ x&lt;/code&gt;, since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t2&lt;/code&gt; actually evaluate to the same values.&lt;/p&gt;

&lt;p&gt;Note that the fact that this code compiles is enough to show that the tests pass. We don’t need to run anything! On the other hand, Agda allows us to test that our functions work as expected by implementing much more complex proofs for more expressive properties. We will leave that for another post.&lt;/p&gt;

&lt;p&gt;Let’s come back to Scala.&lt;/p&gt;

&lt;h2 id=&quot;the-solution-in-scala&quot;&gt;The solution in Scala&lt;/h2&gt;

&lt;p&gt;We can’t make computations on values in Scala at compile time, but we can do it on types! And this suffices to solve our problem, albeit in a different form to Agda. We will reconcile both approaches in the next section.&lt;/p&gt;

&lt;p&gt;Type-level computation in Scala proceeds through the implicits mechanism. But before we can exploit implicits, we first need to re-implement our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tree&lt;/code&gt; data type so that we don’t loose the &lt;em&gt;shapes&lt;/em&gt; of trees:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]](&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This new implementation differs with the previous one in the types of the recursive arguments of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Node&lt;/code&gt; constructor. Now, they are generic parameters &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;L&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R&lt;/code&gt;, declared to be subtypes of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tree[A]&lt;/code&gt;, i.e. either leaves or nodes. Essentially, this allows us to preserve the exact type of the tree; what we will call its &lt;em&gt;shape&lt;/em&gt;. In essence, this is the same trick commonly used to implement heterogeneous lists in Scala (see, e.g. their &lt;a href=&quot;https://github.com/milessabin/shapeless/blob/master/core/src/main/scala/shapeless/hlists.scala#L30&quot;&gt;implementation&lt;/a&gt; in the shapeless framework). For instance, let’s compare both implementations in the REPL, with the old implementation of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tree&lt;/code&gt; data type located in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt; module, and the new one in the current scope:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;p_tree&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;p_tree&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;P.Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we can see, the type of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p_tree&lt;/code&gt; is simply &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Node[Int]&lt;/code&gt;, whereas the type of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tree&lt;/code&gt; is much more informative: we don’t only know that it is a node tree; we know that it holds exactly five elements, three of which are leaves. Its shape has not been lost.&lt;/p&gt;

&lt;p&gt;We can apply the same trick to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt; type, in order to preserve information about the shape of list instances (essentially, how many values it stores). This is the resulting definition:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s see now how can we exploit these shape-aware, algebraic data types, to support shape-dependent, type-level computations … and finally solve our little problem. Recall the original signatures for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get/update&lt;/code&gt; functions, which built upon the common, non-shape aware definitions of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tree&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt; data types:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Leaves&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we can explain their limitations in a more precise way. For instance, let’s consider the resulting function of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt;. The input of this function is declared to be any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List[A]&lt;/code&gt;, not lists of a particular &lt;em&gt;shape&lt;/em&gt;. That’s relevant to our problem because we want the compiler to be able to block invocations for trees of an undesired shape, i.e. length. But how can we represent the shape of an algebraic data type in the Scala type system? The answer is &lt;em&gt;subtyping&lt;/em&gt;, i.e. we can declare the result of that function to be some &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;L &amp;lt;: List[A]&lt;/code&gt;, instead of a plain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List[A]&lt;/code&gt;. There is a one-to-one correspondence between the subtypes of the algebraic data type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List[A]&lt;/code&gt; and its possible shapes.&lt;/p&gt;

&lt;p&gt;Similarly, the input trees of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; are declared to be any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tree[A]&lt;/code&gt;, instead of trees of a particular shape &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T &amp;lt;: Tree[A]&lt;/code&gt;. This is bad, because in that way we won’t be able to determine which is the exact list shape that must be returned for a given tree. Ok, but how can we determine the shape of list corresponding to a given shape of tree? The answer is using &lt;em&gt;type-level functions&lt;/em&gt; which operates on input/output types that represent shapes.&lt;/p&gt;

&lt;p&gt;These shape-dependent functions are declared as traits and defined through the implicits mechanism. For instance, the declaration of the type-level function between trees and lists is as follows:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LeavesShape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Out&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;In&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Out&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;In&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;In&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LeavesShape&lt;/code&gt; trait is parameterised with respect to any &lt;em&gt;shape&lt;/em&gt; of tree. Its instance for a particular shape will give us the list shape that we can use to store the current leaves of the tree, or the new values required for those leaves. Moreover, for that particular shape of tree we also obtain its corresponding get and update implementations.&lt;/p&gt;

&lt;p&gt;Concerning the implementation of the shape-dependent function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LeavesShape&lt;/code&gt;, i.e. how do we compute the shape of list corresponding to a given shape of tree, we proceed through implicits defined in its companion object. The following signatures (not for the faint of heart …) suffice:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LeavesShape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LeavesShape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;_Out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;leafCase&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Cons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Nil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nodeCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
    &lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
    &lt;span class=&quot;kt&quot;&gt;LOut&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
    &lt;span class=&quot;kt&quot;&gt;ROut&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]](&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;ShapeL&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;LOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;ShapeR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;ROut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Conc&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Concatenate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;LOut&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;ROut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;L&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Conc.Out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We omit the implementations of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; functions to focus on the list shape computation, which is shown through the type alias &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Output&lt;/code&gt;. The first case is easy: the shape of list which we need to hold the leaves of a tree of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Leaf[A]&lt;/code&gt; is the one that allows us to store a single element of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt;, i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cons[A, Nil[A]]&lt;/code&gt;. For arbitrary node trees, the situation is in appearance more complicated, though conceptually simple. Given a tree of shape &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Node[L, A, R]&lt;/code&gt;, we first need to know the list shapes for the left and right subtrees &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;L&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;R&lt;/code&gt;. The implicit arguments &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ShapeL&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ShapeR&lt;/code&gt; provide us with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LOut&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ROut&lt;/code&gt; shapes. The resulting list shape will be precisely their concatenation, which we achieve through an auxiliary type-level function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Concatenate&lt;/code&gt; (not shown for brevity, but implemented in a similar way). The shape concatenation will be accessible through the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Out&lt;/code&gt; type member variable of that function. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Conc.Out&lt;/code&gt; type is an example of path-dependent type, a truly dependent type since it depends on the value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Conc&lt;/code&gt; obtained through the implicits mechanism.&lt;/p&gt;

&lt;p&gt;We are about to finish. The only thing that is needed is some way to call the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; member functions of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LeavesShape&lt;/code&gt; type-level function, for a given tree value. We achieve that with two auxiliary definitions, located in a definitive &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Leaves&lt;/code&gt; module (where the type-level function and its companion object are also implemented):&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Leaves&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;In&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LeavesShape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;In&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S.Out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;In&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LeavesShape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;In&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S.Out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;


  &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LeavesShape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LeavesShape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The auxiliary functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; are the typesafe counterparts of the original signatures. The first difference that we may emphasise is that the type of input trees is not a plain, uninformative &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tree[A]&lt;/code&gt;, but a particular shape of tree &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;In&lt;/code&gt;. The compiler can then use this shape as input to the type-level function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LeavesShape&lt;/code&gt;, to compute the shape of the resulting list &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S.Out&lt;/code&gt;. The output of these functions is thus declared as a path-dependent type. Last, note that the implementation of these functions is wholly delegated to the corresponding implementations of the inferred type-level function. Let’s see how this works in the following REPL session:&lt;/p&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tree&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Cons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Cons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Nil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Cons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Cons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())))&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Cons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]()))))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Leaf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Cons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]()))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;mismatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Nil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Cons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Cons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Nil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]]&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Cons&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]())&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As expected, when we pass lists of the right shape, everything works. On the contrary, as shown in the last example, if we pass a list of the wrong size, the compiler will complain. In particular, the error message tells us that it found a list of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nil[Int]&lt;/code&gt; where it expected a list of size two. This is because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update(tree)&lt;/code&gt; returns a list of shape three, and we only pass a list of size one. This is exactly the same behaviour that we got with the Agda implementation.&lt;/p&gt;

&lt;h2 id=&quot;reconciling-scala-and-agda&quot;&gt;Reconciling Scala and Agda&lt;/h2&gt;

&lt;p&gt;The Scala and Agda implementations seem very different. In Scala, we exploit the expressiveness of its type system to preserve the shape of algebraic data type values, and perform type-level, shape-dependent computations at compile time. In Agda, we exploit its capability to declare full-fledged dependent types, and perform value-level computations at compile time.&lt;/p&gt;

&lt;p&gt;Nonetheless, let’s recall the signatures of both implementations and try to reconcile their differences:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-agda&quot;&gt;-- AGDA VERSION


module Leaves where
open import Data.Vec
open Trees


get : {A : Set} -&amp;gt; (s : Tree A) -&amp;gt; Vec A (n_leaves s) = ?
update : {A : Set} -&amp;gt; (s : Tree A) -&amp;gt; Vec A (n_leaves s) -&amp;gt; Tree A = ?
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;language-scala highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// SCALA VERSION&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Leaves&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;In&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LeavesShape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;In&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S.Out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;In&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;LeavesShape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;In&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;S.Out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;


  &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LeavesShape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Out&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;In&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Out&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;In&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;In&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LeavesShape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In a sense, the Scala signature is simpler: there is no need to use a different type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vec (A : Set) n : Nat&lt;/code&gt;. The very same algebraic data type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List[A]&lt;/code&gt; (albeit implemented in a shape-aware fashion), and subtyping suffice for representing shapes. In Agda, the new vector type is introduced precisely to represent the shapes of lists, which are in one to one correspondence with the natural numbers.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#length&lt;/code&gt; function is then used to compute the required shape for a given tree. In Scala, there is no particular need for that, since the shape is computed along the implementation of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update&lt;/code&gt; functions in the type-level function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LeavesShape&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The downside of the Scala implementation is, evidently, its verbosity and the amount of techniques and tricks involved: path-dependent types, traits, subtyping, implicits, auxiliary functions, … This is a &lt;a href=&quot;https://github.com/lampepfl/dotty/pull/3844&quot;&gt;recognised problem&lt;/a&gt; which is being tackled for the future Scala 3.0 version.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;We may have mimicked the Agda implementation style in Scala. In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shapeless&lt;/code&gt; framework, for instance, we have available the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sized&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nat&lt;/code&gt; types to represent lists of a fixed size (see the implementation &lt;a href=&quot;https://github.com/hablapps/shapeaware/blob/master/src/test/scala/code.scala#L207&quot;&gt;here&lt;/a&gt;), and we may even use &lt;a href=&quot;https://docs.scala-lang.org/sips/42.type.html&quot;&gt;literal types&lt;/a&gt; to overcome the limitation of using values in type declarations. Alternatively, we proposed an implementation fully based on shape-aware algebraic data types. This version is in our opinion more idiomatic to solve our particular problem in Scala. It also allows us to grasp the idiosyncrasy of Scala with respect to competing approaches like the one proposed in Agda. In this regard, we found the notion of &lt;a href=&quot;http://www.cs.nott.ac.uk/~psztxa/publ/fossacs03.pdf&quot;&gt;&lt;em&gt;shape&lt;/em&gt;&lt;/a&gt; to be extremely useful.&lt;/p&gt;

&lt;p&gt;In next posts we will likely go on exploring Agda in one of its most characteristic applications: certified programming. For instance, we may generalise the example shown in this post and talk about &lt;em&gt;traversals&lt;/em&gt; (a kind of optic, like lenses) and its laws. One of these laws, applied to our example, tells us that if you update the leaves of the tree with its current leaf values, you will obtain the same tree. Using Agda, we can state that law and &lt;em&gt;prove&lt;/em&gt; that our implementation satisfies it. No need to enumerate test cases, or empirically test the given property (e.g., as in Scalacheck). Till the next post!&lt;/p&gt;</content><author><name>Juan Manuel Serrano</name></author><summary type="html">In this post we will solve a little programming problem, mainly with the excuse of talking about dependent types. As usual, Scala will be our programming language of choice. However, this time we will also use Agda, a programming language which boasts full-fledged support for dependent types. The ultimate goal of this post is comparing both implementations and sharing our experiences with dependently typed programming.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/default-post.svg" /><media:content medium="image" url="http://localhost:4000/img/default-post.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Lens, State is your father… and I can prove it!</title><link href="http://localhost:4000/2018/01/24/lens-state-is-your-father-and-i-can-prove-it/" rel="alternate" type="text/html" title="Lens, State is your father… and I can prove it!" /><published>2018-01-24T16:28:40+01:00</published><updated>2018-01-24T16:28:40+01:00</updated><id>http://localhost:4000/2018/01/24/lens-state-is-your-father-and-i-can-prove-it</id><content type="html" xml:base="http://localhost:4000/2018/01/24/lens-state-is-your-father-and-i-can-prove-it/">&lt;p&gt;Here it is our new blog post, as a sequel of &lt;a href=&quot;https://blog.hablapps.com/2016/11/10/lens-state-is-your-father/&quot;&gt;Lens, State Is Your Father&lt;/a&gt;. Today, we’ll try to formalize some informal claims that we did in that article and we’ll emphasize on the relevance of proof assistants in functional programming. We’ve decided to &lt;a href=&quot;https://github.com/hablapps/LensStateIsYourFather&quot;&gt;publish the content of this post as a GitHub repo&lt;/a&gt;, to get a better formatting of &lt;em&gt;Coq&lt;/em&gt; snippets (so please, feel free to send your pull requests to improve it). As usual, we hope you like it!&lt;/p&gt;</content><author><name>Jesus Lopez-Gonzalez</name></author><category term="coq" /><category term="Lens" /><category term="monad" /><category term="Optics" /><category term="proof" /><category term="Scala" /><category term="State" /><category term="Type Class" /><summary type="html">Here it is our new blog post, as a sequel of Lens, State Is Your Father. Today, we’ll try to formalize some informal claims that we did in that article and we’ll emphasize on the relevance of proof assistants in functional programming. We’ve decided to publish the content of this post as a GitHub repo, to get a better formatting of Coq snippets (so please, feel free to send your pull requests to improve it). As usual, we hope you like it!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/img/default-post.svg" /><media:content medium="image" url="http://localhost:4000/img/default-post.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>